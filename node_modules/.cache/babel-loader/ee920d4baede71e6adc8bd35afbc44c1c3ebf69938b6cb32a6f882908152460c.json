{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"Threat\",\n  data() {\n    return {\n      threatRelationChart: null,\n      evidenceChart: null,\n      selectedEvent: null,\n      threatEvents: [],\n      rawRecentAbnormalEvents: [],\n      departmentAbnormalCountsData: [],\n      employeeAbnormalActivitiesData: {},\n      isLoading: false\n    };\n  },\n  async mounted() {\n    await this.loadThreatData();\n    this.initThreatRelationChart();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n    if (this.threatRelationChart) {\n      this.threatRelationChart.dispose();\n    }\n    if (this.evidenceChart) {\n      this.evidenceChart.dispose();\n    }\n  },\n  methods: {\n    async loadThreatData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载威胁情报数据...\");\n      try {\n        const [recentRes, deptRes, empRes] = await Promise.all([fetch(\"/recent_abnormal_events.json\"), fetch(\"/department_abnormal_counts.json\"), fetch(\"/employee_abnormal_activities.json\")]);\n        if (!recentRes.ok) throw new Error(\"加载最近异常事件失败\");\n        this.rawRecentAbnormalEvents = await recentRes.json();\n        if (!deptRes.ok) throw new Error(\"加载部门异常统计失败\");\n        this.departmentAbnormalCountsData = await deptRes.json();\n        if (!empRes.ok) throw new Error(\"加载员工异常活动失败\");\n        this.employeeAbnormalActivitiesData = await empRes.json();\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n        this.$message.success(\"威胁情报数据加载完成！\");\n      } catch (error) {\n        console.error(\"加载威胁数据失败:\", error);\n        this.$message.error(`加载威胁数据失败: ${error.message}`);\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    processThreatEvents() {\n      if (this.rawRecentAbnormalEvents && this.rawRecentAbnormalEvents.length > 0) {\n        this.threatEvents = this.rawRecentAbnormalEvents.map((event, index) => ({\n          id: index + 1,\n          type: event.type || \"未知类型\",\n          date: event.timestamp ? event.timestamp.split(\" \")[0] : \"未知日期\",\n          time: event.timestamp ? event.timestamp.split(\" \")[1] : \"未知时间\",\n          user: event.employeeId || \"未知用户\",\n          description: event.description || \"无描述\",\n          level: event.level || \"未知\",\n          detailDescription: `${event.description}. Raw event: ${JSON.stringify(event.rawEvent, null, 2)}`,\n          rawEventData: event\n        }));\n      } else {\n        this.threatEvents = [];\n      }\n    },\n    initThreatRelationChart() {\n      if (this.threatRelationChart) {\n        this.threatRelationChart.dispose();\n      }\n      const chartDom = document.getElementById(\"threatRelationChart\");\n      if (chartDom) {\n        this.threatRelationChart = this.$echarts.init(chartDom);\n        this.updateThreatRelationChart();\n      } else {\n        console.error(\"Threat relation chart DOM not found.\");\n      }\n    },\n    updateThreatRelationChart() {\n      if (!this.threatRelationChart) return;\n      let nodes = [];\n      let links = [];\n      const categories = [{\n        name: \"员工\",\n        itemStyle: {\n          color: \"#409EFF\"\n        }\n      },\n      // Category 0\n      {\n        name: \"异常类型\",\n        itemStyle: {\n          color: \"#F56C6C\"\n        }\n      } // Category 1\n      // Możemy dodać więcej kategorii w przyszłości\n      ];\n      if (!this.employeeAbnormalActivitiesData || Object.keys(this.employeeAbnormalActivitiesData).length === 0) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"暂无员工异常活动数据以生成关联图\",\n            left: \"center\",\n            top: \"center\"\n          },\n          series: [] // Ensure series is empty if no data\n        });\n        return;\n      }\n      const employeeNodes = new Map(); // Store employee nodes to avoid duplicates: employeeId -> nodeIndex\n      const activityTypeNodes = new Map(); // Store activity type nodes: typeName -> nodeIndex\n      let nodeCounter = 0;\n      for (const empId in this.employeeAbnormalActivitiesData) {\n        if (Object.hasOwnProperty.call(this.employeeAbnormalActivitiesData, empId)) {\n          // Add employee node if not exists\n          if (!employeeNodes.has(empId)) {\n            nodes.push({\n              id: `emp_${empId}`,\n              name: `员工 ${empId}`,\n              category: 0,\n              // Employee category\n              symbolSize: 35,\n              value: this.employeeAbnormalActivitiesData[empId].length,\n              // Size by number of activities\n              draggable: true\n            });\n            employeeNodes.set(empId, nodeCounter++);\n          }\n          const activities = this.employeeAbnormalActivitiesData[empId];\n          activities.forEach(activity => {\n            const activityType = activity.type || \"未知类型\";\n            // Add activity type node if not exists\n            if (!activityTypeNodes.has(activityType)) {\n              nodes.push({\n                id: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n                name: activityType,\n                category: 1,\n                // Activity Type category\n                symbolSize: 25,\n                value: 1,\n                // Initial value, can be incremented if multiple employees have this type\n                draggable: true\n              });\n              activityTypeNodes.set(activityType, nodeCounter++);\n            } else {\n              // Increment value for existing activity type node if needed for sizing\n              const existingNodeIndex = activityTypeNodes.get(activityType);\n              if (nodes[existingNodeIndex]) nodes[existingNodeIndex].value++;\n            }\n\n            // Add link from employee to activity type\n            links.push({\n              source: `emp_${empId}`,\n              target: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n              value: 1 // Can be used for line thickness if needed\n            });\n          });\n        }\n      }\n\n      // Fallback if no nodes were created (e.g. empty activities for all employees)\n      if (nodes.length === 0) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"未从数据中提取出有效的关联节点\",\n            left: \"center\",\n            top: \"center\"\n          },\n          series: []\n        });\n        return;\n      }\n      const option = {\n        title: {\n          text: \"威胁事件关联分析\",\n          subtext: \"员工与异常活动类型关联\",\n          left: \"center\"\n        },\n        tooltip: {\n          formatter: function (params) {\n            if (params.dataType === \"node\") {\n              return `${params.data.name}<br/>关联活动数: ${params.data.value || \"N/A\"}`;\n            }\n            return params.name;\n          }\n        },\n        legend: [{\n          data: categories.map(function (a) {\n            return a.name;\n          }),\n          bottom: 10\n        }],\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [{\n          type: \"graph\",\n          layout: \"force\",\n          data: nodes,\n          links: links,\n          categories: categories,\n          roam: true,\n          label: {\n            show: true,\n            position: \"right\",\n            formatter: \"{b}\" // Show name\n          },\n          // symbolSize: 50, // Symbol size can be set per node or globally\n          edgeSymbol: [\"none\", \"arrow\"],\n          // No symbol for source, arrow for target\n          edgeSymbolSize: [4, 10],\n          force: {\n            repulsion: 150,\n            // Adjusted repulsion\n            edgeLength: [80, 120],\n            // Varied edge length\n            gravity: 0.1\n          },\n          lineStyle: {\n            opacity: 0.9,\n            width: 2,\n            curveness: 0\n          }\n        }]\n      };\n      this.threatRelationChart.setOption(option, true); // true to clear previous options\n    },\n    handleEventSelect(event) {\n      this.selectedEvent = event;\n      this.$nextTick(() => {\n        this.initEvidenceChart();\n      });\n    },\n    initEvidenceChart() {\n      if (this.evidenceChart) {\n        this.evidenceChart.dispose();\n      }\n      if (!this.selectedEvent) return;\n      const chartDom = document.getElementById(\"evidenceChart\");\n      if (chartDom) {\n        this.evidenceChart = this.$echarts.init(chartDom);\n        this.updateEvidenceChart();\n      } else {\n        console.error(\"Evidence chart DOM not found.\");\n      }\n    },\n    updateEvidenceChart() {\n      if (!this.evidenceChart || !this.selectedEvent || !this.selectedEvent.rawEventData) {\n        // Clear chart or show placeholder if no event or no raw data\n        if (this.evidenceChart) {\n          this.evidenceChart.setOption({\n            title: {\n              text: this.selectedEvent ? \"选择的事件缺少原始数据\" : \"未选择事件\",\n              left: \"center\",\n              top: \"center\"\n            },\n            series: [] // Clear series\n          });\n        }\n        return;\n      }\n      const eventType = this.selectedEvent.type;\n      const rawEvent = this.selectedEvent.rawEventData.rawEvent; // Assuming rawEventData contains the original rawEvent object\n      let option = {};\n      if (eventType === \"邮件敏感词\" && rawEvent && rawEvent.subject) {\n        // 为邮件敏感词显示主题和关键词\n        const keywordsFound = [];\n        // SENSITIVE_EMAIL_KEYWORDS is not directly available here,\n        // but we can infer from the description or rawEvent if it was stored.\n        // For now, just display the subject.\n        // A more advanced version could highlight keywords in the subject.\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `邮件主题: ${rawEvent.subject.substring(0, 100)}${rawEvent.subject.length > 100 ? \"...\" : \"\"}`,\n            left: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#555\"\n            }\n          },\n          // We could use a graphic element to display text if no chart is suitable\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `相关邮件主题与描述中提到的敏感词有关。\\n详细信息请查看事件描述。`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\"\n            }\n          },\n          series: []\n        };\n      } else if (eventType === \"非工作时间登录\" && this.selectedEvent.rawEventData) {\n        // 为非工作时间登录显示登录时间戳\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `登录时间: ${this.selectedEvent.rawEventData.timestamp}`,\n            left: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#555\"\n            }\n          },\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `该登录事件发生在非工作时段。\\n具体时间点: ${this.selectedEvent.rawEventData.timestamp}`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\"\n            }\n          },\n          series: []\n        };\n      } else {\n        // 其他事件类型或缺少具体信息\n        option = {\n          title: {\n            text: `事件证据 (类型: ${eventType})`,\n            subtext: \"此事件类型的详细证据展示待实现\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#888\"\n            }\n          },\n          series: []\n        };\n      }\n      this.evidenceChart.setOption(option, true);\n    },\n    getEventTypeTag(type) {\n      const typeMap = {\n        数据外发: \"danger\",\n        账户探测: \"warning\",\n        异常行为: \"warning\",\n        数据库异常: \"danger\",\n        可疑通信: \"danger\"\n      };\n      return typeMap[type] || \"info\";\n    },\n    getRiskLevelTag(level) {\n      const levelMap = {\n        高: \"danger\",\n        中: \"warning\",\n        低: \"info\"\n      };\n      return levelMap[level] || \"info\";\n    },\n    handleResize() {\n      this.threatRelationChart && this.threatRelationChart.resize();\n      this.evidenceChart && this.evidenceChart.resize();\n    }\n  }\n};","map":{"version":3,"names":["name","data","threatRelationChart","evidenceChart","selectedEvent","threatEvents","rawRecentAbnormalEvents","departmentAbnormalCountsData","employeeAbnormalActivitiesData","isLoading","mounted","loadThreatData","initThreatRelationChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","dispose","methods","$message","info","recentRes","deptRes","empRes","Promise","all","fetch","ok","Error","json","processThreatEvents","updateThreatRelationChart","success","error","console","message","length","map","event","index","id","type","date","timestamp","split","time","user","employeeId","description","level","detailDescription","JSON","stringify","rawEvent","rawEventData","chartDom","document","getElementById","$echarts","init","nodes","links","categories","itemStyle","color","Object","keys","setOption","title","text","left","top","series","employeeNodes","Map","activityTypeNodes","nodeCounter","empId","hasOwnProperty","call","has","push","category","symbolSize","value","draggable","set","activities","forEach","activity","activityType","replace","existingNodeIndex","get","source","target","option","subtext","tooltip","formatter","params","dataType","legend","a","bottom","animationDurationUpdate","animationEasingUpdate","layout","roam","label","show","position","edgeSymbol","edgeSymbolSize","force","repulsion","edgeLength","gravity","lineStyle","opacity","width","curveness","handleEventSelect","$nextTick","initEvidenceChart","updateEvidenceChart","eventType","subject","keywordsFound","substring","textStyle","fontSize","subtextStyle","graphic","style","textAlign","font","getEventTypeTag","typeMap","数据外发","账户探测","异常行为","数据库异常","可疑通信","getRiskLevelTag","levelMap","高","中","低","resize"],"sources":["src/views/Threat.vue"],"sourcesContent":["<template>\r\n  <div class=\"threat\">\r\n    <el-row>\r\n      <el-col :span=\"24\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span>威胁情报分析</span>\r\n            <el-tooltip\r\n              class=\"item\"\r\n              effect=\"dark\"\r\n              content=\"检测并分析可能存在的内部威胁事件，探究事件间的关联性\"\r\n              placement=\"top\"\r\n            >\r\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <p>\r\n            通过对多维数据的关联分析，我们发现了多起可疑行为并关联成威胁情报，这些情报可能表明有内部人员试图获取或泄露公司核心产品信息。\r\n          </p>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\r\n      <el-col :span=\"16\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span>威胁事件关联图</span>\r\n          </div>\r\n          <div\r\n            id=\"threatRelationChart\"\r\n            style=\"width: 100%; height: 600px\"\r\n          ></div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"8\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span>威胁事件列表</span>\r\n          </div>\r\n          <el-table\r\n            :data=\"threatEvents\"\r\n            style=\"width: 100%\"\r\n            max-height=\"550\"\r\n            @row-click=\"handleEventSelect\"\r\n          >\r\n            <el-table-column\r\n              prop=\"id\"\r\n              label=\"编号\"\r\n              width=\"60\"\r\n            ></el-table-column>\r\n            <el-table-column prop=\"type\" label=\"类型\" width=\"100\">\r\n              <template slot-scope=\"scope\">\r\n                <el-tag :type=\"getEventTypeTag(scope.row.type)\">{{\r\n                  scope.row.type\r\n                }}</el-tag>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column\r\n              prop=\"date\"\r\n              label=\"日期\"\r\n              width=\"100\"\r\n            ></el-table-column>\r\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\r\n            <el-table-column prop=\"level\" label=\"风险等级\" width=\"80\">\r\n              <template slot-scope=\"scope\">\r\n                <el-tag :type=\"getRiskLevelTag(scope.row.level)\">{{\r\n                  scope.row.level\r\n                }}</el-tag>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row style=\"margin-top: 20px\">\r\n      <el-col :span=\"24\">\r\n        <el-card class=\"box-card\" v-if=\"selectedEvent\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span>事件详情: {{ selectedEvent.description }}</span>\r\n          </div>\r\n          <el-row :gutter=\"20\">\r\n            <el-col :span=\"12\">\r\n              <h4>事件信息</h4>\r\n              <el-descriptions :column=\"1\" border>\r\n                <el-descriptions-item label=\"事件ID\">{{\r\n                  selectedEvent.id\r\n                }}</el-descriptions-item>\r\n                <el-descriptions-item label=\"类型\">{{\r\n                  selectedEvent.type\r\n                }}</el-descriptions-item>\r\n                <el-descriptions-item label=\"日期\">{{\r\n                  selectedEvent.date\r\n                }}</el-descriptions-item>\r\n                <el-descriptions-item label=\"时间\">{{\r\n                  selectedEvent.time\r\n                }}</el-descriptions-item>\r\n                <el-descriptions-item label=\"相关用户\">{{\r\n                  selectedEvent.user\r\n                }}</el-descriptions-item>\r\n                <el-descriptions-item label=\"风险等级\">\r\n                  <el-tag :type=\"getRiskLevelTag(selectedEvent.level)\">{{\r\n                    selectedEvent.level\r\n                  }}</el-tag>\r\n                </el-descriptions-item>\r\n                <el-descriptions-item label=\"详细描述\">{{\r\n                  selectedEvent.detailDescription\r\n                }}</el-descriptions-item>\r\n              </el-descriptions>\r\n            </el-col>\r\n            <el-col :span=\"12\">\r\n              <h4>相关证据</h4>\r\n              <div id=\"evidenceChart\" style=\"width: 100%; height: 300px\"></div>\r\n            </el-col>\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row style=\"margin-top: 20px\">\r\n      <el-col :span=\"24\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span>威胁情报综合分析</span>\r\n          </div>\r\n          <div class=\"analysis-content\">\r\n            <h3>主要威胁情报发现</h3>\r\n            <p>\r\n              通过对公司内部各种日志数据的综合分析，我们发现了以下几个主要的威胁情报：\r\n            </p>\r\n\r\n            <h4>1. 大量敏感文件访问与数据外发</h4>\r\n            <p>\r\n              研发2部的员工ID-1103在非常规工作时间（凌晨2:00-4:00）登录公司服务器，访问并下载了大量与新产品相关的文件，同时向外部邮箱发送了多封带有大附件的邮件。\r\n            </p>\r\n\r\n            <h4>2. 异常登录行为</h4>\r\n            <p>\r\n              员工ID-1152在11月10日至11月15日期间多次尝试登录其他研发人员的账户，成功率较低但存在成功案例，显示出明显的账户探测行为。\r\n            </p>\r\n\r\n            <h4>3. 反常规上班模式</h4>\r\n            <p>\r\n              员工ID-1388在11月5日至11月20日期间，连续多天出现深夜在办公室活动的记录，但第二天通常迟到或缺勤，与其历史工作模式存在显著差异。\r\n            </p>\r\n\r\n            <h4>4. 数据库异常查询</h4>\r\n            <p>\r\n              研发3部的员工ID-1307在11月8日至11月12日期间，对公司核心产品数据库进行了大量非常规查询，涉及表数量远超其工作所需。\r\n            </p>\r\n\r\n            <h4>5. 可疑外部通信</h4>\r\n            <p>\r\n              员工ID-1204在11月18日至11月25日期间，其工作站与多个未知IP地址建立了加密连接，流量模式表明可能存在数据外传。\r\n            </p>\r\n\r\n            <h3>威胁关联分析</h3>\r\n            <p>\r\n              这些异常事件并非相互独立，通过对时间、网络行为和邮件往来的分析，我们发现：\r\n            </p>\r\n            <ul>\r\n              <li>\r\n                员工ID-1103和员工ID-1204有频繁的邮件往来，且邮件内容多涉及新产品的技术细节\r\n              </li>\r\n              <li>\r\n                员工ID-1152与员工ID-1388在同一网段活动，且活动时间有明显的交错模式\r\n              </li>\r\n              <li>\r\n                在员工ID-1307进行异常数据库查询的同一时间段，员工ID-1103的外发邮件数量明显增加\r\n              </li>\r\n              <li>\r\n                所有涉事员工近期都曾访问过相同的外部技术论坛和几个特定IP地址\r\n              </li>\r\n            </ul>\r\n\r\n            <h3>分析方法说明</h3>\r\n            <p>本系统采用多维数据关联分析方法发现这些威胁情报：</p>\r\n            <ol>\r\n              <li>\r\n                通过员工打卡记录与登录时间的交叉分析，发现工作时间与系统活动不匹配的异常\r\n              </li>\r\n              <li>\r\n                使用聚类算法对邮件往来建立关系网络，识别出不寻常的沟通模式\r\n              </li>\r\n              <li>对网络流量进行时序分析，发现工作时间之外的异常流量峰值</li>\r\n              <li>分析登录日志中的失败模式，识别可能的账户探测行为</li>\r\n              <li>\r\n                利用关联规则挖掘算法，发现不同异常事件之间的时间和行为关联\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Threat\",\r\n  data() {\r\n    return {\r\n      threatRelationChart: null,\r\n      evidenceChart: null,\r\n      selectedEvent: null,\r\n      threatEvents: [],\r\n      rawRecentAbnormalEvents: [],\r\n      departmentAbnormalCountsData: [],\r\n      employeeAbnormalActivitiesData: {},\r\n      isLoading: false,\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadThreatData();\r\n    this.initThreatRelationChart();\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener(\"resize\", this.handleResize);\r\n    if (this.threatRelationChart) {\r\n      this.threatRelationChart.dispose();\r\n    }\r\n    if (this.evidenceChart) {\r\n      this.evidenceChart.dispose();\r\n    }\r\n  },\r\n  methods: {\r\n    async loadThreatData() {\r\n      this.isLoading = true;\r\n      this.$message.info(\"正在加载威胁情报数据...\");\r\n      try {\r\n        const [recentRes, deptRes, empRes] = await Promise.all([\r\n          fetch(\"/recent_abnormal_events.json\"),\r\n          fetch(\"/department_abnormal_counts.json\"),\r\n          fetch(\"/employee_abnormal_activities.json\"),\r\n        ]);\r\n\r\n        if (!recentRes.ok) throw new Error(\"加载最近异常事件失败\");\r\n        this.rawRecentAbnormalEvents = await recentRes.json();\r\n\r\n        if (!deptRes.ok) throw new Error(\"加载部门异常统计失败\");\r\n        this.departmentAbnormalCountsData = await deptRes.json();\r\n\r\n        if (!empRes.ok) throw new Error(\"加载员工异常活动失败\");\r\n        this.employeeAbnormalActivitiesData = await empRes.json();\r\n\r\n        this.processThreatEvents();\r\n        this.updateThreatRelationChart();\r\n\r\n        this.$message.success(\"威胁情报数据加载完成！\");\r\n      } catch (error) {\r\n        console.error(\"加载威胁数据失败:\", error);\r\n        this.$message.error(`加载威胁数据失败: ${error.message}`);\r\n        this.processThreatEvents();\r\n        this.updateThreatRelationChart();\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    processThreatEvents() {\r\n      if (\r\n        this.rawRecentAbnormalEvents &&\r\n        this.rawRecentAbnormalEvents.length > 0\r\n      ) {\r\n        this.threatEvents = this.rawRecentAbnormalEvents.map(\r\n          (event, index) => ({\r\n            id: index + 1,\r\n            type: event.type || \"未知类型\",\r\n            date: event.timestamp ? event.timestamp.split(\" \")[0] : \"未知日期\",\r\n            time: event.timestamp ? event.timestamp.split(\" \")[1] : \"未知时间\",\r\n            user: event.employeeId || \"未知用户\",\r\n            description: event.description || \"无描述\",\r\n            level: event.level || \"未知\",\r\n            detailDescription: `${\r\n              event.description\r\n            }. Raw event: ${JSON.stringify(event.rawEvent, null, 2)}`,\r\n            rawEventData: event,\r\n          })\r\n        );\r\n      } else {\r\n        this.threatEvents = [];\r\n      }\r\n    },\r\n    initThreatRelationChart() {\r\n      if (this.threatRelationChart) {\r\n        this.threatRelationChart.dispose();\r\n      }\r\n      const chartDom = document.getElementById(\"threatRelationChart\");\r\n      if (chartDom) {\r\n        this.threatRelationChart = this.$echarts.init(chartDom);\r\n        this.updateThreatRelationChart();\r\n      } else {\r\n        console.error(\"Threat relation chart DOM not found.\");\r\n      }\r\n    },\r\n    updateThreatRelationChart() {\r\n      if (!this.threatRelationChart) return;\r\n\r\n      let nodes = [];\r\n      let links = [];\r\n      const categories = [\r\n        { name: \"员工\", itemStyle: { color: \"#409EFF\" } }, // Category 0\r\n        { name: \"异常类型\", itemStyle: { color: \"#F56C6C\" } }, // Category 1\r\n        // Możemy dodać więcej kategorii w przyszłości\r\n      ];\r\n\r\n      if (\r\n        !this.employeeAbnormalActivitiesData ||\r\n        Object.keys(this.employeeAbnormalActivitiesData).length === 0\r\n      ) {\r\n        this.threatRelationChart.setOption({\r\n          title: {\r\n            text: \"暂无员工异常活动数据以生成关联图\",\r\n            left: \"center\",\r\n            top: \"center\",\r\n          },\r\n          series: [], // Ensure series is empty if no data\r\n        });\r\n        return;\r\n      }\r\n\r\n      const employeeNodes = new Map(); // Store employee nodes to avoid duplicates: employeeId -> nodeIndex\r\n      const activityTypeNodes = new Map(); // Store activity type nodes: typeName -> nodeIndex\r\n      let nodeCounter = 0;\r\n\r\n      for (const empId in this.employeeAbnormalActivitiesData) {\r\n        if (\r\n          Object.hasOwnProperty.call(this.employeeAbnormalActivitiesData, empId)\r\n        ) {\r\n          // Add employee node if not exists\r\n          if (!employeeNodes.has(empId)) {\r\n            nodes.push({\r\n              id: `emp_${empId}`,\r\n              name: `员工 ${empId}`,\r\n              category: 0, // Employee category\r\n              symbolSize: 35,\r\n              value: this.employeeAbnormalActivitiesData[empId].length, // Size by number of activities\r\n              draggable: true,\r\n            });\r\n            employeeNodes.set(empId, nodeCounter++);\r\n          }\r\n\r\n          const activities = this.employeeAbnormalActivitiesData[empId];\r\n          activities.forEach((activity) => {\r\n            const activityType = activity.type || \"未知类型\";\r\n            // Add activity type node if not exists\r\n            if (!activityTypeNodes.has(activityType)) {\r\n              nodes.push({\r\n                id: `type_${activityType.replace(/\\s+/g, \"_\")}`,\r\n                name: activityType,\r\n                category: 1, // Activity Type category\r\n                symbolSize: 25,\r\n                value: 1, // Initial value, can be incremented if multiple employees have this type\r\n                draggable: true,\r\n              });\r\n              activityTypeNodes.set(activityType, nodeCounter++);\r\n            } else {\r\n              // Increment value for existing activity type node if needed for sizing\r\n              const existingNodeIndex = activityTypeNodes.get(activityType);\r\n              if (nodes[existingNodeIndex]) nodes[existingNodeIndex].value++;\r\n            }\r\n\r\n            // Add link from employee to activity type\r\n            links.push({\r\n              source: `emp_${empId}`,\r\n              target: `type_${activityType.replace(/\\s+/g, \"_\")}`,\r\n              value: 1, // Can be used for line thickness if needed\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      // Fallback if no nodes were created (e.g. empty activities for all employees)\r\n      if (nodes.length === 0) {\r\n        this.threatRelationChart.setOption({\r\n          title: {\r\n            text: \"未从数据中提取出有效的关联节点\",\r\n            left: \"center\",\r\n            top: \"center\",\r\n          },\r\n          series: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"威胁事件关联分析\",\r\n          subtext: \"员工与异常活动类型关联\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          formatter: function (params) {\r\n            if (params.dataType === \"node\") {\r\n              return `${params.data.name}<br/>关联活动数: ${\r\n                params.data.value || \"N/A\"\r\n              }`;\r\n            }\r\n            return params.name;\r\n          },\r\n        },\r\n        legend: [\r\n          {\r\n            data: categories.map(function (a) {\r\n              return a.name;\r\n            }),\r\n            bottom: 10,\r\n          },\r\n        ],\r\n        animationDurationUpdate: 1500,\r\n        animationEasingUpdate: \"quinticInOut\",\r\n        series: [\r\n          {\r\n            type: \"graph\",\r\n            layout: \"force\",\r\n            data: nodes,\r\n            links: links,\r\n            categories: categories,\r\n            roam: true,\r\n            label: {\r\n              show: true,\r\n              position: \"right\",\r\n              formatter: \"{b}\", // Show name\r\n            },\r\n            // symbolSize: 50, // Symbol size can be set per node or globally\r\n            edgeSymbol: [\"none\", \"arrow\"], // No symbol for source, arrow for target\r\n            edgeSymbolSize: [4, 10],\r\n            force: {\r\n              repulsion: 150, // Adjusted repulsion\r\n              edgeLength: [80, 120], // Varied edge length\r\n              gravity: 0.1,\r\n            },\r\n            lineStyle: {\r\n              opacity: 0.9,\r\n              width: 2,\r\n              curveness: 0,\r\n            },\r\n          },\r\n        ],\r\n      };\r\n      this.threatRelationChart.setOption(option, true); // true to clear previous options\r\n    },\r\n    handleEventSelect(event) {\r\n      this.selectedEvent = event;\r\n      this.$nextTick(() => {\r\n        this.initEvidenceChart();\r\n      });\r\n    },\r\n    initEvidenceChart() {\r\n      if (this.evidenceChart) {\r\n        this.evidenceChart.dispose();\r\n      }\r\n      if (!this.selectedEvent) return;\r\n\r\n      const chartDom = document.getElementById(\"evidenceChart\");\r\n      if (chartDom) {\r\n        this.evidenceChart = this.$echarts.init(chartDom);\r\n        this.updateEvidenceChart();\r\n      } else {\r\n        console.error(\"Evidence chart DOM not found.\");\r\n      }\r\n    },\r\n    updateEvidenceChart() {\r\n      if (\r\n        !this.evidenceChart ||\r\n        !this.selectedEvent ||\r\n        !this.selectedEvent.rawEventData\r\n      ) {\r\n        // Clear chart or show placeholder if no event or no raw data\r\n        if (this.evidenceChart) {\r\n          this.evidenceChart.setOption({\r\n            title: {\r\n              text: this.selectedEvent\r\n                ? \"选择的事件缺少原始数据\"\r\n                : \"未选择事件\",\r\n              left: \"center\",\r\n              top: \"center\",\r\n            },\r\n            series: [], // Clear series\r\n          });\r\n        }\r\n        return;\r\n      }\r\n\r\n      const eventType = this.selectedEvent.type;\r\n      const rawEvent = this.selectedEvent.rawEventData.rawEvent; // Assuming rawEventData contains the original rawEvent object\r\n      let option = {};\r\n\r\n      if (eventType === \"邮件敏感词\" && rawEvent && rawEvent.subject) {\r\n        // 为邮件敏感词显示主题和关键词\r\n        const keywordsFound = [];\r\n        // SENSITIVE_EMAIL_KEYWORDS is not directly available here,\r\n        // but we can infer from the description or rawEvent if it was stored.\r\n        // For now, just display the subject.\r\n        // A more advanced version could highlight keywords in the subject.\r\n        option = {\r\n          title: {\r\n            text: `证据: ${eventType}`,\r\n            subtext: `邮件主题: ${rawEvent.subject.substring(0, 100)}${\r\n              rawEvent.subject.length > 100 ? \"...\" : \"\"\r\n            }`,\r\n            left: \"center\",\r\n            textStyle: { fontSize: 14 },\r\n            subtextStyle: { fontSize: 12, color: \"#555\" },\r\n          },\r\n          // We could use a graphic element to display text if no chart is suitable\r\n          graphic: {\r\n            type: \"text\",\r\n            left: \"center\",\r\n            top: \"middle\",\r\n            style: {\r\n              text: `相关邮件主题与描述中提到的敏感词有关。\\n详细信息请查看事件描述。`,\r\n              textAlign: \"center\",\r\n              font: \"14px Microsoft YaHei\",\r\n            },\r\n          },\r\n          series: [],\r\n        };\r\n      } else if (\r\n        eventType === \"非工作时间登录\" &&\r\n        this.selectedEvent.rawEventData\r\n      ) {\r\n        // 为非工作时间登录显示登录时间戳\r\n        option = {\r\n          title: {\r\n            text: `证据: ${eventType}`,\r\n            subtext: `登录时间: ${this.selectedEvent.rawEventData.timestamp}`,\r\n            left: \"center\",\r\n            textStyle: { fontSize: 14 },\r\n            subtextStyle: { fontSize: 12, color: \"#555\" },\r\n          },\r\n          graphic: {\r\n            type: \"text\",\r\n            left: \"center\",\r\n            top: \"middle\",\r\n            style: {\r\n              text: `该登录事件发生在非工作时段。\\n具体时间点: ${this.selectedEvent.rawEventData.timestamp}`,\r\n              textAlign: \"center\",\r\n              font: \"14px Microsoft YaHei\",\r\n            },\r\n          },\r\n          series: [],\r\n        };\r\n      } else {\r\n        // 其他事件类型或缺少具体信息\r\n        option = {\r\n          title: {\r\n            text: `事件证据 (类型: ${eventType})`,\r\n            subtext: \"此事件类型的详细证据展示待实现\",\r\n            left: \"center\",\r\n            top: \"center\",\r\n            textStyle: { fontSize: 14 },\r\n            subtextStyle: { fontSize: 12, color: \"#888\" },\r\n          },\r\n          series: [],\r\n        };\r\n      }\r\n      this.evidenceChart.setOption(option, true);\r\n    },\r\n    getEventTypeTag(type) {\r\n      const typeMap = {\r\n        数据外发: \"danger\",\r\n        账户探测: \"warning\",\r\n        异常行为: \"warning\",\r\n        数据库异常: \"danger\",\r\n        可疑通信: \"danger\",\r\n      };\r\n      return typeMap[type] || \"info\";\r\n    },\r\n    getRiskLevelTag(level) {\r\n      const levelMap = {\r\n        高: \"danger\",\r\n        中: \"warning\",\r\n        低: \"info\",\r\n      };\r\n      return levelMap[level] || \"info\";\r\n    },\r\n    handleResize() {\r\n      this.threatRelationChart && this.threatRelationChart.resize();\r\n      this.evidenceChart && this.evidenceChart.resize();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.box-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.analysis-content {\r\n  line-height: 1.6;\r\n  text-align: justify;\r\n}\r\n\r\n.analysis-content h3 {\r\n  margin-top: 20px;\r\n  color: #303133;\r\n  border-bottom: 1px solid #ebeef5;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.analysis-content h4 {\r\n  margin-top: 15px;\r\n  color: #409eff;\r\n}\r\n\r\n.analysis-content ul,\r\n.analysis-content ol {\r\n  padding-left: 20px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.analysis-content li {\r\n  margin-bottom: 5px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}