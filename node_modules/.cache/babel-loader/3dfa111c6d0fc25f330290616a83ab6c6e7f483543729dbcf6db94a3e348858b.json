{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getEmailData, getLoginData, getWeblogData, getCheckingData, aggregateNetworkFlowByHour, analyzeCheckingTime, calculateWorkHoursDistribution, analyzeWebsiteCategories } from \"@/utils/dataUtils\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"研发1部\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        }\n      },\n      workingHoursChart: null,\n      websiteTypeChart: null,\n      dateOptions: [{\n        value: \"2017-11-30\",\n        label: \"2017-11-30\"\n      }],\n      loading: false,\n      emailData: [],\n      loginData: [],\n      weblogData: [],\n      checkingData: [],\n      networkFlowData: null,\n      checkingTimeStats: null,\n      workHoursDistribution: null,\n      websiteCategories: null\n    };\n  },\n  mounted() {\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n    this.loadDatasets();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      this.updateCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      this.updateWebCategoryChart();\n    },\n    selectedDate() {\n      this.updateNetworkFlowChart();\n    }\n  },\n  methods: {\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n      this.workingHoursChart && this.workingHoursChart.resize();\n      this.websiteTypeChart && this.websiteTypeChart.resize();\n    },\n    initCheckTimeChart() {\n      this.checkTimeChart = this.$echarts.init(document.getElementById(\"checkTimeChart\"));\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      // 模拟不同部门的数据\n      let data = [];\n      if (this.selectedDepartment === \"研发1部\") {\n        data = [{\n          value: [0, 5, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 35, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 45, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 5, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 10, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 35, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 30, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 20, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else if (this.selectedDepartment === \"研发2部\") {\n        data = [{\n          value: [0, 8, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 30, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 50, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 2, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 5, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 30, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 40, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 20, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else if (this.selectedDepartment === \"财务部\") {\n        data = [{\n          value: [0, 5, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 70, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 15, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 0, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 15, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 70, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 15, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 0, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 0, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else {\n        // 其他部门的默认数据\n        data = [{\n          value: [0, 10, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 25, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 50, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 15, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 0, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 20, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 40, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 25, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 10, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      }\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          data: [\"上班打卡\", \"下班打卡\"],\n          axisLabel: {\n            interval: 0\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"人数\"\n        }],\n        series: [{\n          name: \"打卡时间\",\n          type: \"scatter\",\n          data: data,\n          symbolSize: function (val) {\n            return val[1] * 0.8;\n          },\n          itemStyle: {\n            color: function (params) {\n              // 上班打卡用蓝色，下班打卡用橙色\n              return params.data.value[0] === 0 ? \"#409EFF\" : \"#FF9800\";\n            }\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\"\n            }\n          }\n        }]\n      };\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      this.workHoursChart = this.$echarts.init(document.getElementById(\"workHoursChart\"));\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"<8小时\", \"8-9小时\", \"9-10小时\", \"10-11小时\", \"11-12小时\", \">12小时\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"人数占比(%)\"\n        },\n        series: [{\n          name: \"研发1部\",\n          type: \"bar\",\n          data: [5, 15, 30, 25, 15, 10]\n        }, {\n          name: \"研发2部\",\n          type: \"bar\",\n          data: [3, 12, 25, 30, 20, 10]\n        }, {\n          name: \"研发3部\",\n          type: \"bar\",\n          data: [4, 14, 28, 26, 18, 10]\n        }, {\n          name: \"人力资源部\",\n          type: \"bar\",\n          data: [0, 20, 40, 30, 10, 0]\n        }, {\n          name: \"财务部\",\n          type: \"bar\",\n          data: [0, 25, 45, 30, 0, 0]\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      this.webCategoryChart = this.$echarts.init(document.getElementById(\"webCategoryChart\"));\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      // 根据选择的时间范围提供不同的数据\n      let data = [];\n      if (this.webVisitTimeRange === \"workHours\") {\n        data = [{\n          value: 40,\n          name: \"工作相关网站\"\n        }, {\n          value: 20,\n          name: \"搜索引擎\"\n        }, {\n          value: 15,\n          name: \"技术社区\"\n        }, {\n          value: 10,\n          name: \"在线文档\"\n        }, {\n          value: 8,\n          name: \"新闻媒体\"\n        }, {\n          value: 5,\n          name: \"社交网站\"\n        }, {\n          value: 2,\n          name: \"娱乐网站\"\n        }];\n      } else if (this.webVisitTimeRange === \"afterHours\") {\n        data = [{\n          value: 15,\n          name: \"工作相关网站\"\n        }, {\n          value: 25,\n          name: \"搜索引擎\"\n        }, {\n          value: 10,\n          name: \"技术社区\"\n        }, {\n          value: 5,\n          name: \"在线文档\"\n        }, {\n          value: 15,\n          name: \"新闻媒体\"\n        }, {\n          value: 15,\n          name: \"社交网站\"\n        }, {\n          value: 15,\n          name: \"娱乐网站\"\n        }];\n      } else {\n        data = [{\n          value: 30,\n          name: \"工作相关网站\"\n        }, {\n          value: 22,\n          name: \"搜索引擎\"\n        }, {\n          value: 13,\n          name: \"技术社区\"\n        }, {\n          value: 8,\n          name: \"在线文档\"\n        }, {\n          value: 10,\n          name: \"新闻媒体\"\n        }, {\n          value: 9,\n          name: \"社交网站\"\n        }, {\n          value: 8,\n          name: \"娱乐网站\"\n        }];\n      }\n      const option = {\n        title: {\n          text: \"网页访问类别分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: data.map(item => item.name)\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: [\"50%\", \"70%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"18\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: data\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      this.serverAccessChart = this.$echarts.init(document.getElementById(\"serverAccessChart\"));\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"SSH登录\", \"FTP传输\", \"MySQL访问\", \"MongoDB访问\", \"PostgreSQL访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"每日平均访问次数\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        series: [{\n          name: \"SSH登录\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [120, 132, 101, 34, 30]\n        }, {\n          name: \"FTP传输\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [220, 182, 191, 34, 29]\n        }, {\n          name: \"MySQL访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [150, 232, 201, 54, 190]\n        }, {\n          name: \"MongoDB访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [98, 77, 101, 12, 15]\n        }, {\n          name: \"PostgreSQL访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [80, 102, 90, 20, 30]\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      this.networkFlowChart = this.$echarts.init(document.getElementById(\"networkFlowChart\"));\n      this.updateNetworkFlowChart();\n    },\n    updateNetworkFlowChart() {\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\n\n      // 模拟从数据集获取数据\n      const date = this.selectedDate || \"2017-11-30\";\n      const dateFolder = date.replace(/-/g, \"-\");\n\n      // 图表标题\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\n\n      // 模拟24小时时间点\n      const hours = Array.from(Array(24).keys()).map(item => item < 10 ? `0${item}:00` : `${item}:00`);\n\n      // 模拟从ITD-2018数据集中读取的数据\n      // 在实际应用中，这应该是从CSV文件解析得到的\n      let emailData = [];\n      let webData = [];\n      let databaseData = [];\n\n      // 基于日期的不同生成模拟数据\n      if (date === \"2017-11-30\") {\n        // 根据email.csv的数据模式生成\n        emailData = [5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58, 40, 35, 25, 18, 12, 8];\n        // 根据weblog.csv的数据模式生成\n        webData = [10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220, 175, 120, 80, 45, 30, 20, 15, 12];\n        // 根据login.csv和tcpLog.csv的数据模式生成\n        databaseData = [2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35, 25, 15, 10, 5, 3];\n      } else {\n        // 其他日期的模拟数据\n        emailData = [2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45, 30, 25, 20, 15, 10, 5];\n        webData = [8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180, 155, 100, 65, 35, 25, 15, 10, 8];\n        databaseData = [1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30, 20, 10, 8, 3, 2];\n      }\n\n      // 工作时间和非工作时间的标记区域\n      const markArea = [[{\n        name: \"非工作时间\",\n        xAxis: \"00:00\"\n      }, {\n        xAxis: \"09:00\"\n      }], [{\n        name: \"非工作时间\",\n        xAxis: \"18:00\"\n      }, {\n        xAxis: \"23:59\"\n      }]];\n\n      // 异常点标记\n      const markPoints = [];\n      // 在日期为2017-11-30时标记异常点\n      if (date === \"2017-11-30\") {\n        // 基于email.csv中的异常模式\n        markPoints.push({\n          name: \"可疑邮件外发\",\n          value: \"员工1103\",\n          xAxis: 3,\n          yAxis: 24,\n          symbolSize: 40\n        });\n\n        // 基于weblog.csv中的异常访问\n        markPoints.push({\n          name: \"可疑网站访问\",\n          value: \"员工1204\",\n          xAxis: 21,\n          yAxis: 20,\n          symbolSize: 40\n        });\n      }\n      const option = {\n        title: {\n          text: title,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            animation: false,\n            label: {\n              backgroundColor: \"#505765\"\n            }\n          }\n        },\n        legend: {\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: hours,\n          boundaryGap: false,\n          splitLine: {\n            show: true\n          },\n          axisLine: {\n            onZero: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量(次数)\",\n          splitLine: {\n            show: true\n          }\n        },\n        dataZoom: [{\n          type: \"inside\",\n          start: 0,\n          end: 100\n        }, {\n          start: 0,\n          end: 100\n        }],\n        series: [{\n          name: \"邮件流量\",\n          type: \"line\",\n          data: emailData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑邮件外发\")\n          },\n          markArea: {\n            data: markArea,\n            itemStyle: {\n              color: \"rgba(255, 173, 177, 0.2)\"\n            }\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"网页访问\",\n          type: \"line\",\n          data: webData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑网站访问\")\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"数据库访问\",\n          type: \"line\",\n          data: databaseData,\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }]\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      this.emailFrequencyChart = this.$echarts.init(document.getElementById(\"emailFrequencyChart\"));\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\"\n        },\n        series: [{\n          name: \"发送邮件\",\n          type: \"bar\",\n          data: [32, 38, 30, 25, 22]\n        }, {\n          name: \"接收邮件\",\n          type: \"bar\",\n          data: [45, 50, 42, 38, 30]\n        }]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      this.loginSuccessChart = this.$echarts.init(document.getElementById(\"loginSuccessChart\"));\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\"\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\"\n        },\n        series: [{\n          name: \"登录成功率\",\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: [98.5, 97.2, 98.1, 99.2, 96.8],\n          itemStyle: {\n            color: function (params) {\n              // 根据值的大小定义不同的颜色\n              if (params.value > 98) {\n                return \"#67C23A\"; // 高成功率为绿色\n              } else if (params.value > 97) {\n                return \"#E6A23C\"; // 中等成功率为黄色\n              } else {\n                return \"#F56C6C\"; // 低成功率为红色\n              }\n            }\n          }\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      this.tcpProtocolChart = this.$echarts.init(document.getElementById(\"tcpProtocolChart\"));\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\"HTTP/HTTPS\", \"SSH/SFTP\", \"FTP\", \"SMTP\", \"MySQL\", \"MongoDB\", \"PostgreSQL\", \"其他\"]\n        },\n        series: [{\n          name: \"协议使用\",\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: [{\n            value: 45,\n            name: \"HTTP/HTTPS\"\n          }, {\n            value: 15,\n            name: \"SSH/SFTP\"\n          }, {\n            value: 10,\n            name: \"FTP\"\n          }, {\n            value: 8,\n            name: \"SMTP\"\n          }, {\n            value: 7,\n            name: \"MySQL\"\n          }, {\n            value: 6,\n            name: \"MongoDB\"\n          }, {\n            value: 5,\n            name: \"PostgreSQL\"\n          }, {\n            value: 4,\n            name: \"其他\"\n          }],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    },\n    async loadDatasets() {\n      this.loading = true;\n      try {\n        // 并行加载所有数据集\n        [this.emailData, this.loginData, this.weblogData, this.checkingData] = await Promise.all([getEmailData(this.selectedDate), getLoginData(this.selectedDate), getWeblogData(this.selectedDate), getCheckingData(this.selectedDate)]);\n\n        // 处理数据\n        this.processData();\n\n        // 初始化图表\n        this.$nextTick(() => {\n          this.initNetworkFlowChart();\n          this.initWorkingHoursChart();\n          this.initWebsiteTypeChart();\n        });\n      } catch (error) {\n        console.error(\"加载数据失败:\", error);\n        this.$notify.error({\n          title: \"数据加载错误\",\n          message: \"无法加载ITD-2018数据集，请检查文件路径\"\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n    processData() {\n      // 处理网络流量数据\n      this.networkFlowData = aggregateNetworkFlowByHour(this.emailData, this.weblogData, this.loginData);\n\n      // 处理打卡时间统计\n      this.checkingTimeStats = analyzeCheckingTime(this.checkingData);\n\n      // 处理工作时长分布\n      this.workHoursDistribution = calculateWorkHoursDistribution(this.checkingData);\n\n      // 处理网站访问类别\n      this.websiteCategories = analyzeWebsiteCategories(this.weblogData);\n    },\n    handleDateChange() {\n      this.loadDatasets();\n    },\n    initWorkingHoursChart() {\n      this.workingHoursChart = this.$echarts.init(document.getElementById(\"workingHoursChart\"));\n      const {\n        checkinStats,\n        checkoutStats\n      } = this.checkingTimeStats;\n      const option = {\n        title: {\n          text: \"工作时间分析\",\n          subtext: `基于${this.selectedDate}的打卡数据`,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"上班打卡\", \"下班打卡\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"提前\", \"正常\", \"延迟\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"人数\"\n        },\n        series: [{\n          name: \"上班打卡\",\n          type: \"bar\",\n          barWidth: \"30%\",\n          label: {\n            show: true,\n            position: \"top\"\n          },\n          data: [{\n            value: checkinStats.before_8,\n            itemStyle: {\n              color: \"#91cc75\"\n            },\n            name: \"8点前\"\n          }, {\n            value: checkinStats[\"8_to_9\"],\n            itemStyle: {\n              color: \"#5470c6\"\n            },\n            name: \"8-9点\"\n          }, {\n            value: checkinStats.after_9,\n            itemStyle: {\n              color: \"#ee6666\"\n            },\n            name: \"9点后\"\n          }]\n        }, {\n          name: \"下班打卡\",\n          type: \"bar\",\n          barWidth: \"30%\",\n          label: {\n            show: true,\n            position: \"top\"\n          },\n          data: [{\n            value: checkoutStats.before_18,\n            itemStyle: {\n              color: \"#ee6666\"\n            },\n            name: \"18点前\"\n          }, {\n            value: checkoutStats[\"18_to_20\"],\n            itemStyle: {\n              color: \"#5470c6\"\n            },\n            name: \"18-20点\"\n          }, {\n            value: checkoutStats.after_20,\n            itemStyle: {\n              color: \"#91cc75\"\n            },\n            name: \"20点后\"\n          }]\n        }]\n      };\n      this.workingHoursChart.setOption(option);\n\n      // 第二个图表：工作时长分布\n      const workHoursChart = this.$echarts.init(document.getElementById(\"workHoursDistributionChart\"));\n      const distribution = this.workHoursDistribution;\n      const distributionOption = {\n        title: {\n          text: \"工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}: {c} ({d}%)\"\n        },\n        series: [{\n          name: \"工作时长\",\n          type: \"pie\",\n          radius: [\"40%\", \"70%\"],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: \"#fff\",\n            borderWidth: 2\n          },\n          label: {\n            show: true,\n            formatter: \"{b}: {c}人\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: 14,\n              fontWeight: \"bold\"\n            }\n          },\n          data: [{\n            value: distribution.less_than_8,\n            name: \"少于8小时\",\n            itemStyle: {\n              color: \"#ee6666\"\n            }\n          }, {\n            value: distribution[\"8_to_9\"],\n            name: \"8-9小时\",\n            itemStyle: {\n              color: \"#5470c6\"\n            }\n          }, {\n            value: distribution[\"9_to_10\"],\n            name: \"9-10小时\",\n            itemStyle: {\n              color: \"#91cc75\"\n            }\n          }, {\n            value: distribution[\"10_to_11\"],\n            name: \"10-11小时\",\n            itemStyle: {\n              color: \"#fac858\"\n            }\n          }, {\n            value: distribution[\"11_to_12\"],\n            name: \"11-12小时\",\n            itemStyle: {\n              color: \"#73c0de\"\n            }\n          }, {\n            value: distribution.more_than_12,\n            name: \"超过12小时\",\n            itemStyle: {\n              color: \"#3ba272\"\n            }\n          }]\n        }]\n      };\n      workHoursChart.setOption(distributionOption);\n    },\n    initWebsiteTypeChart() {\n      this.websiteTypeChart = this.$echarts.init(document.getElementById(\"websiteTypeChart\"));\n      const categories = this.websiteCategories;\n      const categoryData = Object.keys(categories).map(key => ({\n        name: key,\n        value: categories[key]\n      }));\n      const option = {\n        title: {\n          text: \"网站访问类别统计\",\n          subtext: `基于${this.selectedDate}的网页访问数据`,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}: {c} ({d}%)\"\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: \"60%\",\n          center: [\"50%\", \"50%\"],\n          data: categoryData,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          },\n          label: {\n            formatter: \"{b}: {c}次\"\n          }\n        }]\n      };\n      this.websiteTypeChart.setOption(option);\n\n      // 初始化工作时间vs非工作时间访问对比\n      const workHoursComparison = this.$echarts.init(document.getElementById(\"workHoursComparisonChart\"));\n      const workTimeCategories = analyzeWebsiteCategories(this.weblogData, \"workHours\");\n      const afterHoursCategories = analyzeWebsiteCategories(this.weblogData, \"afterHours\");\n      const categoryNames = Object.keys(workTimeCategories);\n      const workTimeData = categoryNames.map(key => workTimeCategories[key]);\n      const afterHoursData = categoryNames.map(key => afterHoursCategories[key]);\n      const comparisonOption = {\n        title: {\n          text: \"工作时间vs非工作时间网站访问对比\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"工作时间\", \"非工作时间\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"访问次数\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: categoryNames,\n          axisLabel: {\n            interval: 0,\n            rotate: 30\n          }\n        },\n        series: [{\n          name: \"工作时间\",\n          type: \"bar\",\n          data: workTimeData\n        }, {\n          name: \"非工作时间\",\n          type: \"bar\",\n          data: afterHoursData\n        }]\n      };\n      workHoursComparison.setOption(comparisonOption);\n    }\n  }\n};","map":{"version":3,"names":["getEmailData","getLoginData","getWeblogData","getCheckingData","aggregateNetworkFlowByHour","analyzeCheckingTime","calculateWorkHoursDistribution","analyzeWebsiteCategories","name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","departments","pickerOptions","disabledDate","time","start","Date","end","getTime","workingHoursChart","websiteTypeChart","dateOptions","value","label","loading","emailData","loginData","weblogData","checkingData","networkFlowData","checkingTimeStats","workHoursDistribution","websiteCategories","mounted","initCheckTimeChart","initWorkHoursChart","initWebCategoryChart","initServerAccessChart","initNetworkFlowChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","loadDatasets","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","updateCheckTimeChart","updateWebCategoryChart","updateNetworkFlowChart","methods","resize","$echarts","init","document","getElementById","option","title","text","left","tooltip","trigger","formatter","params","grid","right","bottom","top","containLabel","xAxis","type","axisLabel","interval","yAxis","series","symbolSize","val","itemStyle","color","emphasis","shadowBlur","shadowColor","setOption","axisPointer","legend","orient","map","item","radius","avoidLabelOverlap","show","position","fontSize","fontWeight","labelLine","stack","focus","date","dateFolder","replace","hours","Array","from","keys","webData","databaseData","markArea","markPoints","push","animation","backgroundColor","boundaryGap","splitLine","axisLine","onZero","dataZoom","markPoint","filter","p","lineStyle","width","shadowOffsetY","smooth","min","max","barWidth","center","shadowOffsetX","Promise","all","processData","$nextTick","initWorkingHoursChart","initWebsiteTypeChart","error","console","$notify","message","handleDateChange","checkinStats","checkoutStats","subtext","before_8","after_9","before_18","after_20","distribution","distributionOption","borderRadius","borderColor","borderWidth","less_than_8","more_than_12","categories","categoryData","Object","key","workHoursComparison","workTimeCategories","afterHoursCategories","categoryNames","workTimeData","afterHoursData","comparisonOption","rotate"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\r\n  <div class=\"behavior-view\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span class=\"page-title\">员工行为分析</span>\r\n        <el-select\r\n          v-model=\"selectedDate\"\r\n          placeholder=\"选择日期\"\r\n          style=\"float: right; width: 150px\"\r\n          @change=\"handleDateChange\"\r\n        >\r\n          <el-option\r\n            v-for=\"item in dateOptions\"\r\n            :key=\"item.value\"\r\n            :label=\"item.label\"\r\n            :value=\"item.value\"\r\n          >\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n\r\n      <div class=\"data-loading\" v-if=\"loading\">\r\n        <el-spinner type=\"bounce\" color=\"#1E5EFF\" :size=\"60\"></el-spinner>\r\n        <p>正在加载数据，请稍候...</p>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"24\">\r\n            <h3 class=\"section-title\">\r\n              <i class=\"el-icon-s-data\"></i> 网络流量时序分析\r\n            </h3>\r\n            <div id=\"networkFlowChart\" class=\"chart-container\"></div>\r\n          </el-col>\r\n        </el-row>\r\n\r\n        <el-divider></el-divider>\r\n\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n            <h3 class=\"section-title\">\r\n              <i class=\"el-icon-time\"></i> 工作时间分布\r\n            </h3>\r\n            <div id=\"workingHoursChart\" class=\"chart-container\"></div>\r\n          </el-col>\r\n          <el-col :span=\"12\">\r\n            <h3 class=\"section-title\">\r\n              <i class=\"el-icon-pie-chart\"></i> 工作时长统计\r\n            </h3>\r\n            <div id=\"workHoursDistributionChart\" class=\"chart-container\"></div>\r\n          </el-col>\r\n        </el-row>\r\n\r\n        <el-divider></el-divider>\r\n\r\n        <el-row :gutter=\"20\">\r\n          <el-col :span=\"12\">\r\n            <h3 class=\"section-title\">\r\n              <i class=\"el-icon-s-platform\"></i> 网站访问类别\r\n            </h3>\r\n            <div id=\"websiteTypeChart\" class=\"chart-container\"></div>\r\n          </el-col>\r\n          <el-col :span=\"12\">\r\n            <h3 class=\"section-title\">\r\n              <i class=\"el-icon-s-opportunity\"></i> 工作时段访问对比\r\n            </h3>\r\n            <div id=\"workHoursComparisonChart\" class=\"chart-container\"></div>\r\n          </el-col>\r\n        </el-row>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getEmailData,\r\n  getLoginData,\r\n  getWeblogData,\r\n  getCheckingData,\r\n  aggregateNetworkFlowByHour,\r\n  analyzeCheckingTime,\r\n  calculateWorkHoursDistribution,\r\n  analyzeWebsiteCategories,\r\n} from \"@/utils/dataUtils\";\r\n\r\nexport default {\r\n  name: \"Behavior\",\r\n  data() {\r\n    return {\r\n      checkTimeChart: null,\r\n      workHoursChart: null,\r\n      webCategoryChart: null,\r\n      serverAccessChart: null,\r\n      networkFlowChart: null,\r\n      emailFrequencyChart: null,\r\n      loginSuccessChart: null,\r\n      tcpProtocolChart: null,\r\n      selectedDepartment: \"研发1部\",\r\n      webVisitTimeRange: \"workHours\",\r\n      selectedDate: \"2017-11-01\",\r\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\r\n      pickerOptions: {\r\n        disabledDate(time) {\r\n          // 只允许选择2017年11月的日期\r\n          const start = new Date(\"2017-11-01\");\r\n          const end = new Date(\"2017-11-30\");\r\n          return time.getTime() < start || time.getTime() > end;\r\n        },\r\n      },\r\n      workingHoursChart: null,\r\n      websiteTypeChart: null,\r\n      dateOptions: [\r\n        {\r\n          value: \"2017-11-30\",\r\n          label: \"2017-11-30\",\r\n        },\r\n      ],\r\n      loading: false,\r\n      emailData: [],\r\n      loginData: [],\r\n      weblogData: [],\r\n      checkingData: [],\r\n      networkFlowData: null,\r\n      checkingTimeStats: null,\r\n      workHoursDistribution: null,\r\n      websiteCategories: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initCheckTimeChart();\r\n    this.initWorkHoursChart();\r\n    this.initWebCategoryChart();\r\n    this.initServerAccessChart();\r\n    this.initNetworkFlowChart();\r\n    this.initEmailFrequencyChart();\r\n    this.initLoginSuccessChart();\r\n    this.initTcpProtocolChart();\r\n    this.loadDatasets();\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener(\"resize\", this.handleResize);\r\n  },\r\n  watch: {\r\n    selectedDepartment() {\r\n      this.updateCheckTimeChart();\r\n    },\r\n    webVisitTimeRange() {\r\n      this.updateWebCategoryChart();\r\n    },\r\n    selectedDate() {\r\n      this.updateNetworkFlowChart();\r\n    },\r\n  },\r\n  methods: {\r\n    handleResize() {\r\n      this.checkTimeChart && this.checkTimeChart.resize();\r\n      this.workHoursChart && this.workHoursChart.resize();\r\n      this.webCategoryChart && this.webCategoryChart.resize();\r\n      this.serverAccessChart && this.serverAccessChart.resize();\r\n      this.networkFlowChart && this.networkFlowChart.resize();\r\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\r\n      this.loginSuccessChart && this.loginSuccessChart.resize();\r\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\r\n      this.workingHoursChart && this.workingHoursChart.resize();\r\n      this.websiteTypeChart && this.websiteTypeChart.resize();\r\n    },\r\n    initCheckTimeChart() {\r\n      this.checkTimeChart = this.$echarts.init(\r\n        document.getElementById(\"checkTimeChart\")\r\n      );\r\n      this.updateCheckTimeChart();\r\n    },\r\n    updateCheckTimeChart() {\r\n      // 模拟不同部门的数据\r\n      let data = [];\r\n      if (this.selectedDepartment === \"研发1部\") {\r\n        data = [\r\n          { value: [0, 5, \"7:00-7:30\"], name: \"上班打卡\" },\r\n          { value: [0, 35, \"7:30-8:00\"], name: \"上班打卡\" },\r\n          { value: [0, 45, \"8:00-8:30\"], name: \"上班打卡\" },\r\n          { value: [0, 10, \"8:30-9:00\"], name: \"上班打卡\" },\r\n          { value: [0, 5, \"9:00以后\"], name: \"上班打卡\" },\r\n          { value: [1, 10, \"17:00-18:00\"], name: \"下班打卡\" },\r\n          { value: [1, 35, \"18:00-19:00\"], name: \"下班打卡\" },\r\n          { value: [1, 30, \"19:00-20:00\"], name: \"下班打卡\" },\r\n          { value: [1, 20, \"20:00-21:00\"], name: \"下班打卡\" },\r\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\r\n        ];\r\n      } else if (this.selectedDepartment === \"研发2部\") {\r\n        data = [\r\n          { value: [0, 8, \"7:00-7:30\"], name: \"上班打卡\" },\r\n          { value: [0, 30, \"7:30-8:00\"], name: \"上班打卡\" },\r\n          { value: [0, 50, \"8:00-8:30\"], name: \"上班打卡\" },\r\n          { value: [0, 10, \"8:30-9:00\"], name: \"上班打卡\" },\r\n          { value: [0, 2, \"9:00以后\"], name: \"上班打卡\" },\r\n          { value: [1, 5, \"17:00-18:00\"], name: \"下班打卡\" },\r\n          { value: [1, 30, \"18:00-19:00\"], name: \"下班打卡\" },\r\n          { value: [1, 40, \"19:00-20:00\"], name: \"下班打卡\" },\r\n          { value: [1, 20, \"20:00-21:00\"], name: \"下班打卡\" },\r\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\r\n        ];\r\n      } else if (this.selectedDepartment === \"财务部\") {\r\n        data = [\r\n          { value: [0, 5, \"7:00-7:30\"], name: \"上班打卡\" },\r\n          { value: [0, 10, \"7:30-8:00\"], name: \"上班打卡\" },\r\n          { value: [0, 70, \"8:00-8:30\"], name: \"上班打卡\" },\r\n          { value: [0, 15, \"8:30-9:00\"], name: \"上班打卡\" },\r\n          { value: [0, 0, \"9:00以后\"], name: \"上班打卡\" },\r\n          { value: [1, 15, \"17:00-18:00\"], name: \"下班打卡\" },\r\n          { value: [1, 70, \"18:00-19:00\"], name: \"下班打卡\" },\r\n          { value: [1, 15, \"19:00-20:00\"], name: \"下班打卡\" },\r\n          { value: [1, 0, \"20:00-21:00\"], name: \"下班打卡\" },\r\n          { value: [1, 0, \"21:00以后\"], name: \"下班打卡\" },\r\n        ];\r\n      } else {\r\n        // 其他部门的默认数据\r\n        data = [\r\n          { value: [0, 10, \"7:00-7:30\"], name: \"上班打卡\" },\r\n          { value: [0, 25, \"7:30-8:00\"], name: \"上班打卡\" },\r\n          { value: [0, 50, \"8:00-8:30\"], name: \"上班打卡\" },\r\n          { value: [0, 15, \"8:30-9:00\"], name: \"上班打卡\" },\r\n          { value: [0, 0, \"9:00以后\"], name: \"上班打卡\" },\r\n          { value: [1, 20, \"17:00-18:00\"], name: \"下班打卡\" },\r\n          { value: [1, 40, \"18:00-19:00\"], name: \"下班打卡\" },\r\n          { value: [1, 25, \"19:00-20:00\"], name: \"下班打卡\" },\r\n          { value: [1, 10, \"20:00-21:00\"], name: \"下班打卡\" },\r\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\r\n        ];\r\n      }\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"员工上下班时间分布\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: function (params) {\r\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\r\n          },\r\n        },\r\n        grid: {\r\n          left: 10,\r\n          right: 10,\r\n          bottom: 30,\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            data: [\"上班打卡\", \"下班打卡\"],\r\n            axisLabel: {\r\n              interval: 0,\r\n            },\r\n          },\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: \"value\",\r\n            name: \"人数\",\r\n          },\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"打卡时间\",\r\n            type: \"scatter\",\r\n            data: data,\r\n            symbolSize: function (val) {\r\n              return val[1] * 0.8;\r\n            },\r\n            itemStyle: {\r\n              color: function (params) {\r\n                // 上班打卡用蓝色，下班打卡用橙色\r\n                return params.data.value[0] === 0 ? \"#409EFF\" : \"#FF9800\";\r\n              },\r\n            },\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowColor: \"rgba(0, 0, 0, 0.3)\",\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.checkTimeChart.setOption(option);\r\n    },\r\n    initWorkHoursChart() {\r\n      this.workHoursChart = this.$echarts.init(\r\n        document.getElementById(\"workHoursChart\")\r\n      );\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"员工工作时长分布\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\r\n          top: 30,\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: [\r\n            \"<8小时\",\r\n            \"8-9小时\",\r\n            \"9-10小时\",\r\n            \"10-11小时\",\r\n            \"11-12小时\",\r\n            \">12小时\",\r\n          ],\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          name: \"人数占比(%)\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"研发1部\",\r\n            type: \"bar\",\r\n            data: [5, 15, 30, 25, 15, 10],\r\n          },\r\n          {\r\n            name: \"研发2部\",\r\n            type: \"bar\",\r\n            data: [3, 12, 25, 30, 20, 10],\r\n          },\r\n          {\r\n            name: \"研发3部\",\r\n            type: \"bar\",\r\n            data: [4, 14, 28, 26, 18, 10],\r\n          },\r\n          {\r\n            name: \"人力资源部\",\r\n            type: \"bar\",\r\n            data: [0, 20, 40, 30, 10, 0],\r\n          },\r\n          {\r\n            name: \"财务部\",\r\n            type: \"bar\",\r\n            data: [0, 25, 45, 30, 0, 0],\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.workHoursChart.setOption(option);\r\n    },\r\n    initWebCategoryChart() {\r\n      this.webCategoryChart = this.$echarts.init(\r\n        document.getElementById(\"webCategoryChart\")\r\n      );\r\n      this.updateWebCategoryChart();\r\n    },\r\n    updateWebCategoryChart() {\r\n      // 根据选择的时间范围提供不同的数据\r\n      let data = [];\r\n      if (this.webVisitTimeRange === \"workHours\") {\r\n        data = [\r\n          { value: 40, name: \"工作相关网站\" },\r\n          { value: 20, name: \"搜索引擎\" },\r\n          { value: 15, name: \"技术社区\" },\r\n          { value: 10, name: \"在线文档\" },\r\n          { value: 8, name: \"新闻媒体\" },\r\n          { value: 5, name: \"社交网站\" },\r\n          { value: 2, name: \"娱乐网站\" },\r\n        ];\r\n      } else if (this.webVisitTimeRange === \"afterHours\") {\r\n        data = [\r\n          { value: 15, name: \"工作相关网站\" },\r\n          { value: 25, name: \"搜索引擎\" },\r\n          { value: 10, name: \"技术社区\" },\r\n          { value: 5, name: \"在线文档\" },\r\n          { value: 15, name: \"新闻媒体\" },\r\n          { value: 15, name: \"社交网站\" },\r\n          { value: 15, name: \"娱乐网站\" },\r\n        ];\r\n      } else {\r\n        data = [\r\n          { value: 30, name: \"工作相关网站\" },\r\n          { value: 22, name: \"搜索引擎\" },\r\n          { value: 13, name: \"技术社区\" },\r\n          { value: 8, name: \"在线文档\" },\r\n          { value: 10, name: \"新闻媒体\" },\r\n          { value: 9, name: \"社交网站\" },\r\n          { value: 8, name: \"娱乐网站\" },\r\n        ];\r\n      }\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"网页访问类别分布\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\r\n        },\r\n        legend: {\r\n          orient: \"vertical\",\r\n          left: 10,\r\n          top: 30,\r\n          data: data.map((item) => item.name),\r\n        },\r\n        series: [\r\n          {\r\n            name: \"访问类别\",\r\n            type: \"pie\",\r\n            radius: [\"50%\", \"70%\"],\r\n            avoidLabelOverlap: false,\r\n            label: {\r\n              show: false,\r\n              position: \"center\",\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: \"18\",\r\n                fontWeight: \"bold\",\r\n              },\r\n            },\r\n            labelLine: {\r\n              show: false,\r\n            },\r\n            data: data,\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.webCategoryChart.setOption(option);\r\n    },\r\n    initServerAccessChart() {\r\n      this.serverAccessChart = this.$echarts.init(\r\n        document.getElementById(\"serverAccessChart\")\r\n      );\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"服务器/数据库访问频率\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\r\n            \"SSH登录\",\r\n            \"FTP传输\",\r\n            \"MySQL访问\",\r\n            \"MongoDB访问\",\r\n            \"PostgreSQL访问\",\r\n          ],\r\n          top: 30,\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"value\",\r\n          name: \"每日平均访问次数\",\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\r\n        },\r\n        series: [\r\n          {\r\n            name: \"SSH登录\",\r\n            type: \"bar\",\r\n            stack: \"总量\",\r\n            emphasis: {\r\n              focus: \"series\",\r\n            },\r\n            data: [120, 132, 101, 34, 30],\r\n          },\r\n          {\r\n            name: \"FTP传输\",\r\n            type: \"bar\",\r\n            stack: \"总量\",\r\n            emphasis: {\r\n              focus: \"series\",\r\n            },\r\n            data: [220, 182, 191, 34, 29],\r\n          },\r\n          {\r\n            name: \"MySQL访问\",\r\n            type: \"bar\",\r\n            stack: \"总量\",\r\n            emphasis: {\r\n              focus: \"series\",\r\n            },\r\n            data: [150, 232, 201, 54, 190],\r\n          },\r\n          {\r\n            name: \"MongoDB访问\",\r\n            type: \"bar\",\r\n            stack: \"总量\",\r\n            emphasis: {\r\n              focus: \"series\",\r\n            },\r\n            data: [98, 77, 101, 12, 15],\r\n          },\r\n          {\r\n            name: \"PostgreSQL访问\",\r\n            type: \"bar\",\r\n            stack: \"总量\",\r\n            emphasis: {\r\n              focus: \"series\",\r\n            },\r\n            data: [80, 102, 90, 20, 30],\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.serverAccessChart.setOption(option);\r\n    },\r\n    initNetworkFlowChart() {\r\n      this.networkFlowChart = this.$echarts.init(\r\n        document.getElementById(\"networkFlowChart\")\r\n      );\r\n      this.updateNetworkFlowChart();\r\n    },\r\n    updateNetworkFlowChart() {\r\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\r\n\r\n      // 模拟从数据集获取数据\r\n      const date = this.selectedDate || \"2017-11-30\";\r\n      const dateFolder = date.replace(/-/g, \"-\");\r\n\r\n      // 图表标题\r\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\r\n\r\n      // 模拟24小时时间点\r\n      const hours = Array.from(Array(24).keys()).map((item) =>\r\n        item < 10 ? `0${item}:00` : `${item}:00`\r\n      );\r\n\r\n      // 模拟从ITD-2018数据集中读取的数据\r\n      // 在实际应用中，这应该是从CSV文件解析得到的\r\n      let emailData = [];\r\n      let webData = [];\r\n      let databaseData = [];\r\n\r\n      // 基于日期的不同生成模拟数据\r\n      if (date === \"2017-11-30\") {\r\n        // 根据email.csv的数据模式生成\r\n        emailData = [\r\n          5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58,\r\n          40, 35, 25, 18, 12, 8,\r\n        ];\r\n        // 根据weblog.csv的数据模式生成\r\n        webData = [\r\n          10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220,\r\n          175, 120, 80, 45, 30, 20, 15, 12,\r\n        ];\r\n        // 根据login.csv和tcpLog.csv的数据模式生成\r\n        databaseData = [\r\n          2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35,\r\n          25, 15, 10, 5, 3,\r\n        ];\r\n      } else {\r\n        // 其他日期的模拟数据\r\n        emailData = [\r\n          2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45,\r\n          30, 25, 20, 15, 10, 5,\r\n        ];\r\n        webData = [\r\n          8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180,\r\n          155, 100, 65, 35, 25, 15, 10, 8,\r\n        ];\r\n        databaseData = [\r\n          1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30,\r\n          20, 10, 8, 3, 2,\r\n        ];\r\n      }\r\n\r\n      // 工作时间和非工作时间的标记区域\r\n      const markArea = [\r\n        [\r\n          {\r\n            name: \"非工作时间\",\r\n            xAxis: \"00:00\",\r\n          },\r\n          {\r\n            xAxis: \"09:00\",\r\n          },\r\n        ],\r\n        [\r\n          {\r\n            name: \"非工作时间\",\r\n            xAxis: \"18:00\",\r\n          },\r\n          {\r\n            xAxis: \"23:59\",\r\n          },\r\n        ],\r\n      ];\r\n\r\n      // 异常点标记\r\n      const markPoints = [];\r\n      // 在日期为2017-11-30时标记异常点\r\n      if (date === \"2017-11-30\") {\r\n        // 基于email.csv中的异常模式\r\n        markPoints.push({\r\n          name: \"可疑邮件外发\",\r\n          value: \"员工1103\",\r\n          xAxis: 3,\r\n          yAxis: 24,\r\n          symbolSize: 40,\r\n        });\r\n\r\n        // 基于weblog.csv中的异常访问\r\n        markPoints.push({\r\n          name: \"可疑网站访问\",\r\n          value: \"员工1204\",\r\n          xAxis: 21,\r\n          yAxis: 20,\r\n          symbolSize: 40,\r\n        });\r\n      }\r\n\r\n      const option = {\r\n        title: {\r\n          text: title,\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"cross\",\r\n            animation: false,\r\n            label: {\r\n              backgroundColor: \"#505765\",\r\n            },\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\r\n          top: 30,\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: hours,\r\n          boundaryGap: false,\r\n          splitLine: {\r\n            show: true,\r\n          },\r\n          axisLine: {\r\n            onZero: false,\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          name: \"流量(次数)\",\r\n          splitLine: {\r\n            show: true,\r\n          },\r\n        },\r\n        dataZoom: [\r\n          {\r\n            type: \"inside\",\r\n            start: 0,\r\n            end: 100,\r\n          },\r\n          {\r\n            start: 0,\r\n            end: 100,\r\n          },\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"邮件流量\",\r\n            type: \"line\",\r\n            data: emailData,\r\n            markPoint: {\r\n              data: markPoints.filter((p) => p.name === \"可疑邮件外发\"),\r\n            },\r\n            markArea: {\r\n              data: markArea,\r\n              itemStyle: {\r\n                color: \"rgba(255, 173, 177, 0.2)\",\r\n              },\r\n            },\r\n            lineStyle: {\r\n              width: 3,\r\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\r\n              shadowBlur: 10,\r\n              shadowOffsetY: 8,\r\n            },\r\n            smooth: true,\r\n          },\r\n          {\r\n            name: \"网页访问\",\r\n            type: \"line\",\r\n            data: webData,\r\n            markPoint: {\r\n              data: markPoints.filter((p) => p.name === \"可疑网站访问\"),\r\n            },\r\n            lineStyle: {\r\n              width: 3,\r\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\r\n              shadowBlur: 10,\r\n              shadowOffsetY: 8,\r\n            },\r\n            smooth: true,\r\n          },\r\n          {\r\n            name: \"数据库访问\",\r\n            type: \"line\",\r\n            data: databaseData,\r\n            lineStyle: {\r\n              width: 3,\r\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\r\n              shadowBlur: 10,\r\n              shadowOffsetY: 8,\r\n            },\r\n            smooth: true,\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.networkFlowChart.setOption(option);\r\n    },\r\n    initEmailFrequencyChart() {\r\n      this.emailFrequencyChart = this.$echarts.init(\r\n        document.getElementById(\"emailFrequencyChart\")\r\n      );\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"邮件通信频率\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          name: \"每天平均邮件数\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"发送邮件\",\r\n            type: \"bar\",\r\n            data: [32, 38, 30, 25, 22],\r\n          },\r\n          {\r\n            name: \"接收邮件\",\r\n            type: \"bar\",\r\n            data: [45, 50, 42, 38, 30],\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.emailFrequencyChart.setOption(option);\r\n    },\r\n    initLoginSuccessChart() {\r\n      this.loginSuccessChart = this.$echarts.init(\r\n        document.getElementById(\"loginSuccessChart\")\r\n      );\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"各部门登录成功率\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b}: {c}%\",\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          top: 80,\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          min: 80,\r\n          max: 100,\r\n          name: \"成功率(%)\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"登录成功率\",\r\n            type: \"bar\",\r\n            barWidth: \"60%\",\r\n            data: [98.5, 97.2, 98.1, 99.2, 96.8],\r\n            itemStyle: {\r\n              color: function (params) {\r\n                // 根据值的大小定义不同的颜色\r\n                if (params.value > 98) {\r\n                  return \"#67C23A\"; // 高成功率为绿色\r\n                } else if (params.value > 97) {\r\n                  return \"#E6A23C\"; // 中等成功率为黄色\r\n                } else {\r\n                  return \"#F56C6C\"; // 低成功率为红色\r\n                }\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.loginSuccessChart.setOption(option);\r\n    },\r\n    initTcpProtocolChart() {\r\n      this.tcpProtocolChart = this.$echarts.init(\r\n        document.getElementById(\"tcpProtocolChart\")\r\n      );\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"TCP协议使用分布\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\r\n        },\r\n        legend: {\r\n          orient: \"vertical\",\r\n          left: 10,\r\n          top: 30,\r\n          data: [\r\n            \"HTTP/HTTPS\",\r\n            \"SSH/SFTP\",\r\n            \"FTP\",\r\n            \"SMTP\",\r\n            \"MySQL\",\r\n            \"MongoDB\",\r\n            \"PostgreSQL\",\r\n            \"其他\",\r\n          ],\r\n        },\r\n        series: [\r\n          {\r\n            name: \"协议使用\",\r\n            type: \"pie\",\r\n            radius: \"55%\",\r\n            center: [\"50%\", \"60%\"],\r\n            data: [\r\n              { value: 45, name: \"HTTP/HTTPS\" },\r\n              { value: 15, name: \"SSH/SFTP\" },\r\n              { value: 10, name: \"FTP\" },\r\n              { value: 8, name: \"SMTP\" },\r\n              { value: 7, name: \"MySQL\" },\r\n              { value: 6, name: \"MongoDB\" },\r\n              { value: 5, name: \"PostgreSQL\" },\r\n              { value: 4, name: \"其他\" },\r\n            ],\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.tcpProtocolChart.setOption(option);\r\n    },\r\n    async loadDatasets() {\r\n      this.loading = true;\r\n      try {\r\n        // 并行加载所有数据集\r\n        [this.emailData, this.loginData, this.weblogData, this.checkingData] =\r\n          await Promise.all([\r\n            getEmailData(this.selectedDate),\r\n            getLoginData(this.selectedDate),\r\n            getWeblogData(this.selectedDate),\r\n            getCheckingData(this.selectedDate),\r\n          ]);\r\n\r\n        // 处理数据\r\n        this.processData();\r\n\r\n        // 初始化图表\r\n        this.$nextTick(() => {\r\n          this.initNetworkFlowChart();\r\n          this.initWorkingHoursChart();\r\n          this.initWebsiteTypeChart();\r\n        });\r\n      } catch (error) {\r\n        console.error(\"加载数据失败:\", error);\r\n        this.$notify.error({\r\n          title: \"数据加载错误\",\r\n          message: \"无法加载ITD-2018数据集，请检查文件路径\",\r\n        });\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    processData() {\r\n      // 处理网络流量数据\r\n      this.networkFlowData = aggregateNetworkFlowByHour(\r\n        this.emailData,\r\n        this.weblogData,\r\n        this.loginData\r\n      );\r\n\r\n      // 处理打卡时间统计\r\n      this.checkingTimeStats = analyzeCheckingTime(this.checkingData);\r\n\r\n      // 处理工作时长分布\r\n      this.workHoursDistribution = calculateWorkHoursDistribution(\r\n        this.checkingData\r\n      );\r\n\r\n      // 处理网站访问类别\r\n      this.websiteCategories = analyzeWebsiteCategories(this.weblogData);\r\n    },\r\n    handleDateChange() {\r\n      this.loadDatasets();\r\n    },\r\n    initWorkingHoursChart() {\r\n      this.workingHoursChart = this.$echarts.init(\r\n        document.getElementById(\"workingHoursChart\")\r\n      );\r\n\r\n      const { checkinStats, checkoutStats } = this.checkingTimeStats;\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"工作时间分析\",\r\n          subtext: `基于${this.selectedDate}的打卡数据`,\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"上班打卡\", \"下班打卡\"],\r\n          top: 30,\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: [\"提前\", \"正常\", \"延迟\"],\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          name: \"人数\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"上班打卡\",\r\n            type: \"bar\",\r\n            barWidth: \"30%\",\r\n            label: {\r\n              show: true,\r\n              position: \"top\",\r\n            },\r\n            data: [\r\n              {\r\n                value: checkinStats.before_8,\r\n                itemStyle: { color: \"#91cc75\" },\r\n                name: \"8点前\",\r\n              },\r\n              {\r\n                value: checkinStats[\"8_to_9\"],\r\n                itemStyle: { color: \"#5470c6\" },\r\n                name: \"8-9点\",\r\n              },\r\n              {\r\n                value: checkinStats.after_9,\r\n                itemStyle: { color: \"#ee6666\" },\r\n                name: \"9点后\",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: \"下班打卡\",\r\n            type: \"bar\",\r\n            barWidth: \"30%\",\r\n            label: {\r\n              show: true,\r\n              position: \"top\",\r\n            },\r\n            data: [\r\n              {\r\n                value: checkoutStats.before_18,\r\n                itemStyle: { color: \"#ee6666\" },\r\n                name: \"18点前\",\r\n              },\r\n              {\r\n                value: checkoutStats[\"18_to_20\"],\r\n                itemStyle: { color: \"#5470c6\" },\r\n                name: \"18-20点\",\r\n              },\r\n              {\r\n                value: checkoutStats.after_20,\r\n                itemStyle: { color: \"#91cc75\" },\r\n                name: \"20点后\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.workingHoursChart.setOption(option);\r\n\r\n      // 第二个图表：工作时长分布\r\n      const workHoursChart = this.$echarts.init(\r\n        document.getElementById(\"workHoursDistributionChart\")\r\n      );\r\n\r\n      const distribution = this.workHoursDistribution;\r\n\r\n      const distributionOption = {\r\n        title: {\r\n          text: \"工作时长分布\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{b}: {c} ({d}%)\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"工作时长\",\r\n            type: \"pie\",\r\n            radius: [\"40%\", \"70%\"],\r\n            avoidLabelOverlap: false,\r\n            itemStyle: {\r\n              borderRadius: 10,\r\n              borderColor: \"#fff\",\r\n              borderWidth: 2,\r\n            },\r\n            label: {\r\n              show: true,\r\n              formatter: \"{b}: {c}人\",\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: 14,\r\n                fontWeight: \"bold\",\r\n              },\r\n            },\r\n            data: [\r\n              {\r\n                value: distribution.less_than_8,\r\n                name: \"少于8小时\",\r\n                itemStyle: { color: \"#ee6666\" },\r\n              },\r\n              {\r\n                value: distribution[\"8_to_9\"],\r\n                name: \"8-9小时\",\r\n                itemStyle: { color: \"#5470c6\" },\r\n              },\r\n              {\r\n                value: distribution[\"9_to_10\"],\r\n                name: \"9-10小时\",\r\n                itemStyle: { color: \"#91cc75\" },\r\n              },\r\n              {\r\n                value: distribution[\"10_to_11\"],\r\n                name: \"10-11小时\",\r\n                itemStyle: { color: \"#fac858\" },\r\n              },\r\n              {\r\n                value: distribution[\"11_to_12\"],\r\n                name: \"11-12小时\",\r\n                itemStyle: { color: \"#73c0de\" },\r\n              },\r\n              {\r\n                value: distribution.more_than_12,\r\n                name: \"超过12小时\",\r\n                itemStyle: { color: \"#3ba272\" },\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n\r\n      workHoursChart.setOption(distributionOption);\r\n    },\r\n    initWebsiteTypeChart() {\r\n      this.websiteTypeChart = this.$echarts.init(\r\n        document.getElementById(\"websiteTypeChart\")\r\n      );\r\n\r\n      const categories = this.websiteCategories;\r\n      const categoryData = Object.keys(categories).map((key) => ({\r\n        name: key,\r\n        value: categories[key],\r\n      }));\r\n\r\n      const option = {\r\n        title: {\r\n          text: \"网站访问类别统计\",\r\n          subtext: `基于${this.selectedDate}的网页访问数据`,\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{b}: {c} ({d}%)\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"访问类别\",\r\n            type: \"pie\",\r\n            radius: \"60%\",\r\n            center: [\"50%\", \"50%\"],\r\n            data: categoryData,\r\n            emphasis: {\r\n              itemStyle: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\r\n              },\r\n            },\r\n            label: {\r\n              formatter: \"{b}: {c}次\",\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.websiteTypeChart.setOption(option);\r\n\r\n      // 初始化工作时间vs非工作时间访问对比\r\n      const workHoursComparison = this.$echarts.init(\r\n        document.getElementById(\"workHoursComparisonChart\")\r\n      );\r\n\r\n      const workTimeCategories = analyzeWebsiteCategories(\r\n        this.weblogData,\r\n        \"workHours\"\r\n      );\r\n      const afterHoursCategories = analyzeWebsiteCategories(\r\n        this.weblogData,\r\n        \"afterHours\"\r\n      );\r\n\r\n      const categoryNames = Object.keys(workTimeCategories);\r\n      const workTimeData = categoryNames.map((key) => workTimeCategories[key]);\r\n      const afterHoursData = categoryNames.map(\r\n        (key) => afterHoursCategories[key]\r\n      );\r\n\r\n      const comparisonOption = {\r\n        title: {\r\n          text: \"工作时间vs非工作时间网站访问对比\",\r\n          left: \"center\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"工作时间\", \"非工作时间\"],\r\n          top: 30,\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true,\r\n        },\r\n        xAxis: {\r\n          type: \"value\",\r\n          name: \"访问次数\",\r\n        },\r\n        yAxis: {\r\n          type: \"category\",\r\n          data: categoryNames,\r\n          axisLabel: {\r\n            interval: 0,\r\n            rotate: 30,\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"工作时间\",\r\n            type: \"bar\",\r\n            data: workTimeData,\r\n          },\r\n          {\r\n            name: \"非工作时间\",\r\n            type: \"bar\",\r\n            data: afterHoursData,\r\n          },\r\n        ],\r\n      };\r\n\r\n      workHoursComparison.setOption(comparisonOption);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.box-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.data-loading {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.chart-container {\r\n  height: 350px;\r\n}\r\n\r\n.section-title {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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IACAA,IAAA,YAAAA,IAAA,WAAAA,IAAA,KACA;;MAEA;MACA;MACA,IAAAhE,SAAA;MACA,IAAAiF,OAAA;MACA,IAAAC,YAAA;;MAEA;MACA,IAAAR,IAAA;QACA;QACA1E,SAAA,IACA,uEACA,sBACA;QACA;QACAiF,OAAA,IACA,oEACA,iCACA;QACA;QACAC,YAAA,IACA,sEACA,iBACA;MACA;QACA;QACAlF,SAAA,IACA,oEACA,sBACA;QACAiF,OAAA,IACA,mEACA,gCACA;QACAC,YAAA,IACA,sEACA,gBACA;MACA;;MAEA;MACA,MAAAC,QAAA,IACA,CACA;QACA9G,IAAA;QACAyE,KAAA;MACA,GACA;QACAA,KAAA;MACA,EACA,EACA,CACA;QACAzE,IAAA;QACAyE,KAAA;MACA,GACA;QACAA,KAAA;MACA,EACA,CACA;;MAEA;MACA,MAAAsC,UAAA;MACA;MACA,IAAAV,IAAA;QACA;QACAU,UAAA,CAAAC,IAAA;UACAhH,IAAA;UACAwB,KAAA;UACAiD,KAAA;UACAI,KAAA;UACAE,UAAA;QACA;;QAEA;QACAgC,UAAA,CAAAC,IAAA;UACAhH,IAAA;UACAwB,KAAA;UACAiD,KAAA;UACAI,KAAA;UACAE,UAAA;QACA;MACA;MAEA,MAAAnB,MAAA;QACAC,KAAA;UACAC,IAAA,EAAAD,KAAA;UACAE,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAsB,WAAA;YACAb,IAAA;YACAuC,SAAA;YACAxF,KAAA;cACAyF,eAAA;YACA;UACA;QACA;QACA1B,MAAA;UACAvF,IAAA;UACAsE,GAAA;QACA;QACAH,IAAA;UACAL,IAAA;UACAM,KAAA;UACAC,MAAA;UACAC,GAAA;UACAC,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAzE,IAAA,EAAAuG,KAAA;UACAW,WAAA;UACAC,SAAA;YACAtB,IAAA;UACA;UACAuB,QAAA;YACAC,MAAA;UACA;QACA;QACAzC,KAAA;UACAH,IAAA;UACA1E,IAAA;UACAoH,SAAA;YACAtB,IAAA;UACA;QACA;QACAyB,QAAA,GACA;UACA7C,IAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}