{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"Threat\",\n  data() {\n    return {\n      threatRelationChart: null,\n      evidenceChart: null,\n      selectedEvent: null,\n      threatEvents: [],\n      rawRecentAbnormalEvents: [],\n      departmentAbnormalCountsData: [],\n      employeeAbnormalActivitiesData: {},\n      isLoading: false\n    };\n  },\n  async mounted() {\n    await this.loadThreatData();\n    this.initThreatRelationChart();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n    if (this.threatRelationChart) {\n      this.threatRelationChart.dispose();\n    }\n    if (this.evidenceChart) {\n      this.evidenceChart.dispose();\n    }\n  },\n  methods: {\n    async loadThreatData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载威胁情报数据...\");\n      try {\n        const [recentRes, deptRes, empRes] = await Promise.all([fetch(\"/recent_abnormal_events.json\"), fetch(\"/department_abnormal_counts.json\"), fetch(\"/employee_abnormal_activities.json\")]);\n        if (!recentRes.ok) throw new Error(\"加载最近异常事件失败\");\n        this.rawRecentAbnormalEvents = await recentRes.json();\n        if (!deptRes.ok) throw new Error(\"加载部门异常统计失败\");\n        this.departmentAbnormalCountsData = await deptRes.json();\n        if (!empRes.ok) throw new Error(\"加载员工异常活动失败\");\n        this.employeeAbnormalActivitiesData = await empRes.json();\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n        this.$message.success(\"威胁情报数据加载完成！\");\n      } catch (error) {\n        console.error(\"加载威胁数据失败:\", error);\n        this.$message.error(`加载威胁数据失败: ${error.message}`);\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    processThreatEvents() {\n      if (this.rawRecentAbnormalEvents && this.rawRecentAbnormalEvents.length > 0) {\n        this.threatEvents = this.rawRecentAbnormalEvents.map((event, index) => {\n          // 增强威胁类型分类\n          const enhancedType = this.classifyThreatType(event);\n          // 增强风险等级评估\n          const riskLevel = this.assessThreatLevel(event);\n          // 增强描述\n          const enhancedDesc = this.enhanceDescription(event);\n          return {\n            id: index + 1,\n            type: enhancedType,\n            date: event.timestamp ? event.timestamp.split(\" \")[0] : \"未知日期\",\n            time: event.timestamp ? event.timestamp.split(\" \")[1] : \"未知时间\",\n            user: event.employeeId || \"未知用户\",\n            description: enhancedDesc,\n            level: riskLevel,\n            detailDescription: this.generateDetailedDescription(event),\n            rawEventData: event\n          };\n        });\n\n        // 按风险等级排序：高->中->低\n        this.threatEvents.sort((a, b) => {\n          const levelOrder = {\n            高: 0,\n            中: 1,\n            低: 2\n          };\n          return levelOrder[a.level] - levelOrder[b.level];\n        });\n      } else {\n        this.threatEvents = [];\n      }\n    },\n    classifyThreatType(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dport = event.rawEvent?.dport || 0;\n      if (proto === \"ftp\" || proto === \"sftp\") return \"文件传输异常\";\n      if (dport == 22) return \"SSH远程访问\";\n      if (dport == 3389) return \"RDP远程桌面\";\n      if (proto === \"tds\") return \"数据库访问异常\";\n      if (proto === \"mysql\" || proto === \"postgresql\") return \"数据库查询异常\";\n      return event.type || \"非工作时间活动\";\n    },\n    assessThreatLevel(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dport = event.rawEvent?.dport || 0;\n      const time = event.timestamp || \"\";\n\n      // 深夜时间(22:00-06:00)的敏感操作\n      const hour = new Date(time).getHours();\n      const isDeepNight = hour >= 22 || hour <= 6;\n\n      // 高风险条件\n      if ((proto === \"ftp\" || proto === \"sftp\") && isDeepNight) return \"高\";\n      if (dport == 22 || dport == 3389) return \"高\";\n      if (proto === \"tds\" && isDeepNight) return \"中\";\n      if (proto === \"mysql\" || proto === \"postgresql\") return \"中\";\n      return \"低\";\n    },\n    enhanceDescription(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dip = event.rawEvent?.dip || \"\";\n      const dport = event.rawEvent?.dport || \"\";\n      const time = event.timestamp || \"\";\n      if (proto === \"ftp\" || proto === \"sftp\") {\n        return `可疑文件传输: 在${time}通过${proto.toUpperCase()}访问${dip}:${dport}`;\n      }\n      if (proto === \"tds\") {\n        return `数据库异常访问: 在${time}访问SQL Server ${dip}:${dport}`;\n      }\n      if (dport == 22) {\n        return `SSH远程登录: 在${time}访问服务器${dip}`;\n      }\n      return event.description || `在${time}检测到异常活动`;\n    },\n    generateDetailedDescription(event) {\n      const details = [`事件时间: ${event.timestamp}`, `涉及员工: ${event.employeeId} (${event.department})`, `访问协议: ${event.rawEvent?.proto || \"未知\"}`, `目标地址: ${event.rawEvent?.dip}:${event.rawEvent?.dport}`, `源地址: ${event.rawEvent?.sip}:${event.rawEvent?.sport}`, `连接状态: ${event.rawEvent?.state || \"未知\"}`, `风险评估: ${this.assessThreatLevel(event)}`, \"\", \"详细分析:\", event.description || \"无详细描述\"];\n      return details.join(\"\\n\");\n    },\n    initThreatRelationChart() {\n      if (this.threatRelationChart) {\n        this.threatRelationChart.dispose();\n      }\n      const chartDom = document.getElementById(\"threatRelationChart\");\n      if (chartDom) {\n        this.threatRelationChart = this.$echarts.init(chartDom);\n        this.updateThreatRelationChart();\n      } else {\n        console.error(\"Threat relation chart DOM not found.\");\n      }\n    },\n    updateThreatRelationChart() {\n      if (!this.threatRelationChart) return;\n      let nodes = [];\n      let links = [];\n      const categories = [{\n        name: \"员工\",\n        itemStyle: {\n          color: \"#409EFF\"\n        }\n      },\n      // Category 0\n      {\n        name: \"异常类型\",\n        itemStyle: {\n          color: \"#F56C6C\"\n        }\n      } // Category 1\n      // Możemy dodać więcej kategorii w przyszłości\n      ];\n      if (!this.employeeAbnormalActivitiesData || Object.keys(this.employeeAbnormalActivitiesData).length === 0) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"暂无员工异常活动数据以生成关联图\",\n            left: \"center\",\n            top: \"center\"\n          },\n          series: [] // Ensure series is empty if no data\n        });\n        return;\n      }\n      const employeeNodes = new Map(); // Store employee nodes to avoid duplicates: employeeId -> nodeIndex\n      const activityTypeNodes = new Map(); // Store activity type nodes: typeName -> nodeIndex\n      let nodeCounter = 0;\n      for (const empId in this.employeeAbnormalActivitiesData) {\n        if (Object.hasOwnProperty.call(this.employeeAbnormalActivitiesData, empId)) {\n          // Add employee node if not exists\n          if (!employeeNodes.has(empId)) {\n            nodes.push({\n              id: `emp_${empId}`,\n              name: `员工 ${empId}`,\n              category: 0,\n              // Employee category\n              symbolSize: 35,\n              value: this.employeeAbnormalActivitiesData[empId].length,\n              // Size by number of activities\n              draggable: true\n            });\n            employeeNodes.set(empId, nodeCounter++);\n          }\n          const activities = this.employeeAbnormalActivitiesData[empId];\n          activities.forEach(activity => {\n            const activityType = activity.type || \"未知类型\";\n            // Add activity type node if not exists\n            if (!activityTypeNodes.has(activityType)) {\n              nodes.push({\n                id: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n                name: activityType,\n                category: 1,\n                // Activity Type category\n                symbolSize: 25,\n                value: 1,\n                // Initial value, can be incremented if multiple employees have this type\n                draggable: true\n              });\n              activityTypeNodes.set(activityType, nodeCounter++);\n            } else {\n              // Increment value for existing activity type node if needed for sizing\n              const existingNodeIndex = activityTypeNodes.get(activityType);\n              if (nodes[existingNodeIndex]) nodes[existingNodeIndex].value++;\n            }\n\n            // Add link from employee to activity type\n            links.push({\n              source: `emp_${empId}`,\n              target: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n              value: 1 // Can be used for line thickness if needed\n            });\n          });\n        }\n      }\n\n      // Fallback if no nodes were created (e.g. empty activities for all employees)\n      if (nodes.length === 0) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"未从数据中提取出有效的关联节点\",\n            left: \"center\",\n            top: \"center\"\n          },\n          series: []\n        });\n        return;\n      }\n      const option = {\n        title: {\n          text: \"威胁事件关联分析\",\n          subtext: \"员工与异常活动类型关联\",\n          left: \"center\"\n        },\n        tooltip: {\n          formatter: function (params) {\n            if (params.dataType === \"node\") {\n              return `${params.data.name}<br/>关联活动数: ${params.data.value || \"N/A\"}`;\n            }\n            return params.name;\n          }\n        },\n        legend: [{\n          data: categories.map(function (a) {\n            return a.name;\n          }),\n          bottom: 10\n        }],\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [{\n          type: \"graph\",\n          layout: \"force\",\n          data: nodes,\n          links: links,\n          categories: categories,\n          roam: true,\n          label: {\n            show: true,\n            position: \"right\",\n            formatter: \"{b}\" // Show name\n          },\n          // symbolSize: 50, // Symbol size can be set per node or globally\n          edgeSymbol: [\"none\", \"arrow\"],\n          // No symbol for source, arrow for target\n          edgeSymbolSize: [4, 10],\n          force: {\n            repulsion: 150,\n            // Adjusted repulsion\n            edgeLength: [80, 120],\n            // Varied edge length\n            gravity: 0.1\n          },\n          lineStyle: {\n            opacity: 0.9,\n            width: 2,\n            curveness: 0\n          }\n        }]\n      };\n      this.threatRelationChart.setOption(option, true); // true to clear previous options\n    },\n    handleEventSelect(event) {\n      this.selectedEvent = event;\n      this.$nextTick(() => {\n        this.initEvidenceChart();\n      });\n    },\n    initEvidenceChart() {\n      if (this.evidenceChart) {\n        this.evidenceChart.dispose();\n      }\n      if (!this.selectedEvent) return;\n      const chartDom = document.getElementById(\"evidenceChart\");\n      if (chartDom) {\n        this.evidenceChart = this.$echarts.init(chartDom);\n        this.updateEvidenceChart();\n      } else {\n        console.error(\"Evidence chart DOM not found.\");\n      }\n    },\n    updateEvidenceChart() {\n      if (!this.evidenceChart || !this.selectedEvent || !this.selectedEvent.rawEventData) {\n        // Clear chart or show placeholder if no event or no raw data\n        if (this.evidenceChart) {\n          this.evidenceChart.setOption({\n            title: {\n              text: this.selectedEvent ? \"选择的事件缺少原始数据\" : \"未选择事件\",\n              left: \"center\",\n              top: \"center\"\n            },\n            series: [] // Clear series\n          });\n        }\n        return;\n      }\n      const eventType = this.selectedEvent.type;\n      const rawEvent = this.selectedEvent.rawEventData.rawEvent; // Assuming rawEventData contains the original rawEvent object\n      let option = {};\n      if (eventType === \"邮件敏感词\" && rawEvent && rawEvent.subject) {\n        // 为邮件敏感词显示主题和关键词\n        const keywordsFound = [];\n        // SENSITIVE_EMAIL_KEYWORDS is not directly available here,\n        // but we can infer from the description or rawEvent if it was stored.\n        // For now, just display the subject.\n        // A more advanced version could highlight keywords in the subject.\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `邮件主题: ${rawEvent.subject.substring(0, 100)}${rawEvent.subject.length > 100 ? \"...\" : \"\"}`,\n            left: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#555\"\n            }\n          },\n          // We could use a graphic element to display text if no chart is suitable\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `相关邮件主题与描述中提到的敏感词有关。\\n详细信息请查看事件描述。`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\"\n            }\n          },\n          series: []\n        };\n      } else if (eventType === \"非工作时间登录\" && this.selectedEvent.rawEventData) {\n        // 为非工作时间登录显示登录时间戳\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `登录时间: ${this.selectedEvent.rawEventData.timestamp}`,\n            left: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#555\"\n            }\n          },\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `该登录事件发生在非工作时段。\\n具体时间点: ${this.selectedEvent.rawEventData.timestamp}`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\"\n            }\n          },\n          series: []\n        };\n      } else {\n        // 其他事件类型或缺少具体信息\n        option = {\n          title: {\n            text: `事件证据 (类型: ${eventType})`,\n            subtext: \"此事件类型的详细证据展示待实现\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              fontSize: 14\n            },\n            subtextStyle: {\n              fontSize: 12,\n              color: \"#888\"\n            }\n          },\n          series: []\n        };\n      }\n      this.evidenceChart.setOption(option, true);\n    },\n    getEventTypeTag(type) {\n      const typeMap = {\n        数据外发: \"danger\",\n        账户探测: \"warning\",\n        异常行为: \"warning\",\n        数据库异常: \"danger\",\n        可疑通信: \"danger\"\n      };\n      return typeMap[type] || \"info\";\n    },\n    getRiskLevelTag(level) {\n      const levelMap = {\n        高: \"danger\",\n        中: \"warning\",\n        低: \"info\"\n      };\n      return levelMap[level] || \"info\";\n    },\n    handleResize() {\n      this.threatRelationChart && this.threatRelationChart.resize();\n      this.evidenceChart && this.evidenceChart.resize();\n    }\n  }\n};","map":{"version":3,"names":["name","data","threatRelationChart","evidenceChart","selectedEvent","threatEvents","rawRecentAbnormalEvents","departmentAbnormalCountsData","employeeAbnormalActivitiesData","isLoading","mounted","loadThreatData","initThreatRelationChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","dispose","methods","$message","info","recentRes","deptRes","empRes","Promise","all","fetch","ok","Error","json","processThreatEvents","updateThreatRelationChart","success","error","console","message","length","map","event","index","enhancedType","classifyThreatType","riskLevel","assessThreatLevel","enhancedDesc","enhanceDescription","id","type","date","timestamp","split","time","user","employeeId","description","level","detailDescription","generateDetailedDescription","rawEventData","sort","a","b","levelOrder","高","中","低","proto","rawEvent","dport","hour","Date","getHours","isDeepNight","dip","toUpperCase","details","department","sip","sport","state","join","chartDom","document","getElementById","$echarts","init","nodes","links","categories","itemStyle","color","Object","keys","setOption","title","text","left","top","series","employeeNodes","Map","activityTypeNodes","nodeCounter","empId","hasOwnProperty","call","has","push","category","symbolSize","value","draggable","set","activities","forEach","activity","activityType","replace","existingNodeIndex","get","source","target","option","subtext","tooltip","formatter","params","dataType","legend","bottom","animationDurationUpdate","animationEasingUpdate","layout","roam","label","show","position","edgeSymbol","edgeSymbolSize","force","repulsion","edgeLength","gravity","lineStyle","opacity","width","curveness","handleEventSelect","$nextTick","initEvidenceChart","updateEvidenceChart","eventType","subject","keywordsFound","substring","textStyle","fontSize","subtextStyle","graphic","style","textAlign","font","getEventTypeTag","typeMap","数据外发","账户探测","异常行为","数据库异常","可疑通信","getRiskLevelTag","levelMap","resize"],"sources":["src/views/Threat.vue"],"sourcesContent":["<template>\n  <div class=\"threat\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>威胁情报分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"检测并分析可能存在的内部威胁事件，探究事件间的关联性\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对多维数据的关联分析，我们发现了多起可疑行为并关联成威胁情报，这些情报可能表明有内部人员试图获取或泄露公司核心产品信息。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"16\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>威胁事件关联图</span>\n          </div>\n          <div\n            id=\"threatRelationChart\"\n            style=\"width: 100%; height: 600px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>威胁事件列表</span>\n          </div>\n          <el-table\n            :data=\"threatEvents\"\n            style=\"width: 100%\"\n            max-height=\"550\"\n            @row-click=\"handleEventSelect\"\n          >\n            <el-table-column\n              prop=\"id\"\n              label=\"编号\"\n              width=\"60\"\n            ></el-table-column>\n            <el-table-column prop=\"type\" label=\"类型\" width=\"100\">\n              <template slot-scope=\"scope\">\n                <el-tag :type=\"getEventTypeTag(scope.row.type)\">{{\n                  scope.row.type\n                }}</el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column\n              prop=\"date\"\n              label=\"日期\"\n              width=\"100\"\n            ></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column prop=\"level\" label=\"风险等级\" width=\"80\">\n              <template slot-scope=\"scope\">\n                <el-tag :type=\"getRiskLevelTag(scope.row.level)\">{{\n                  scope.row.level\n                }}</el-tag>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\" v-if=\"selectedEvent\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>事件详情: {{ selectedEvent.description }}</span>\n          </div>\n          <el-row :gutter=\"20\">\n            <el-col :span=\"12\">\n              <h4>事件信息</h4>\n              <el-descriptions :column=\"1\" border>\n                <el-descriptions-item label=\"事件ID\">{{\n                  selectedEvent.id\n                }}</el-descriptions-item>\n                <el-descriptions-item label=\"类型\">{{\n                  selectedEvent.type\n                }}</el-descriptions-item>\n                <el-descriptions-item label=\"日期\">{{\n                  selectedEvent.date\n                }}</el-descriptions-item>\n                <el-descriptions-item label=\"时间\">{{\n                  selectedEvent.time\n                }}</el-descriptions-item>\n                <el-descriptions-item label=\"相关用户\">{{\n                  selectedEvent.user\n                }}</el-descriptions-item>\n                <el-descriptions-item label=\"风险等级\">\n                  <el-tag :type=\"getRiskLevelTag(selectedEvent.level)\">{{\n                    selectedEvent.level\n                  }}</el-tag>\n                </el-descriptions-item>\n                <el-descriptions-item label=\"详细描述\">{{\n                  selectedEvent.detailDescription\n                }}</el-descriptions-item>\n              </el-descriptions>\n            </el-col>\n            <el-col :span=\"12\">\n              <h4>相关证据</h4>\n              <div id=\"evidenceChart\" style=\"width: 100%; height: 300px\"></div>\n            </el-col>\n          </el-row>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>威胁情报综合分析</span>\n          </div>\n          <div class=\"analysis-content\">\n            <h3>主要威胁情报发现</h3>\n            <p>\n              通过对公司内部各种日志数据的综合分析，我们发现了以下几个主要的威胁情报：\n            </p>\n\n            <h4>1. 大量敏感文件访问与数据外发</h4>\n            <p>\n              研发2部的员工ID-1103在非常规工作时间（凌晨2:00-4:00）登录公司服务器，访问并下载了大量与新产品相关的文件，同时向外部邮箱发送了多封带有大附件的邮件。\n            </p>\n\n            <h4>2. 异常登录行为</h4>\n            <p>\n              员工ID-1152在11月10日至11月15日期间多次尝试登录其他研发人员的账户，成功率较低但存在成功案例，显示出明显的账户探测行为。\n            </p>\n\n            <h4>3. 反常规上班模式</h4>\n            <p>\n              员工ID-1388在11月5日至11月20日期间，连续多天出现深夜在办公室活动的记录，但第二天通常迟到或缺勤，与其历史工作模式存在显著差异。\n            </p>\n\n            <h4>4. 数据库异常查询</h4>\n            <p>\n              研发3部的员工ID-1307在11月8日至11月12日期间，对公司核心产品数据库进行了大量非常规查询，涉及表数量远超其工作所需。\n            </p>\n\n            <h4>5. 可疑外部通信</h4>\n            <p>\n              员工ID-1204在11月18日至11月25日期间，其工作站与多个未知IP地址建立了加密连接，流量模式表明可能存在数据外传。\n            </p>\n\n            <h3>威胁关联分析</h3>\n            <p>\n              这些异常事件并非相互独立，通过对时间、网络行为和邮件往来的分析，我们发现：\n            </p>\n            <ul>\n              <li>\n                员工ID-1103和员工ID-1204有频繁的邮件往来，且邮件内容多涉及新产品的技术细节\n              </li>\n              <li>\n                员工ID-1152与员工ID-1388在同一网段活动，且活动时间有明显的交错模式\n              </li>\n              <li>\n                在员工ID-1307进行异常数据库查询的同一时间段，员工ID-1103的外发邮件数量明显增加\n              </li>\n              <li>\n                所有涉事员工近期都曾访问过相同的外部技术论坛和几个特定IP地址\n              </li>\n            </ul>\n\n            <h3>分析方法说明</h3>\n            <p>本系统采用多维数据关联分析方法发现这些威胁情报：</p>\n            <ol>\n              <li>\n                通过员工打卡记录与登录时间的交叉分析，发现工作时间与系统活动不匹配的异常\n              </li>\n              <li>\n                使用聚类算法对邮件往来建立关系网络，识别出不寻常的沟通模式\n              </li>\n              <li>对网络流量进行时序分析，发现工作时间之外的异常流量峰值</li>\n              <li>分析登录日志中的失败模式，识别可能的账户探测行为</li>\n              <li>\n                利用关联规则挖掘算法，发现不同异常事件之间的时间和行为关联\n              </li>\n            </ol>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Threat\",\n  data() {\n    return {\n      threatRelationChart: null,\n      evidenceChart: null,\n      selectedEvent: null,\n      threatEvents: [],\n      rawRecentAbnormalEvents: [],\n      departmentAbnormalCountsData: [],\n      employeeAbnormalActivitiesData: {},\n      isLoading: false,\n    };\n  },\n  async mounted() {\n    await this.loadThreatData();\n    this.initThreatRelationChart();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n    if (this.threatRelationChart) {\n      this.threatRelationChart.dispose();\n    }\n    if (this.evidenceChart) {\n      this.evidenceChart.dispose();\n    }\n  },\n  methods: {\n    async loadThreatData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载威胁情报数据...\");\n      try {\n        const [recentRes, deptRes, empRes] = await Promise.all([\n          fetch(\"/recent_abnormal_events.json\"),\n          fetch(\"/department_abnormal_counts.json\"),\n          fetch(\"/employee_abnormal_activities.json\"),\n        ]);\n\n        if (!recentRes.ok) throw new Error(\"加载最近异常事件失败\");\n        this.rawRecentAbnormalEvents = await recentRes.json();\n\n        if (!deptRes.ok) throw new Error(\"加载部门异常统计失败\");\n        this.departmentAbnormalCountsData = await deptRes.json();\n\n        if (!empRes.ok) throw new Error(\"加载员工异常活动失败\");\n        this.employeeAbnormalActivitiesData = await empRes.json();\n\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n\n        this.$message.success(\"威胁情报数据加载完成！\");\n      } catch (error) {\n        console.error(\"加载威胁数据失败:\", error);\n        this.$message.error(`加载威胁数据失败: ${error.message}`);\n        this.processThreatEvents();\n        this.updateThreatRelationChart();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    processThreatEvents() {\n      if (\n        this.rawRecentAbnormalEvents &&\n        this.rawRecentAbnormalEvents.length > 0\n      ) {\n        this.threatEvents = this.rawRecentAbnormalEvents.map((event, index) => {\n          // 增强威胁类型分类\n          const enhancedType = this.classifyThreatType(event);\n          // 增强风险等级评估\n          const riskLevel = this.assessThreatLevel(event);\n          // 增强描述\n          const enhancedDesc = this.enhanceDescription(event);\n\n          return {\n            id: index + 1,\n            type: enhancedType,\n            date: event.timestamp ? event.timestamp.split(\" \")[0] : \"未知日期\",\n            time: event.timestamp ? event.timestamp.split(\" \")[1] : \"未知时间\",\n            user: event.employeeId || \"未知用户\",\n            description: enhancedDesc,\n            level: riskLevel,\n            detailDescription: this.generateDetailedDescription(event),\n            rawEventData: event,\n          };\n        });\n\n        // 按风险等级排序：高->中->低\n        this.threatEvents.sort((a, b) => {\n          const levelOrder = { 高: 0, 中: 1, 低: 2 };\n          return levelOrder[a.level] - levelOrder[b.level];\n        });\n      } else {\n        this.threatEvents = [];\n      }\n    },\n    classifyThreatType(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dport = event.rawEvent?.dport || 0;\n\n      if (proto === \"ftp\" || proto === \"sftp\") return \"文件传输异常\";\n      if (dport == 22) return \"SSH远程访问\";\n      if (dport == 3389) return \"RDP远程桌面\";\n      if (proto === \"tds\") return \"数据库访问异常\";\n      if (proto === \"mysql\" || proto === \"postgresql\") return \"数据库查询异常\";\n      return event.type || \"非工作时间活动\";\n    },\n    assessThreatLevel(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dport = event.rawEvent?.dport || 0;\n      const time = event.timestamp || \"\";\n\n      // 深夜时间(22:00-06:00)的敏感操作\n      const hour = new Date(time).getHours();\n      const isDeepNight = hour >= 22 || hour <= 6;\n\n      // 高风险条件\n      if ((proto === \"ftp\" || proto === \"sftp\") && isDeepNight) return \"高\";\n      if (dport == 22 || dport == 3389) return \"高\";\n      if (proto === \"tds\" && isDeepNight) return \"中\";\n      if (proto === \"mysql\" || proto === \"postgresql\") return \"中\";\n\n      return \"低\";\n    },\n    enhanceDescription(event) {\n      const proto = event.rawEvent?.proto || \"\";\n      const dip = event.rawEvent?.dip || \"\";\n      const dport = event.rawEvent?.dport || \"\";\n      const time = event.timestamp || \"\";\n\n      if (proto === \"ftp\" || proto === \"sftp\") {\n        return `可疑文件传输: 在${time}通过${proto.toUpperCase()}访问${dip}:${dport}`;\n      }\n      if (proto === \"tds\") {\n        return `数据库异常访问: 在${time}访问SQL Server ${dip}:${dport}`;\n      }\n      if (dport == 22) {\n        return `SSH远程登录: 在${time}访问服务器${dip}`;\n      }\n\n      return event.description || `在${time}检测到异常活动`;\n    },\n    generateDetailedDescription(event) {\n      const details = [\n        `事件时间: ${event.timestamp}`,\n        `涉及员工: ${event.employeeId} (${event.department})`,\n        `访问协议: ${event.rawEvent?.proto || \"未知\"}`,\n        `目标地址: ${event.rawEvent?.dip}:${event.rawEvent?.dport}`,\n        `源地址: ${event.rawEvent?.sip}:${event.rawEvent?.sport}`,\n        `连接状态: ${event.rawEvent?.state || \"未知\"}`,\n        `风险评估: ${this.assessThreatLevel(event)}`,\n        \"\",\n        \"详细分析:\",\n        event.description || \"无详细描述\",\n      ];\n\n      return details.join(\"\\n\");\n    },\n    initThreatRelationChart() {\n      if (this.threatRelationChart) {\n        this.threatRelationChart.dispose();\n      }\n      const chartDom = document.getElementById(\"threatRelationChart\");\n      if (chartDom) {\n        this.threatRelationChart = this.$echarts.init(chartDom);\n        this.updateThreatRelationChart();\n      } else {\n        console.error(\"Threat relation chart DOM not found.\");\n      }\n    },\n    updateThreatRelationChart() {\n      if (!this.threatRelationChart) return;\n\n      let nodes = [];\n      let links = [];\n      const categories = [\n        { name: \"员工\", itemStyle: { color: \"#409EFF\" } }, // Category 0\n        { name: \"异常类型\", itemStyle: { color: \"#F56C6C\" } }, // Category 1\n        // Możemy dodać więcej kategorii w przyszłości\n      ];\n\n      if (\n        !this.employeeAbnormalActivitiesData ||\n        Object.keys(this.employeeAbnormalActivitiesData).length === 0\n      ) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"暂无员工异常活动数据以生成关联图\",\n            left: \"center\",\n            top: \"center\",\n          },\n          series: [], // Ensure series is empty if no data\n        });\n        return;\n      }\n\n      const employeeNodes = new Map(); // Store employee nodes to avoid duplicates: employeeId -> nodeIndex\n      const activityTypeNodes = new Map(); // Store activity type nodes: typeName -> nodeIndex\n      let nodeCounter = 0;\n\n      for (const empId in this.employeeAbnormalActivitiesData) {\n        if (\n          Object.hasOwnProperty.call(this.employeeAbnormalActivitiesData, empId)\n        ) {\n          // Add employee node if not exists\n          if (!employeeNodes.has(empId)) {\n            nodes.push({\n              id: `emp_${empId}`,\n              name: `员工 ${empId}`,\n              category: 0, // Employee category\n              symbolSize: 35,\n              value: this.employeeAbnormalActivitiesData[empId].length, // Size by number of activities\n              draggable: true,\n            });\n            employeeNodes.set(empId, nodeCounter++);\n          }\n\n          const activities = this.employeeAbnormalActivitiesData[empId];\n          activities.forEach((activity) => {\n            const activityType = activity.type || \"未知类型\";\n            // Add activity type node if not exists\n            if (!activityTypeNodes.has(activityType)) {\n              nodes.push({\n                id: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n                name: activityType,\n                category: 1, // Activity Type category\n                symbolSize: 25,\n                value: 1, // Initial value, can be incremented if multiple employees have this type\n                draggable: true,\n              });\n              activityTypeNodes.set(activityType, nodeCounter++);\n            } else {\n              // Increment value for existing activity type node if needed for sizing\n              const existingNodeIndex = activityTypeNodes.get(activityType);\n              if (nodes[existingNodeIndex]) nodes[existingNodeIndex].value++;\n            }\n\n            // Add link from employee to activity type\n            links.push({\n              source: `emp_${empId}`,\n              target: `type_${activityType.replace(/\\s+/g, \"_\")}`,\n              value: 1, // Can be used for line thickness if needed\n            });\n          });\n        }\n      }\n\n      // Fallback if no nodes were created (e.g. empty activities for all employees)\n      if (nodes.length === 0) {\n        this.threatRelationChart.setOption({\n          title: {\n            text: \"未从数据中提取出有效的关联节点\",\n            left: \"center\",\n            top: \"center\",\n          },\n          series: [],\n        });\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"威胁事件关联分析\",\n          subtext: \"员工与异常活动类型关联\",\n          left: \"center\",\n        },\n        tooltip: {\n          formatter: function (params) {\n            if (params.dataType === \"node\") {\n              return `${params.data.name}<br/>关联活动数: ${\n                params.data.value || \"N/A\"\n              }`;\n            }\n            return params.name;\n          },\n        },\n        legend: [\n          {\n            data: categories.map(function (a) {\n              return a.name;\n            }),\n            bottom: 10,\n          },\n        ],\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [\n          {\n            type: \"graph\",\n            layout: \"force\",\n            data: nodes,\n            links: links,\n            categories: categories,\n            roam: true,\n            label: {\n              show: true,\n              position: \"right\",\n              formatter: \"{b}\", // Show name\n            },\n            // symbolSize: 50, // Symbol size can be set per node or globally\n            edgeSymbol: [\"none\", \"arrow\"], // No symbol for source, arrow for target\n            edgeSymbolSize: [4, 10],\n            force: {\n              repulsion: 150, // Adjusted repulsion\n              edgeLength: [80, 120], // Varied edge length\n              gravity: 0.1,\n            },\n            lineStyle: {\n              opacity: 0.9,\n              width: 2,\n              curveness: 0,\n            },\n          },\n        ],\n      };\n      this.threatRelationChart.setOption(option, true); // true to clear previous options\n    },\n    handleEventSelect(event) {\n      this.selectedEvent = event;\n      this.$nextTick(() => {\n        this.initEvidenceChart();\n      });\n    },\n    initEvidenceChart() {\n      if (this.evidenceChart) {\n        this.evidenceChart.dispose();\n      }\n      if (!this.selectedEvent) return;\n\n      const chartDom = document.getElementById(\"evidenceChart\");\n      if (chartDom) {\n        this.evidenceChart = this.$echarts.init(chartDom);\n        this.updateEvidenceChart();\n      } else {\n        console.error(\"Evidence chart DOM not found.\");\n      }\n    },\n    updateEvidenceChart() {\n      if (\n        !this.evidenceChart ||\n        !this.selectedEvent ||\n        !this.selectedEvent.rawEventData\n      ) {\n        // Clear chart or show placeholder if no event or no raw data\n        if (this.evidenceChart) {\n          this.evidenceChart.setOption({\n            title: {\n              text: this.selectedEvent\n                ? \"选择的事件缺少原始数据\"\n                : \"未选择事件\",\n              left: \"center\",\n              top: \"center\",\n            },\n            series: [], // Clear series\n          });\n        }\n        return;\n      }\n\n      const eventType = this.selectedEvent.type;\n      const rawEvent = this.selectedEvent.rawEventData.rawEvent; // Assuming rawEventData contains the original rawEvent object\n      let option = {};\n\n      if (eventType === \"邮件敏感词\" && rawEvent && rawEvent.subject) {\n        // 为邮件敏感词显示主题和关键词\n        const keywordsFound = [];\n        // SENSITIVE_EMAIL_KEYWORDS is not directly available here,\n        // but we can infer from the description or rawEvent if it was stored.\n        // For now, just display the subject.\n        // A more advanced version could highlight keywords in the subject.\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `邮件主题: ${rawEvent.subject.substring(0, 100)}${\n              rawEvent.subject.length > 100 ? \"...\" : \"\"\n            }`,\n            left: \"center\",\n            textStyle: { fontSize: 14 },\n            subtextStyle: { fontSize: 12, color: \"#555\" },\n          },\n          // We could use a graphic element to display text if no chart is suitable\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `相关邮件主题与描述中提到的敏感词有关。\\n详细信息请查看事件描述。`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\",\n            },\n          },\n          series: [],\n        };\n      } else if (\n        eventType === \"非工作时间登录\" &&\n        this.selectedEvent.rawEventData\n      ) {\n        // 为非工作时间登录显示登录时间戳\n        option = {\n          title: {\n            text: `证据: ${eventType}`,\n            subtext: `登录时间: ${this.selectedEvent.rawEventData.timestamp}`,\n            left: \"center\",\n            textStyle: { fontSize: 14 },\n            subtextStyle: { fontSize: 12, color: \"#555\" },\n          },\n          graphic: {\n            type: \"text\",\n            left: \"center\",\n            top: \"middle\",\n            style: {\n              text: `该登录事件发生在非工作时段。\\n具体时间点: ${this.selectedEvent.rawEventData.timestamp}`,\n              textAlign: \"center\",\n              font: \"14px Microsoft YaHei\",\n            },\n          },\n          series: [],\n        };\n      } else {\n        // 其他事件类型或缺少具体信息\n        option = {\n          title: {\n            text: `事件证据 (类型: ${eventType})`,\n            subtext: \"此事件类型的详细证据展示待实现\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: { fontSize: 14 },\n            subtextStyle: { fontSize: 12, color: \"#888\" },\n          },\n          series: [],\n        };\n      }\n      this.evidenceChart.setOption(option, true);\n    },\n    getEventTypeTag(type) {\n      const typeMap = {\n        数据外发: \"danger\",\n        账户探测: \"warning\",\n        异常行为: \"warning\",\n        数据库异常: \"danger\",\n        可疑通信: \"danger\",\n      };\n      return typeMap[type] || \"info\";\n    },\n    getRiskLevelTag(level) {\n      const levelMap = {\n        高: \"danger\",\n        中: \"warning\",\n        低: \"info\",\n      };\n      return levelMap[level] || \"info\";\n    },\n    handleResize() {\n      this.threatRelationChart && this.threatRelationChart.resize();\n      this.evidenceChart && this.evidenceChart.resize();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n\n.analysis-content {\n  line-height: 1.6;\n  text-align: justify;\n}\n\n.analysis-content h3 {\n  margin-top: 20px;\n  color: #303133;\n  border-bottom: 1px solid #ebeef5;\n  padding-bottom: 8px;\n}\n\n.analysis-content h4 {\n  margin-top: 15px;\n  color: #409eff;\n}\n\n.analysis-content ul,\n.analysis-content ol {\n  padding-left: 20px;\n  margin: 10px 0;\n}\n\n.analysis-content li {\n  margin-bottom: 5px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}