{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        }\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    }\n  },\n  methods: {\n    showEmptyChart(chartInstance, chartElementId, message = \"暂无数据\") {\n      if (chartInstance) {\n        chartInstance.clear(); // 清除之前的图表内容\n        chartInstance.setOption({\n          title: {\n            text: message,\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              color: \"#888\",\n              fontSize: 16\n            }\n          }\n        });\n      } else {\n        // 如果图表实例未初始化，尝试获取DOM元素并显示文本\n        const chartDom = document.getElementById(chartElementId);\n        if (chartDom) {\n          chartDom.innerHTML = `<div style=\"text-align: center; padding-top: 50px; color: #888;\">${message}</div>`;\n        }\n      }\n    },\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [deptCheckRes, workDurationRes, webCatRes, deptEmailRes, loginSucFailRes, tcpProtoRes] = await Promise.all([fetch(\"/department_check_time_approx.json\"), fetch(\"/work_duration_distribution.json\"), fetch(\"/web_category_distribution.json\"), fetch(\"/department_email_activity.json\"), fetch(\"/login_success_fail.json\"), fetch(\"/tcp_protocol_distribution.json\")]);\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (this.departmentCheckTimeData && this.departmentCheckTimeData.length > 0) {\n          this.allDepartments = this.departmentCheckTimeData.map(d => d.department);\n          if (!this.selectedDepartment && this.allDepartments.length > 0) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        } else {\n          this.allDepartments = [\"暂无部门数据\"];\n          this.selectedDepartment = \"暂无部门数据\";\n        }\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n        this.$message.success(\"行为分析数据加载完成！\");\n        this.initializeAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    initializeAllCharts() {\n      this.$nextTick(() => {\n        this.initCheckTimeChart();\n        this.initWorkHoursChart();\n        this.initWebCategoryChart();\n        this.initServerAccessChart();\n        this.initNetworkFlowChart();\n        this.initEmailFrequencyChart();\n        this.initLoginSuccessChart();\n        this.initTcpProtocolChart();\n      });\n    },\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(document.getElementById(\"checkTimeChart\"));\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (!this.departmentCheckTimeData || this.departmentCheckTimeData.length === 0) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", \"部门打卡数据加载中或为空\");\n        return;\n      }\n      const departmentData = this.departmentCheckTimeData.find(d => d.department === this.selectedDepartment);\n      if (!departmentData || !departmentData.earliest_check_in || !departmentData.latest_check_out) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", `部门 [${this.selectedDepartment}] 暂无打卡数据`);\n        return;\n      }\n      const checkInTimes = departmentData.checkInDistribution.map(item => item.timeBin);\n      const checkInCounts = departmentData.checkInDistribution.map(item => item.count);\n      const checkOutTimes = departmentData.checkOutDistribution.map(item => item.timeBin);\n      const checkOutCounts = departmentData.checkOutDistribution.map(item => item.count);\n      const allTimeBins = [...new Set([...checkInTimes, ...checkOutTimes])].sort();\n      const formattedCheckInData = allTimeBins.map(bin => {\n        const found = departmentData.checkInDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map(bin => {\n        const found = departmentData.checkOutDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          data: [\"上班打卡\", \"下班打卡\"],\n          axisLabel: {\n            interval: 0\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"人数\"\n        }],\n        series: [{\n          name: \"上班打卡\",\n          type: \"bar\",\n          data: formattedCheckInData,\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }, {\n          name: \"下班打卡\",\n          type: \"bar\",\n          data: formattedCheckOutData,\n          itemStyle: {\n            color: \"#91CC75\"\n          }\n        }]\n      };\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(document.getElementById(\"workHoursChart\"));\n      this.updateWorkHoursChart();\n    },\n    updateWorkHoursChart() {\n      if (!this.workDurationDistributionData || this.workDurationDistributionData.length === 0) {\n        this.showEmptyChart(this.workHoursChart, \"workHoursChart\", \"员工工时分布数据加载中或为空\");\n        return;\n      }\n      const durationRanges = this.workDurationDistributionData.map(item => item.durationRange);\n      const counts = this.workDurationDistributionData.map(item => item.count);\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\"\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\"\n        },\n        series: [{\n          name: \"工作时长分布\",\n          type: \"bar\",\n          data: counts,\n          itemStyle: {\n            color: \"#FAC858\"\n          }\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(document.getElementById(\"webCategoryChart\"));\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", \"网页分类数据加载中或为空\");\n        return;\n      }\n      const dataForRange = this.webCategoryData[this.webVisitTimeRange];\n      if (!dataForRange || Object.keys(dataForRange).length === 0) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", `时段 [${this.webVisitTimeRange}] 暂无网页访问数据`);\n        return;\n      }\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n      if (this.webVisitTimeRange === \"workHours\" && this.webCategoryData.workHours) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"afterHours\" && this.webCategoryData.afterHours) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"allDay\" && this.webCategoryData.allDay) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n      if (categoryData.length === 0) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", `暂无${titleText}数据`);\n        return;\n      }\n      const dataForPie = categoryData.map(item => ({\n        name: item.category,\n        value: item.count\n      }));\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map(item => item.name)\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: [\"50%\", \"70%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"18\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: dataForPie\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      // 模拟数据或真实数据加载逻辑\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(document.getElementById(\"serverAccessChart\"));\n      // 示例：this.updateServerAccessChart(); 或直接显示模拟数据/空状态\n      this.showEmptyChart(this.serverAccessChart, \"serverAccessChart\", \"服务器/数据库访问数据待实现\");\n      // 暂时使用模拟数据\n      // const option = { ... };\n      // this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      // 模拟数据或真实数据加载逻辑\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(document.getElementById(\"networkFlowChart\"));\n      // 示例：this.updateNetworkFlowChart(); 或直接显示模拟数据/空状态\n      this.showEmptyChart(this.networkFlowChart, \"networkFlowChart\", \"网络流量时序数据待实现\");\n      // 暂时使用模拟数据\n      // const option = { ... };\n      // this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(document.getElementById(\"emailFrequencyChart\"));\n      this.updateEmailFrequencyChart();\n    },\n    updateEmailFrequencyChart() {\n      if (!this.departmentEmailActivityData || this.departmentEmailActivityData.length === 0) {\n        this.showEmptyChart(this.emailFrequencyChart, \"emailFrequencyChart\", \"部门邮件活动数据加载中或为空\");\n        return;\n      }\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\"\n        },\n        series: [{\n          name: \"发送邮件\",\n          type: \"bar\",\n          data: [32, 38, 30, 25, 22]\n        }, {\n          name: \"接收邮件\",\n          type: \"bar\",\n          data: [45, 50, 42, 38, 30]\n        }]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(document.getElementById(\"loginSuccessChart\"));\n      this.updateLoginSuccessChart();\n    },\n    updateLoginSuccessChart() {\n      if (!this.loginSuccessFailData || Object.keys(this.loginSuccessFailData).length === 0) {\n        this.showEmptyChart(this.loginSuccessChart, \"loginSuccessChart\", \"登录成功/失败数据加载中或为空\");\n        return;\n      }\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\"\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\"\n        },\n        series: [{\n          name: \"登录成功率\",\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: [98.5, 97.2, 98.1, 99.2, 96.8],\n          itemStyle: {\n            color: function (params) {\n              // 根据值的大小定义不同的颜色\n              if (params.value > 98) {\n                return \"#67C23A\"; // 高成功率为绿色\n              } else if (params.value > 97) {\n                return \"#E6A23C\"; // 中等成功率为黄色\n              } else {\n                return \"#F56C6C\"; // 低成功率为红色\n              }\n            }\n          }\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(document.getElementById(\"tcpProtocolChart\"));\n      this.updateTcpProtocolChart();\n    },\n    updateTcpProtocolChart() {\n      if (!this.tcpProtocolData || Object.keys(this.tcpProtocolData).length === 0) {\n        this.showEmptyChart(this.tcpProtocolChart, \"tcpProtocolChart\", \"TCP协议数据加载中或为空\");\n        return;\n      }\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\"HTTP/HTTPS\", \"SSH/SFTP\", \"FTP\", \"SMTP\", \"MySQL\", \"MongoDB\", \"PostgreSQL\", \"其他\"]\n        },\n        series: [{\n          name: \"协议使用\",\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: [{\n            value: 45,\n            name: \"HTTP/HTTPS\"\n          }, {\n            value: 15,\n            name: \"SSH/SFTP\"\n          }, {\n            value: 10,\n            name: \"FTP\"\n          }, {\n            value: 8,\n            name: \"SMTP\"\n          }, {\n            value: 7,\n            name: \"MySQL\"\n          }, {\n            value: 6,\n            name: \"MongoDB\"\n          }, {\n            value: 5,\n            name: \"PostgreSQL\"\n          }, {\n            value: 4,\n            name: \"其他\"\n          }],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","departments","pickerOptions","disabledDate","time","start","Date","end","getTime","isLoading","allDepartments","departmentCheckTimeData","workDurationDistributionData","webCategoryData","departmentEmailActivityData","loginSuccessFailData","tcpProtocolData","mounted","loadBehaviorData","initCheckTimeChart","initWorkHoursChart","initWebCategoryChart","initServerAccessChart","initNetworkFlowChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","methods","showEmptyChart","chartInstance","chartElementId","message","clear","setOption","title","text","left","top","textStyle","color","fontSize","chartDom","document","getElementById","innerHTML","$message","info","deptCheckRes","workDurationRes","webCatRes","deptEmailRes","loginSucFailRes","tcpProtoRes","Promise","all","fetch","ok","Error","json","length","map","d","department","success","initializeAllCharts","error","console","$nextTick","resize","dispose","$echarts","init","updateCheckTimeChart","departmentData","find","earliest_check_in","latest_check_out","checkInTimes","checkInDistribution","item","timeBin","checkInCounts","count","checkOutTimes","checkOutDistribution","checkOutCounts","allTimeBins","Set","sort","formattedCheckInData","bin","found","formattedCheckOutData","option","tooltip","trigger","formatter","params","value","grid","right","bottom","containLabel","xAxis","type","axisLabel","interval","yAxis","series","itemStyle","updateWorkHoursChart","durationRanges","durationRange","counts","axisPointer","legend","updateWebCategoryChart","dataForRange","Object","keys","categoryData","titleText","workHours","afterHours","allDay","dataForPie","category","orient","radius","avoidLabelOverlap","label","show","position","emphasis","fontWeight","labelLine","updateEmailFrequencyChart","updateLoginSuccessChart","min","max","barWidth","updateTcpProtocolChart","center","shadowBlur","shadowOffsetX","shadowColor"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\n  <div class=\"behavior\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工日常工作行为分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"分析各部门员工的正常工作模式和行为特征\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对监控数据的分析，我们总结了公司不同部门员工的工作行为模式，包括工作时间、网络活动、邮件沟通等。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工打卡时间分析</span>\n            <el-select\n              v-model=\"selectedDepartment\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-option\n                v-for=\"dept in departments\"\n                :key=\"dept\"\n                :label=\"dept\"\n                :value=\"dept\"\n              ></el-option>\n            </el-select>\n          </div>\n          <div id=\"checkTimeChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工工作时长分布</span>\n          </div>\n          <div id=\"workHoursChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工网页访问类别分析</span>\n            <el-radio-group\n              v-model=\"webVisitTimeRange\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-radio-button label=\"workHours\">工作时间</el-radio-button>\n              <el-radio-button label=\"afterHours\">非工作时间</el-radio-button>\n              <el-radio-button label=\"allDay\">全天</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div id=\"webCategoryChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>服务器/数据库访问频率</span>\n          </div>\n          <div id=\"serverAccessChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>网络流量时序分析</span>\n            <el-date-picker\n              v-model=\"selectedDate\"\n              type=\"date\"\n              format=\"yyyy-MM-dd\"\n              value-format=\"yyyy-MM-dd\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\"\n              style=\"float: right; margin-right: 10px; width: 150px\"\n              size=\"mini\"\n            >\n            </el-date-picker>\n          </div>\n          <div id=\"networkFlowChart\" style=\"width: 100%; height: 400px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>邮件通信频率（按部门）</span>\n          </div>\n          <div\n            id=\"emailFrequencyChart\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>登录成功率</span>\n          </div>\n          <div id=\"loginSuccessChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>TCP协议使用分布</span>\n          </div>\n          <div id=\"tcpProtocolChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        },\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    },\n  },\n  methods: {\n    showEmptyChart(chartInstance, chartElementId, message = \"暂无数据\") {\n      if (chartInstance) {\n        chartInstance.clear(); // 清除之前的图表内容\n        chartInstance.setOption({\n          title: {\n            text: message,\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              color: \"#888\",\n              fontSize: 16,\n            },\n          },\n        });\n      } else {\n        // 如果图表实例未初始化，尝试获取DOM元素并显示文本\n        const chartDom = document.getElementById(chartElementId);\n        if (chartDom) {\n          chartDom.innerHTML = `<div style=\"text-align: center; padding-top: 50px; color: #888;\">${message}</div>`;\n        }\n      }\n    },\n\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [\n          deptCheckRes,\n          workDurationRes,\n          webCatRes,\n          deptEmailRes,\n          loginSucFailRes,\n          tcpProtoRes,\n        ] = await Promise.all([\n          fetch(\"/department_check_time_approx.json\"),\n          fetch(\"/work_duration_distribution.json\"),\n          fetch(\"/web_category_distribution.json\"),\n          fetch(\"/department_email_activity.json\"),\n          fetch(\"/login_success_fail.json\"),\n          fetch(\"/tcp_protocol_distribution.json\"),\n        ]);\n\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (\n          this.departmentCheckTimeData &&\n          this.departmentCheckTimeData.length > 0\n        ) {\n          this.allDepartments = this.departmentCheckTimeData.map(\n            (d) => d.department\n          );\n          if (!this.selectedDepartment && this.allDepartments.length > 0) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        } else {\n          this.allDepartments = [\"暂无部门数据\"];\n          this.selectedDepartment = \"暂无部门数据\";\n        }\n\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n\n        this.$message.success(\"行为分析数据加载完成！\");\n        this.initializeAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    initializeAllCharts() {\n      this.$nextTick(() => {\n        this.initCheckTimeChart();\n        this.initWorkHoursChart();\n        this.initWebCategoryChart();\n        this.initServerAccessChart();\n        this.initNetworkFlowChart();\n        this.initEmailFrequencyChart();\n        this.initLoginSuccessChart();\n        this.initTcpProtocolChart();\n      });\n    },\n\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(\n        document.getElementById(\"checkTimeChart\")\n      );\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (\n        !this.departmentCheckTimeData ||\n        this.departmentCheckTimeData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          \"部门打卡数据加载中或为空\"\n        );\n        return;\n      }\n\n      const departmentData = this.departmentCheckTimeData.find(\n        (d) => d.department === this.selectedDepartment\n      );\n\n      if (\n        !departmentData ||\n        !departmentData.earliest_check_in ||\n        !departmentData.latest_check_out\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          `部门 [${this.selectedDepartment}] 暂无打卡数据`\n        );\n        return;\n      }\n\n      const checkInTimes = departmentData.checkInDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkInCounts = departmentData.checkInDistribution.map(\n        (item) => item.count\n      );\n      const checkOutTimes = departmentData.checkOutDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkOutCounts = departmentData.checkOutDistribution.map(\n        (item) => item.count\n      );\n\n      const allTimeBins = [\n        ...new Set([...checkInTimes, ...checkOutTimes]),\n      ].sort();\n\n      const formattedCheckInData = allTimeBins.map((bin) => {\n        const found = departmentData.checkInDistribution.find(\n          (d) => d.timeBin === bin\n        );\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map((bin) => {\n        const found = departmentData.checkOutDistribution.find(\n          (d) => d.timeBin === bin\n        );\n        return found ? found.count : 0;\n      });\n\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          },\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: [\"上班打卡\", \"下班打卡\"],\n            axisLabel: {\n              interval: 0,\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"人数\",\n          },\n        ],\n        series: [\n          {\n            name: \"上班打卡\",\n            type: \"bar\",\n            data: formattedCheckInData,\n            itemStyle: { color: \"#5470C6\" },\n          },\n          {\n            name: \"下班打卡\",\n            type: \"bar\",\n            data: formattedCheckOutData,\n            itemStyle: { color: \"#91CC75\" },\n          },\n        ],\n      };\n\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(\n        document.getElementById(\"workHoursChart\")\n      );\n      this.updateWorkHoursChart();\n    },\n    updateWorkHoursChart() {\n      if (\n        !this.workDurationDistributionData ||\n        this.workDurationDistributionData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.workHoursChart,\n          \"workHoursChart\",\n          \"员工工时分布数据加载中或为空\"\n        );\n        return;\n      }\n\n      const durationRanges = this.workDurationDistributionData.map(\n        (item) => item.durationRange\n      );\n      const counts = this.workDurationDistributionData.map(\n        (item) => item.count\n      );\n\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\",\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\",\n        },\n        series: [\n          {\n            name: \"工作时长分布\",\n            type: \"bar\",\n            data: counts,\n            itemStyle: { color: \"#FAC858\" },\n          },\n        ],\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(\n        document.getElementById(\"webCategoryChart\")\n      );\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          \"网页分类数据加载中或为空\"\n        );\n        return;\n      }\n\n      const dataForRange = this.webCategoryData[this.webVisitTimeRange];\n\n      if (!dataForRange || Object.keys(dataForRange).length === 0) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          `时段 [${this.webVisitTimeRange}] 暂无网页访问数据`\n        );\n        return;\n      }\n\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n\n      if (\n        this.webVisitTimeRange === \"workHours\" &&\n        this.webCategoryData.workHours\n      ) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"afterHours\" &&\n        this.webCategoryData.afterHours\n      ) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"allDay\" &&\n        this.webCategoryData.allDay\n      ) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n\n      if (categoryData.length === 0) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          `暂无${titleText}数据`\n        );\n        return;\n      }\n\n      const dataForPie = categoryData.map((item) => ({\n        name: item.category,\n        value: item.count,\n      }));\n\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10,\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map((item) => item.name),\n        },\n        series: [\n          {\n            name: \"访问类别\",\n            type: \"pie\",\n            radius: [\"50%\", \"70%\"],\n            avoidLabelOverlap: false,\n            label: {\n              show: false,\n              position: \"center\",\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: \"18\",\n                fontWeight: \"bold\",\n              },\n            },\n            labelLine: {\n              show: false,\n            },\n            data: dataForPie,\n          },\n        ],\n      };\n\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      // 模拟数据或真实数据加载逻辑\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(\n        document.getElementById(\"serverAccessChart\")\n      );\n      // 示例：this.updateServerAccessChart(); 或直接显示模拟数据/空状态\n      this.showEmptyChart(\n        this.serverAccessChart,\n        \"serverAccessChart\",\n        \"服务器/数据库访问数据待实现\"\n      );\n      // 暂时使用模拟数据\n      // const option = { ... };\n      // this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      // 模拟数据或真实数据加载逻辑\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(\n        document.getElementById(\"networkFlowChart\")\n      );\n      // 示例：this.updateNetworkFlowChart(); 或直接显示模拟数据/空状态\n      this.showEmptyChart(\n        this.networkFlowChart,\n        \"networkFlowChart\",\n        \"网络流量时序数据待实现\"\n      );\n      // 暂时使用模拟数据\n      // const option = { ... };\n      // this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(\n        document.getElementById(\"emailFrequencyChart\")\n      );\n      this.updateEmailFrequencyChart();\n    },\n    updateEmailFrequencyChart() {\n      if (\n        !this.departmentEmailActivityData ||\n        this.departmentEmailActivityData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.emailFrequencyChart,\n          \"emailFrequencyChart\",\n          \"部门邮件活动数据加载中或为空\"\n        );\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\",\n        },\n        series: [\n          {\n            name: \"发送邮件\",\n            type: \"bar\",\n            data: [32, 38, 30, 25, 22],\n          },\n          {\n            name: \"接收邮件\",\n            type: \"bar\",\n            data: [45, 50, 42, 38, 30],\n          },\n        ],\n      };\n\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(\n        document.getElementById(\"loginSuccessChart\")\n      );\n      this.updateLoginSuccessChart();\n    },\n    updateLoginSuccessChart() {\n      if (\n        !this.loginSuccessFailData ||\n        Object.keys(this.loginSuccessFailData).length === 0\n      ) {\n        this.showEmptyChart(\n          this.loginSuccessChart,\n          \"loginSuccessChart\",\n          \"登录成功/失败数据加载中或为空\"\n        );\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\",\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\",\n        },\n        series: [\n          {\n            name: \"登录成功率\",\n            type: \"bar\",\n            barWidth: \"60%\",\n            data: [98.5, 97.2, 98.1, 99.2, 96.8],\n            itemStyle: {\n              color: function (params) {\n                // 根据值的大小定义不同的颜色\n                if (params.value > 98) {\n                  return \"#67C23A\"; // 高成功率为绿色\n                } else if (params.value > 97) {\n                  return \"#E6A23C\"; // 中等成功率为黄色\n                } else {\n                  return \"#F56C6C\"; // 低成功率为红色\n                }\n              },\n            },\n          },\n        ],\n      };\n\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(\n        document.getElementById(\"tcpProtocolChart\")\n      );\n      this.updateTcpProtocolChart();\n    },\n    updateTcpProtocolChart() {\n      if (\n        !this.tcpProtocolData ||\n        Object.keys(this.tcpProtocolData).length === 0\n      ) {\n        this.showEmptyChart(\n          this.tcpProtocolChart,\n          \"tcpProtocolChart\",\n          \"TCP协议数据加载中或为空\"\n        );\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\n            \"HTTP/HTTPS\",\n            \"SSH/SFTP\",\n            \"FTP\",\n            \"SMTP\",\n            \"MySQL\",\n            \"MongoDB\",\n            \"PostgreSQL\",\n            \"其他\",\n          ],\n        },\n        series: [\n          {\n            name: \"协议使用\",\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"60%\"],\n            data: [\n              { value: 45, name: \"HTTP/HTTPS\" },\n              { value: 15, name: \"SSH/SFTP\" },\n              { value: 10, name: \"FTP\" },\n              { value: 8, name: \"SMTP\" },\n              { value: 7, name: \"MySQL\" },\n              { value: 6, name: \"MongoDB\" },\n              { value: 5, name: \"PostgreSQL\" },\n              { value: 4, name: \"其他\" },\n            ],\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n          },\n        ],\n      };\n\n      this.tcpProtocolChart.setOption(option);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":";;;;;;;;;;AAyIA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,cAAA;MACAC,cAAA;MACAC,gBAAA;MACAC,iBAAA;MACAC,gBAAA;MACAC,mBAAA;MACAC,iBAAA;MACAC,gBAAA;MACAC,kBAAA;MACAC,iBAAA;MACAC,YAAA;MACAC,WAAA;MACAC,aAAA;QACAC,aAAAC,IAAA;UACA;UACA,MAAAC,KAAA,OAAAC,IAAA;UACA,MAAAC,GAAA,OAAAD,IAAA;UACA,OAAAF,IAAA,CAAAI,OAAA,KAAAH,KAAA,IAAAD,IAAA,CAAAI,OAAA,KAAAD,GAAA;QACA;MACA;MACAE,SAAA;MACAC,cAAA;MACAC,uBAAA;MACAC,4BAAA;MACAC,eAAA;MACAC,2BAAA;MACAC,oBAAA;MACAC,eAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,gBAAA;IACA,KAAAC,kBAAA;IACA,KAAAC,kBAAA;IACA,KAAAC,oBAAA;IACA,KAAAC,qBAAA;IACA,KAAAC,oBAAA;IACA,KAAAC,uBAAA;IACA,KAAAC,qBAAA;IACA,KAAAC,oBAAA;IAEAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;EACA;EACAC,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,YAAA;EACA;EACAG,KAAA;IACAlC,mBAAA;MACA,SAAAa,uBAAA,OAAAQ,kBAAA;IACA;IACApB,kBAAA;MACA,SAAAc,eAAA,OAAAQ,oBAAA;IACA;IACArB,aAAA;MACA,SAAAN,gBAAA,OAAA6B,oBAAA;IACA;EACA;EACAU,OAAA;IACAC,eAAAC,aAAA,EAAAC,cAAA,EAAAC,OAAA;MACA,IAAAF,aAAA;QACAA,aAAA,CAAAG,KAAA;QACAH,aAAA,CAAAI,SAAA;UACAC,KAAA;YACAC,IAAA,EAAAJ,OAAA;YACAK,IAAA;YACAC,GAAA;YACAC,SAAA;cACAC,KAAA;cACAC,QAAA;YACA;UACA;QACA;MACA;QACA;QACA,MAAAC,QAAA,GAAAC,QAAA,CAAAC,cAAA,CAAAb,cAAA;QACA,IAAAW,QAAA;UACAA,QAAA,CAAAG,SAAA,uEAAAb,OAAA;QACA;MACA;IACA;IAEA,MAAAnB,iBAAA;MACA,KAAAT,SAAA;MACA,KAAA0C,QAAA,CAAAC,IAAA;MACA;QACA,OACAC,YAAA,EACAC,eAAA,EACAC,SAAA,EACAC,YAAA,EACAC,eAAA,EACAC,WAAA,CACA,SAAAC,OAAA,CAAAC,GAAA,EACAC,KAAA,wCACAA,KAAA,sCACAA,KAAA,qCACAA,KAAA,qCACAA,KAAA,8BACAA,KAAA,oCACA;QAEA,KAAAR,YAAA,CAAAS,EAAA,YAAAC,KAAA;QACA,KAAApD,uBAAA,SAAA0C,YAAA,CAAAW,IAAA;QACA,IACA,KAAArD,uBAAA,IACA,KAAAA,uBAAA,CAAAsD,MAAA,MACA;UACA,KAAAvD,cAAA,QAAAC,uBAAA,CAAAuD,GAAA,CACAC,CAAA,IAAAA,CAAA,CAAAC,UACA;UACA,UAAAtE,kBAAA,SAAAY,cAAA,CAAAuD,MAAA;YACA,KAAAnE,kBAAA,QAAAY,cAAA;UACA;QACA;UACA,KAAAA,cAAA;UACA,KAAAZ,kBAAA;QACA;QAEA,KAAAwD,eAAA,CAAAQ,EAAA,YAAAC,KAAA;QACA,KAAAnD,4BAAA,SAAA0C,eAAA,CAAAU,IAAA;QAEA,KAAAT,SAAA,CAAAO,EAAA,YAAAC,KAAA;QACA,KAAAlD,eAAA,SAAA0C,SAAA,CAAAS,IAAA;QAEA,KAAAR,YAAA,CAAAM,EAAA,YAAAC,KAAA;QACA,KAAAjD,2BAAA,SAAA0C,YAAA,CAAAQ,IAAA;QAEA,KAAAP,eAAA,CAAAK,EAAA,YAAAC,KAAA;QACA,KAAAhD,oBAAA,SAAA0C,eAAA,CAAAO,IAAA;QAEA,KAAAN,WAAA,CAAAI,EAAA,YAAAC,KAAA;QACA,KAAA/C,eAAA,SAAA0C,WAAA,CAAAM,IAAA;QAEA,KAAAb,QAAA,CAAAkB,OAAA;QACA,KAAAC,mBAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAApB,QAAA,CAAAoB,KAAA,cAAAA,KAAA,CAAAlC,OAAA;MACA;QACA,KAAA5B,SAAA;MACA;IACA;IAEA6D,oBAAA;MACA,KAAAG,SAAA;QACA,KAAAtD,kBAAA;QACA,KAAAC,kBAAA;QACA,KAAAC,oBAAA;QACA,KAAAC,qBAAA;QACA,KAAAC,oBAAA;QACA,KAAAC,uBAAA;QACA,KAAAC,qBAAA;QACA,KAAAC,oBAAA;MACA;IACA;IAEAG,aAAA;MACA,KAAAvC,cAAA,SAAAA,cAAA,CAAAoF,MAAA;MACA,KAAAnF,cAAA,SAAAA,cAAA,CAAAmF,MAAA;MACA,KAAAlF,gBAAA,SAAAA,gBAAA,CAAAkF,MAAA;MACA,KAAAjF,iBAAA,SAAAA,iBAAA,CAAAiF,MAAA;MACA,KAAAhF,gBAAA,SAAAA,gBAAA,CAAAgF,MAAA;MACA,KAAA/E,mBAAA,SAAAA,mBAAA,CAAA+E,MAAA;MACA,KAAA9E,iBAAA,SAAAA,iBAAA,CAAA8E,MAAA;MACA,KAAA7E,gBAAA,SAAAA,gBAAA,CAAA6E,MAAA;IACA;IACAvD,mBAAA;MACA,SAAA7B,cAAA;QACA,KAAAA,cAAA,CAAAqF,OAAA;MACA;MACA,KAAArF,cAAA,QAAAsF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,kBACA;MACA,KAAA6B,oBAAA;IACA;IACAA,qBAAA;MACA,IACA,MAAAnE,uBAAA,IACA,KAAAA,uBAAA,CAAAsD,MAAA,QACA;QACA,KAAA/B,cAAA,CACA,KAAA5C,cAAA,EACA,kBACA,cACA;QACA;MACA;MAEA,MAAAyF,cAAA,QAAApE,uBAAA,CAAAqE,IAAA,CACAb,CAAA,IAAAA,CAAA,CAAAC,UAAA,UAAAtE,kBACA;MAEA,IACA,CAAAiF,cAAA,IACA,CAAAA,cAAA,CAAAE,iBAAA,IACA,CAAAF,cAAA,CAAAG,gBAAA,EACA;QACA,KAAAhD,cAAA,CACA,KAAA5C,cAAA,EACA,kBACA,YAAAQ,kBAAA,UACA;QACA;MACA;MAEA,MAAAqF,YAAA,GAAAJ,cAAA,CAAAK,mBAAA,CAAAlB,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAC,OACA;MACA,MAAAC,aAAA,GAAAR,cAAA,CAAAK,mBAAA,CAAAlB,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAG,KACA;MACA,MAAAC,aAAA,GAAAV,cAAA,CAAAW,oBAAA,CAAAxB,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAC,OACA;MACA,MAAAK,cAAA,GAAAZ,cAAA,CAAAW,oBAAA,CAAAxB,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAG,KACA;MAEA,MAAAI,WAAA,IACA,OAAAC,GAAA,KAAAV,YAAA,KAAAM,aAAA,GACA,CAAAK,IAAA;MAEA,MAAAC,oBAAA,GAAAH,WAAA,CAAA1B,GAAA,CAAA8B,GAAA;QACA,MAAAC,KAAA,GAAAlB,cAAA,CAAAK,mBAAA,CAAAJ,IAAA,CACAb,CAAA,IAAAA,CAAA,CAAAmB,OAAA,KAAAU,GACA;QACA,OAAAC,KAAA,GAAAA,KAAA,CAAAT,KAAA;MACA;MACA,MAAAU,qBAAA,GAAAN,WAAA,CAAA1B,GAAA,CAAA8B,GAAA;QACA,MAAAC,KAAA,GAAAlB,cAAA,CAAAW,oBAAA,CAAAV,IAAA,CACAb,CAAA,IAAAA,CAAA,CAAAmB,OAAA,KAAAU,GACA;QACA,OAAAC,KAAA,GAAAA,KAAA,CAAAT,KAAA;MACA;MAEA,MAAAW,MAAA;QACA3D,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA0D,OAAA;UACAC,OAAA;UACAC,SAAA,WAAAA,CAAAC,MAAA;YACA,UAAAA,MAAA,CAAAnH,IAAA,KAAAmH,MAAA,CAAAlH,IAAA,CAAAD,IAAA,cAAAmH,MAAA,CAAAlH,IAAA,CAAAmH,KAAA,gBAAAD,MAAA,CAAAlH,IAAA,CAAAmH,KAAA;UACA;QACA;QACAC,IAAA;UACA/D,IAAA;UACAgE,KAAA;UACAC,MAAA;UACAhE,GAAA;UACAiE,YAAA;QACA;QACAC,KAAA,GACA;UACAC,IAAA;UACAzH,IAAA;UACA0H,SAAA;YACAC,QAAA;UACA;QACA,EACA;QACAC,KAAA,GACA;UACAH,IAAA;UACA1H,IAAA;QACA,EACA;QACA8H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAzH,IAAA,EAAA0G,oBAAA;UACAoB,SAAA;YAAAtE,KAAA;UAAA;QACA,GACA;UACAzD,IAAA;UACA0H,IAAA;UACAzH,IAAA,EAAA6G,qBAAA;UACAiB,SAAA;YAAAtE,KAAA;UAAA;QACA;MAEA;MAEA,KAAAvD,cAAA,CAAAiD,SAAA,CAAA4D,MAAA;IACA;IACA/E,mBAAA;MACA,SAAA7B,cAAA;QACA,KAAAA,cAAA,CAAAoF,OAAA;MACA;MACA,KAAApF,cAAA,QAAAqF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,kBACA;MACA,KAAAmE,oBAAA;IACA;IACAA,qBAAA;MACA,IACA,MAAAxG,4BAAA,IACA,KAAAA,4BAAA,CAAAqD,MAAA,QACA;QACA,KAAA/B,cAAA,CACA,KAAA3C,cAAA,EACA,kBACA,gBACA;QACA;MACA;MAEA,MAAA8H,cAAA,QAAAzG,4BAAA,CAAAsD,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAiC,aACA;MACA,MAAAC,MAAA,QAAA3G,4BAAA,CAAAsD,GAAA,CACAmB,IAAA,IAAAA,IAAA,CAAAG,KACA;MAEA,MAAAW,MAAA;QACA3D,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA0D,OAAA;UACAC,OAAA;UACAmB,WAAA;YACAV,IAAA;UACA;QACA;QACAW,MAAA;UACApI,IAAA;UACAsD,GAAA;QACA;QACA8D,IAAA;UACA/D,IAAA;UACAgE,KAAA;UACAC,MAAA;UACAhE,GAAA;UACAiE,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAzH,IAAA,EAAAgI,cAAA;UACAjI,IAAA;QACA;QACA6H,KAAA;UACAH,IAAA;UACA1H,IAAA;QACA;QACA8H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAzH,IAAA,EAAAkI,MAAA;UACAJ,SAAA;YAAAtE,KAAA;UAAA;QACA;MAEA;MACA,KAAAtD,cAAA,CAAAgD,SAAA,CAAA4D,MAAA;IACA;IACA9E,qBAAA;MACA,SAAA7B,gBAAA;QACA,KAAAA,gBAAA,CAAAmF,OAAA;MACA;MACA,KAAAnF,gBAAA,QAAAoF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,oBACA;MACA,KAAAyE,sBAAA;IACA;IACAA,uBAAA;MACA,UAAA7G,eAAA;QACA,KAAAqB,cAAA,CACA,KAAA1C,gBAAA,EACA,oBACA,cACA;QACA;MACA;MAEA,MAAAmI,YAAA,QAAA9G,eAAA,MAAAd,iBAAA;MAEA,KAAA4H,YAAA,IAAAC,MAAA,CAAAC,IAAA,CAAAF,YAAA,EAAA1D,MAAA;QACA,KAAA/B,cAAA,CACA,KAAA1C,gBAAA,EACA,oBACA,YAAAO,iBAAA,YACA;QACA;MACA;MAEA,IAAA+H,YAAA;MACA,IAAAC,SAAA;MAEA,IACA,KAAAhI,iBAAA,oBACA,KAAAc,eAAA,CAAAmH,SAAA,EACA;QACAF,YAAA,QAAAjH,eAAA,CAAAmH,SAAA;QACAD,SAAA;MACA,WACA,KAAAhI,iBAAA,qBACA,KAAAc,eAAA,CAAAoH,UAAA,EACA;QACAH,YAAA,QAAAjH,eAAA,CAAAoH,UAAA;QACAF,SAAA;MACA,WACA,KAAAhI,iBAAA,iBACA,KAAAc,eAAA,CAAAqH,MAAA,EACA;QACAJ,YAAA,QAAAjH,eAAA,CAAAqH,MAAA;QACAH,SAAA;MACA;MAEA,IAAAD,YAAA,CAAA7D,MAAA;QACA,KAAA/B,cAAA,CACA,KAAA1C,gBAAA,EACA,oBACA,KAAAuI,SAAA,IACA;QACA;MACA;MAEA,MAAAI,UAAA,GAAAL,YAAA,CAAA5D,GAAA,CAAAmB,IAAA;QACAjG,IAAA,EAAAiG,IAAA,CAAA+C,QAAA;QACA5B,KAAA,EAAAnB,IAAA,CAAAG;MACA;MAEA,MAAAW,MAAA;QACA3D,KAAA;UACAC,IAAA,EAAAsF,SAAA;UACArF,IAAA;UACAC,GAAA;QACA;QACAyD,OAAA;UACAC,OAAA;UACAC,SAAA;QACA;QACAmB,MAAA;UACAY,MAAA;UACA3F,IAAA;UACAC,GAAA;UACAtD,IAAA,EAAA8I,UAAA,CAAAjE,GAAA,CAAAmB,IAAA,IAAAA,IAAA,CAAAjG,IAAA;QACA;QACA8H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAwB,MAAA;UACAC,iBAAA;UACAC,KAAA;YACAC,IAAA;YACAC,QAAA;UACA;UACAC,QAAA;YACAH,KAAA;cACAC,IAAA;cACA3F,QAAA;cACA8F,UAAA;YACA;UACA;UACAC,SAAA;YACAJ,IAAA;UACA;UACApJ,IAAA,EAAA8I;QACA;MAEA;MAEA,KAAA3I,gBAAA,CAAA+C,SAAA,CAAA4D,MAAA;IACA;IACA7E,sBAAA;MACA;MACA,SAAA7B,iBAAA;QACA,KAAAA,iBAAA,CAAAkF,OAAA;MACA;MACA,KAAAlF,iBAAA,QAAAmF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,qBACA;MACA;MACA,KAAAf,cAAA,CACA,KAAAzC,iBAAA,EACA,qBACA,gBACA;MACA;MACA;MACA;IACA;IACA8B,qBAAA;MACA;MACA,SAAA7B,gBAAA;QACA,KAAAA,gBAAA,CAAAiF,OAAA;MACA;MACA,KAAAjF,gBAAA,QAAAkF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,oBACA;MACA;MACA,KAAAf,cAAA,CACA,KAAAxC,gBAAA,EACA,oBACA,aACA;MACA;MACA;MACA;IACA;IACA8B,wBAAA;MACA,SAAA7B,mBAAA;QACA,KAAAA,mBAAA,CAAAgF,OAAA;MACA;MACA,KAAAhF,mBAAA,QAAAiF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,uBACA;MACA,KAAA6F,yBAAA;IACA;IACAA,0BAAA;MACA,IACA,MAAAhI,2BAAA,IACA,KAAAA,2BAAA,CAAAmD,MAAA,QACA;QACA,KAAA/B,cAAA,CACA,KAAAvC,mBAAA,EACA,uBACA,gBACA;QACA;MACA;MAEA,MAAAwG,MAAA;QACA3D,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA0D,OAAA;UACAC,OAAA;UACAmB,WAAA;YACAV,IAAA;UACA;QACA;QACAL,IAAA;UACA/D,IAAA;UACAgE,KAAA;UACAC,MAAA;UACAhE,GAAA;UACAiE,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAzH,IAAA;QACA;QACA4H,KAAA;UACAH,IAAA;UACA1H,IAAA;QACA;QACA8H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAzH,IAAA;QACA,GACA;UACAD,IAAA;UACA0H,IAAA;UACAzH,IAAA;QACA;MAEA;MAEA,KAAAM,mBAAA,CAAA4C,SAAA,CAAA4D,MAAA;IACA;IACA1E,sBAAA;MACA,SAAA7B,iBAAA;QACA,KAAAA,iBAAA,CAAA+E,OAAA;MACA;MACA,KAAA/E,iBAAA,QAAAgF,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,qBACA;MACA,KAAA8F,uBAAA;IACA;IACAA,wBAAA;MACA,IACA,MAAAhI,oBAAA,IACA6G,MAAA,CAAAC,IAAA,MAAA9G,oBAAA,EAAAkD,MAAA,QACA;QACA,KAAA/B,cAAA,CACA,KAAAtC,iBAAA,EACA,qBACA,iBACA;QACA;MACA;MAEA,MAAAuG,MAAA;QACA3D,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA0D,OAAA;UACAC,OAAA;UACAC,SAAA;QACA;QACAG,IAAA;UACA/D,IAAA;UACAgE,KAAA;UACAC,MAAA;UACAhE,GAAA;UACAiE,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACAzH,IAAA;QACA;QACA4H,KAAA;UACAH,IAAA;UACAkC,GAAA;UACAC,GAAA;UACA7J,IAAA;QACA;QACA8H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAoC,QAAA;UACA7J,IAAA;UACA8H,SAAA;YACAtE,KAAA,WAAAA,CAAA0D,MAAA;cACA;cACA,IAAAA,MAAA,CAAAC,KAAA;gBACA;cACA,WAAAD,MAAA,CAAAC,KAAA;gBACA;cACA;gBACA;cACA;YACA;UACA;QACA;MAEA;MAEA,KAAA5G,iBAAA,CAAA2C,SAAA,CAAA4D,MAAA;IACA;IACAzE,qBAAA;MACA,SAAA7B,gBAAA;QACA,KAAAA,gBAAA,CAAA8E,OAAA;MACA;MACA,KAAA9E,gBAAA,QAAA+E,QAAA,CAAAC,IAAA,CACA7B,QAAA,CAAAC,cAAA,oBACA;MACA,KAAAkG,sBAAA;IACA;IACAA,uBAAA;MACA,IACA,MAAAnI,eAAA,IACA4G,MAAA,CAAAC,IAAA,MAAA7G,eAAA,EAAAiD,MAAA,QACA;QACA,KAAA/B,cAAA,CACA,KAAArC,gBAAA,EACA,oBACA,eACA;QACA;MACA;MAEA,MAAAsG,MAAA;QACA3D,KAAA;UACAC,IAAA;UACAC,IAAA;QACA;QACA0D,OAAA;UACAC,OAAA;UACAC,SAAA;QACA;QACAmB,MAAA;UACAY,MAAA;UACA3F,IAAA;UACAC,GAAA;UACAtD,IAAA,GACA,cACA,YACA,OACA,QACA,SACA,WACA,cACA;QAEA;QACA6H,MAAA,GACA;UACA9H,IAAA;UACA0H,IAAA;UACAwB,MAAA;UACAc,MAAA;UACA/J,IAAA,GACA;YAAAmH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,GACA;YAAAoH,KAAA;YAAApH,IAAA;UAAA,EACA;UACAuJ,QAAA;YACAxB,SAAA;cACAkC,UAAA;cACAC,aAAA;cACAC,WAAA;YACA;UACA;QACA;MAEA;MAEA,KAAA1J,gBAAA,CAAA0C,SAAA,CAAA4D,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}