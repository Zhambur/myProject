{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      pickerOptions: {\n        disabledDate(time) {\n          const start = new Date(\"2017-11-01\").getTime();\n          const end = new Date(\"2017-11-30\").getTime();\n          return time.getTime() < start || time.getTime() > end;\n        }\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n      serverDBAccessData: [],\n      dailyNetworkTrafficData: []\n    };\n  },\n  async mounted() {\n    console.log(\"Behavior.vue mounted: Starting data load...\");\n    await this.loadBehaviorData();\n    console.log(\"Behavior.vue mounted: Data load complete. Scheduling chart initializations.\");\n    this.$nextTick(() => {\n      console.log(\"Behavior.vue mounted/$nextTick: Initializing charts...\");\n      this.initAllCharts();\n    });\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n    this.disposeAllCharts();\n  },\n  watch: {\n    selectedDepartment(newVal, oldVal) {\n      if (newVal !== oldVal && this.departmentCheckTimeData) {\n        console.log(`Watcher: selectedDepartment changed to ${newVal}. Re-initializing checkTimeChart.`);\n        this.initCheckTimeChart();\n      }\n    },\n    webVisitTimeRange(newVal, oldVal) {\n      if (newVal !== oldVal && this.webCategoryData) {\n        console.log(`Watcher: webVisitTimeRange changed to ${newVal}. Re-initializing webCategoryChart.`);\n        this.initWebCategoryChart();\n      }\n    },\n    selectedDate(newVal, oldVal) {\n      if (newVal !== oldVal && this.dailyNetworkTrafficData) {\n        // check specific data for this chart\n        console.log(`Watcher: selectedDate changed to ${newVal}. Re-initializing networkFlowChart.`);\n        this.initNetworkFlowChart();\n      }\n    }\n  },\n  methods: {\n    initAllCharts() {\n      this.initCheckTimeChart();\n      this.initWorkHoursChart();\n      this.initWebCategoryChart();\n      this.initServerAccessChart();\n      this.initNetworkFlowChart();\n      this.initEmailFrequencyChart();\n      this.initLoginSuccessChart();\n      this.initTcpProtocolChart();\n    },\n    disposeAllCharts() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n        this.checkTimeChart = null;\n      }\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n        this.workHoursChart = null;\n      }\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n        this.webCategoryChart = null;\n      }\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n        this.serverAccessChart = null;\n      }\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n        this.networkFlowChart = null;\n      }\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n        this.emailFrequencyChart = null;\n      }\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n        this.loginSuccessChart = null;\n      }\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n        this.tcpProtocolChart = null;\n      }\n      console.log(\"All charts disposed.\");\n    },\n    showEmptyChart(chartInstance, chartRefName, message = \"暂无数据\") {\n      const chartDom = this.$refs[chartRefName];\n      if (chartInstance) {\n        try {\n          chartInstance.clear();\n          chartInstance.setOption({\n            title: {\n              text: message,\n              left: \"center\",\n              top: \"center\",\n              textStyle: {\n                color: \"#888\",\n                fontSize: 16\n              }\n            },\n            xAxis: {},\n            yAxis: {},\n            series: []\n          });\n        } catch (e) {\n          console.error(`Error setting empty chart option for ${chartRefName}:`, e, chartInstance);\n          if (chartDom) chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message} (Error displaying chart)</div>`;\n        }\n      } else if (chartDom) {\n        chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n        console.log(`showEmptyChart: ${chartRefName} instance was null, set HTML directly.`);\n      } else {\n        console.error(`showEmptyChart: Cannot find DOM element for ${chartRefName} and chart instance is null.`);\n      }\n    },\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        // 首先加载所有部门名称\n        const allDeptsResponse = await fetch(\"/all_department_names.json\");\n        if (allDeptsResponse.ok) {\n          this.allDepartments = await allDeptsResponse.json();\n          console.log(\"已加载所有部门:\", this.allDepartments);\n          if (this.allDepartments.length > 0 && !this.selectedDepartment) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        }\n        const results = await Promise.allSettled([fetch(\"/department_check_time_approx.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load department_check_time_approx.json: ${res.statusText}`))), fetch(\"/work_duration_distribution.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load work_duration_distribution.json: ${res.statusText}`))), fetch(\"/web_category_distribution.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load web_category_distribution.json: ${res.statusText}`))), fetch(\"/department_email_activity.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load department_email_activity.json: ${res.statusText}`))), fetch(\"/login_success_fail.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load login_success_fail.json: ${res.statusText}`))), fetch(\"/tcp_protocol_distribution.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load tcp_protocol_distribution.json: ${res.statusText}`))), fetch(\"/server_database_access_frequency.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load server_database_access_frequency.json: ${res.statusText}`))), fetch(\"/daily_network_traffic.json\").then(res => res.ok ? res.json() : Promise.reject(new Error(`Failed to load daily_network_traffic.json: ${res.statusText}`)))]);\n        if (results[0].status === \"fulfilled\" && results[0].value) {\n          this.departmentCheckTimeData = results[0].value;\n          // 不再从这里更新 allDepartments，因为已经从 all_department_names.json 加载\n        } else {\n          console.error(\"Failed to load department check time data:\", results[0].reason);\n          this.departmentCheckTimeData = [];\n        }\n        this.workDurationDistributionData = results[1].status === \"fulfilled\" ? results[1].value : [];\n        this.webCategoryData = results[2].status === \"fulfilled\" ? results[2].value : null;\n        this.departmentEmailActivityData = results[3].status === \"fulfilled\" ? results[3].value : [];\n        this.loginSuccessFailData = results[4].status === \"fulfilled\" ? results[4].value : {};\n        this.tcpProtocolData = results[5].status === \"fulfilled\" ? results[5].value : [];\n        this.serverDBAccessData = results[6].status === \"fulfilled\" ? results[6].value : [];\n        this.dailyNetworkTrafficData = results[7].status === \"fulfilled\" ? results[7].value : [];\n        console.log(\"Department Check Time Data Loaded:\", this.departmentCheckTimeData);\n        console.log(\"Login Success/Fail Data:\", this.loginSuccessFailData);\n        this.$message.success(\"行为分析数据加载完成!\");\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message || \"未知错误\"}`);\n        // Initialize with empty data to prevent errors\n        this.departmentCheckTimeData = [];\n        this.workDurationDistributionData = [];\n        this.webCategoryData = null;\n        this.departmentEmailActivityData = [];\n        this.loginSuccessFailData = {};\n        this.tcpProtocolData = [];\n        this.serverDBAccessData = [];\n        this.dailyNetworkTrafficData = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    initCheckTimeChart() {\n      const chartDom = this.$refs.checkTimeChartRef;\n      if (!chartDom) {\n        console.error(\"initCheckTimeChart: DOM element 'checkTimeChartRef' not found.\");\n        return;\n      }\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(chartDom);\n      console.log(\"initCheckTimeChart: Initialized for department:\", this.selectedDepartment);\n      if (!this.departmentCheckTimeData || this.departmentCheckTimeData.length === 0) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChartRef\", \"打卡时间数据正在加载或无可用数据\");\n        console.log(\"initCheckTimeChart: No departmentCheckTimeData available.\");\n        return;\n      }\n      const selectedDeptData = this.departmentCheckTimeData.find(d => d.department === this.selectedDepartment);\n      if (!selectedDeptData || !selectedDeptData.checkInDistribution || !selectedDeptData.checkOutDistribution) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChartRef\", `部门 [${this.selectedDepartment}] 无打卡数据`);\n        console.log(`initCheckTimeChart: No data for selected department: ${this.selectedDepartment}`);\n        return;\n      }\n      const checkInTimes = selectedDeptData.checkInDistribution.map(item => item.timeBin);\n      const checkInCounts = selectedDeptData.checkInDistribution.map(item => item.count);\n      const checkOutTimes = selectedDeptData.checkOutDistribution.map(item => item.timeBin);\n      const checkOutCounts = selectedDeptData.checkOutDistribution.map(item => item.count);\n\n      // Ensure unique time bins for x-axis, sorted\n      const allTimeBins = [...new Set([...checkInTimes, ...checkOutTimes])].sort();\n      const option = {\n        title: {\n          text: `${this.selectedDepartment} 打卡时间分布`,\n          left: \"center\",\n          textStyle: {\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"上班打卡\", \"下班打卡\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: allTimeBins,\n          axisLabel: {\n            rotate: 45,\n            interval: \"auto\"\n          }\n        },\n        // Ensure allTimeBins is populated\n        yAxis: {\n          type: \"value\",\n          name: \"次数\"\n        },\n        series: [{\n          name: \"上班打卡\",\n          type: \"bar\",\n          stack: \"time\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: allTimeBins.map(bin => {\n            const index = checkInTimes.indexOf(bin);\n            return index !== -1 ? checkInCounts[index] : 0;\n          }),\n          itemStyle: {\n            color: \"#67C23A\"\n          }\n        }, {\n          name: \"下班打卡\",\n          type: \"bar\",\n          stack: \"time\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: allTimeBins.map(bin => {\n            const index = checkOutTimes.indexOf(bin);\n            return index !== -1 ? checkOutCounts[index] : 0;\n          }),\n          itemStyle: {\n            color: \"#409EFF\"\n          }\n        }]\n      };\n      try {\n        this.checkTimeChart.setOption(option);\n        console.log(\"initCheckTimeChart: Chart option set successfully for\", this.selectedDepartment);\n      } catch (e) {\n        console.error(\"Error setting chart option for checkTimeChart:\", e);\n      }\n    },\n    initWorkHoursChart() {\n      const chartDom = this.$refs.workHoursChartRef;\n      if (!chartDom) {\n        console.error(\"initWorkHoursChart: DOM element 'workHoursChartRef' not found.\");\n        return;\n      }\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(chartDom);\n      if (!this.workDurationDistributionData || this.workDurationDistributionData.length === 0) {\n        this.showEmptyChart(this.workHoursChart, \"workHoursChartRef\", \"工时数据正在加载或无可用数据\");\n        return;\n      }\n      const durationRanges = this.workDurationDistributionData.map(item => item.durationRange);\n      const counts = this.workDurationDistributionData.map(item => item.count);\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"10%\",\n          containLabel: true\n        },\n        // Adjusted bottom for labels\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          axisLabel: {\n            rotate: 45,\n            interval: 0\n          }\n        },\n        // Show all labels\n        yAxis: {\n          type: \"value\",\n          name: \"次数\"\n        },\n        series: [{\n          name: \"工作时长\",\n          type: \"bar\",\n          data: counts,\n          itemStyle: {\n            color: \"#F56C6C\"\n          },\n          barMaxWidth: 50\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      const chartDom = this.$refs.webCategoryChartRef;\n      if (!chartDom) {\n        console.error(\"initWebCategoryChart: DOM element 'webCategoryChartRef' not found.\");\n        return;\n      }\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(chartDom);\n      if (!this.webCategoryData || !this.webCategoryData[this.webVisitTimeRange] || this.webCategoryData[this.webVisitTimeRange].length === 0) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChartRef\", `网页访问数据(${this.webVisitTimeRange})正在加载或无可用数据`);\n        return;\n      }\n      const currentData = this.webCategoryData[this.webVisitTimeRange];\n      const categories = currentData.map(item => item.category);\n      const counts = currentData.map(item => item.count);\n      const option = {\n        title: {\n          text: `网页访问类别 (${this.webVisitTimeRange === \"workHours\" ? \"工作时间\" : this.webVisitTimeRange === \"afterHours\" ? \"非工作时间\" : \"全天\"})`,\n          left: \"center\",\n          textStyle: {\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b} : {c} ({d}%)\"\n        },\n        // Tooltip for pie chart\n        legend: {\n          orient: \"vertical\",\n          left: \"left\",\n          data: categories,\n          type: \"scroll\",\n          top: 30,\n          bottom: 20\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: \"65%\",\n          center: [\"60%\", \"55%\"],\n          // Adjusted center for legend\n          data: currentData.map(item => ({\n            name: item.category,\n            value: item.count\n          })),\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      const chartDom = this.$refs.serverAccessChartRef;\n      if (!chartDom) {\n        console.error(\"initServerAccessChart: DOM element 'serverAccessChartRef' not found.\");\n        return;\n      }\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(chartDom);\n\n      // serverDBAccessData is for tcplog based KNOWN_SERVERS_DATABASES.\n      // For login.csv based data, you might have another data property or need to fetch/process `employee_database_access.json` / `database_server_summary.json`\n      const dataToDisplay = this.serverDBAccessData; // This currently uses server_database_access_frequency.json\n\n      if (!dataToDisplay || dataToDisplay.length === 0) {\n        this.showEmptyChart(this.serverAccessChart, \"serverAccessChartRef\", \"服务器/数据库访问数据正在加载或无可用数据\");\n        return;\n      }\n      const serverNames = dataToDisplay.map(item => item.name); // 'name' from server_database_access_frequency.json\n      const accessCounts = dataToDisplay.map(item => item.count); // 'count'\n\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率 (基于预定义列表)\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: serverNames,\n          axisLabel: {\n            rotate: 30,\n            interval: 0\n          }\n        },\n        // Show all labels if few enough\n        yAxis: {\n          type: \"value\",\n          name: \"访问次数\"\n        },\n        series: [{\n          name: \"访问次数\",\n          type: \"bar\",\n          data: accessCounts,\n          itemStyle: {\n            color: \"#E6A23C\"\n          },\n          barMaxWidth: 50\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      const chartDom = this.$refs.networkFlowChartRef;\n      if (!chartDom) {\n        console.error(\"networkFlowChartRef not found\");\n        return;\n      }\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(chartDom);\n      if (!this.dailyNetworkTrafficData || this.dailyNetworkTrafficData.length === 0) {\n        this.showEmptyChart(this.networkFlowChart, \"networkFlowChartRef\", \"网络流量数据正在加载或无可用数据\");\n        return;\n      }\n\n      // Filter data for selectedDate if necessary, or show all if selectedDate is not used for filtering here\n      // For simplicity, this example assumes dailyNetworkTrafficData is an array of {date, bytes_in, bytes_out}\n      // and we plot all of it or a selected portion based on selectedDate (if you add filtering logic)\n\n      const dates = this.dailyNetworkTrafficData.map(d => d.date);\n      const bytesIn = this.dailyNetworkTrafficData.map(d => d.bytes_in);\n      const bytesOut = this.dailyNetworkTrafficData.map(d => d.bytes_out);\n      const option = {\n        title: {\n          text: `每日网络流量 (${this.selectedDate || \"所有日期\"})`,\n          left: \"center\",\n          textStyle: {\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\"\n            }\n          }\n        },\n        legend: {\n          data: [\"流入字节数\", \"流出字节数\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          boundaryGap: false,\n          data: dates\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"字节数\",\n          axisLabel: {\n            formatter: function (value) {\n              return value / 1024 / 1024 + \" MB\";\n            }\n          }\n        }],\n        // Example formatter\n        series: [{\n          name: \"流入字节数\",\n          type: \"line\",\n          stack: \"总量入\",\n          areaStyle: {},\n          emphasis: {\n            focus: \"series\"\n          },\n          data: bytesIn,\n          smooth: true,\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }, {\n          name: \"流出字节数\",\n          type: \"line\",\n          stack: \"总量出\",\n          areaStyle: {},\n          emphasis: {\n            focus: \"series\"\n          },\n          data: bytesOut,\n          smooth: true,\n          itemStyle: {\n            color: \"#91CC75\"\n          }\n        }]\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      const chartDom = this.$refs.emailFrequencyChartRef;\n      if (!chartDom) {\n        console.error(\"emailFrequencyChartRef not found\");\n        return;\n      }\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(chartDom);\n      if (!this.departmentEmailActivityData || this.departmentEmailActivityData.length === 0) {\n        this.showEmptyChart(this.emailFrequencyChart, \"emailFrequencyChartRef\", \"邮件频率数据正在加载或无可用数据\");\n        return;\n      }\n      const departmentNames = this.departmentEmailActivityData.map(item => item.department);\n      const emailCounts = this.departmentEmailActivityData.map(item => item.emailCount);\n      const option = {\n        title: {\n          text: \"部门邮件通信频率\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 14\n          },\n          top: 5\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          boundaryGap: [0, 0.01]\n        },\n        yAxis: {\n          type: \"category\",\n          data: departmentNames.slice(0, 10).reverse()\n        },\n        // Show top 10, reversed for horizontal bar\n        series: [{\n          name: \"邮件数量\",\n          type: \"bar\",\n          data: emailCounts.slice(0, 10).reverse(),\n          itemStyle: {\n            color: \"#EE6666\"\n          }\n        }]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      const chartDom = this.$refs.loginSuccessChartRef;\n      if (!chartDom) {\n        console.error(\"loginSuccessChartRef not found\");\n        return;\n      }\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(chartDom);\n      if (!this.loginSuccessFailData || Object.keys(this.loginSuccessFailData).length === 0) {\n        this.showEmptyChart(this.loginSuccessChart, \"loginSuccessChartRef\", \"登录成功率数据正在加载或无可用数据\");\n        return;\n      }\n\n      // 只获取部门数据，排除顶层的success和fail字段\n      const departments = Object.keys(this.loginSuccessFailData).filter(key => key !== \"success\" && key !== \"fail\");\n      const seriesData = departments.map(dept => {\n        const deptData = this.loginSuccessFailData[dept];\n        let rate = 0;\n        if (deptData && typeof deptData === \"object\" && deptData.success !== undefined && deptData.fail !== undefined) {\n          const total = deptData.success + deptData.fail;\n          if (total > 0) {\n            rate = deptData.success / total * 100;\n          }\n        }\n        return {\n          name: dept,\n          value: parseFloat(rate.toFixed(2)) // Ensure value is a number, rounded\n        };\n      });\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 14\n          },\n          top: 5\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            // params.data will be an object like {name: '研发部', value: 95.55}\n            if (params.data && typeof params.data.value === \"number\") {\n              return `${params.data.name} : ${params.data.value.toFixed(2)}%`;\n            }\n            return `${params.name} : N/A`; // Fallback\n          }\n        },\n        series: [{\n          type: \"funnel\",\n          left: \"10%\",\n          top: 40,\n          bottom: 10,\n          width: \"80%\",\n          min: 0,\n          max: 100,\n          minSize: \"0%\",\n          maxSize: \"100%\",\n          sort: \"descending\",\n          gap: 2,\n          label: {\n            show: true,\n            position: \"inside\",\n            formatter: function (params) {\n              if (params.data && typeof params.data.value === \"number\") {\n                return `${params.data.name}\\n${params.data.value.toFixed(0)}%`;\n              }\n              return `${params.data.name}\\nN/A`; // Fallback\n            }\n          },\n          labelLine: {\n            length: 10,\n            lineStyle: {\n              width: 1,\n              type: \"solid\"\n            }\n          },\n          itemStyle: {\n            borderColor: \"#fff\",\n            borderWidth: 1\n          },\n          emphasis: {\n            label: {\n              fontSize: 16\n            }\n          },\n          data: seriesData.sort((a, b) => b.value - a.value) // Sort for funnel\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      const chartDom = this.$refs.tcpProtocolChartRef;\n      if (!chartDom) {\n        console.error(\"tcpProtocolChartRef not found\");\n        return;\n      }\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(chartDom);\n      if (!this.tcpProtocolData || this.tcpProtocolData.length === 0) {\n        this.showEmptyChart(this.tcpProtocolChart, \"tcpProtocolChartRef\", \"TCP协议数据正在加载或无可用数据\");\n        return;\n      }\n      // Take top N protocols for clarity, e.g., top 7\n      const topN = 7;\n      const displayData = this.tcpProtocolData.slice(0, topN);\n      const otherCount = this.tcpProtocolData.slice(topN).reduce((sum, item) => sum + item.count, 0);\n      if (otherCount > 0) {\n        displayData.push({\n          protocol: \"其他\",\n          count: otherCount\n        });\n      }\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 14\n          },\n          top: 5\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b} : {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: displayData.map(item => item.protocol),\n          type: \"scroll\"\n        },\n        series: [{\n          name: \"协议\",\n          type: \"pie\",\n          radius: [\"40%\", \"70%\"],\n          center: [\"60%\", \"55%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"16\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: displayData.map(item => ({\n            name: item.protocol,\n            value: item.count\n          }))\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    },\n    // Watcher handlers for re-initialization\n    handleDepartmentChangeForCheckTime() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    handleWebTimeRangeChange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    handleDateChangeForNetworkFlow() {\n      // Assuming network flow chart might need re-init or update based on selectedDate\n      if (this.dailyNetworkTrafficData) this.initNetworkFlowChart();\n    },\n    handleResize() {\n      if (this.checkTimeChart) this.checkTimeChart.resize();\n      if (this.workHoursChart) this.workHoursChart.resize();\n      if (this.webCategoryChart) this.webCategoryChart.resize();\n      if (this.serverAccessChart) this.serverAccessChart.resize();\n      if (this.networkFlowChart) this.networkFlowChart.resize();\n      if (this.emailFrequencyChart) this.emailFrequencyChart.resize();\n      if (this.loginSuccessChart) this.loginSuccessChart.resize();\n      if (this.tcpProtocolChart) this.tcpProtocolChart.resize();\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","pickerOptions","disabledDate","time","start","Date","getTime","end","isLoading","allDepartments","departmentCheckTimeData","workDurationDistributionData","webCategoryData","departmentEmailActivityData","loginSuccessFailData","tcpProtocolData","serverDBAccessData","dailyNetworkTrafficData","mounted","console","log","loadBehaviorData","$nextTick","initAllCharts","window","addEventListener","handleResize","beforeDestroy","removeEventListener","disposeAllCharts","watch","newVal","oldVal","initCheckTimeChart","initWebCategoryChart","initNetworkFlowChart","methods","initWorkHoursChart","initServerAccessChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","dispose","showEmptyChart","chartInstance","chartRefName","message","chartDom","$refs","clear","setOption","title","text","left","top","textStyle","color","fontSize","xAxis","yAxis","series","e","error","innerHTML","$message","info","allDeptsResponse","fetch","ok","json","length","results","Promise","allSettled","then","res","reject","Error","statusText","status","value","reason","success","checkTimeChartRef","$echarts","init","selectedDeptData","find","d","department","checkInDistribution","checkOutDistribution","checkInTimes","map","item","timeBin","checkInCounts","count","checkOutTimes","checkOutCounts","allTimeBins","Set","sort","option","tooltip","trigger","axisPointer","type","legend","grid","right","bottom","containLabel","axisLabel","rotate","interval","stack","emphasis","focus","bin","index","indexOf","itemStyle","workHoursChartRef","durationRanges","durationRange","counts","barMaxWidth","webCategoryChartRef","currentData","categories","category","formatter","orient","radius","center","shadowBlur","shadowOffsetX","shadowColor","serverAccessChartRef","dataToDisplay","serverNames","accessCounts","networkFlowChartRef","dates","date","bytesIn","bytes_in","bytesOut","bytes_out","label","backgroundColor","boundaryGap","areaStyle","smooth","emailFrequencyChartRef","departmentNames","emailCounts","emailCount","slice","reverse","loginSuccessChartRef","Object","keys","departments","filter","key","seriesData","dept","deptData","rate","undefined","fail","total","parseFloat","toFixed","params","width","min","max","minSize","maxSize","gap","show","position","labelLine","lineStyle","borderColor","borderWidth","a","b","tcpProtocolChartRef","topN","displayData","otherCount","reduce","sum","push","protocol","avoidLabelOverlap","fontWeight","handleDepartmentChangeForCheckTime","handleWebTimeRangeChange","handleDateChangeForNetworkFlow","resize"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\n  <div class=\"behavior\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工日常工作行为分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"分析各部门员工的正常工作模式和行为特征\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对监控数据的分析，我们总结了公司不同部门员工的工作行为模式，包括工作时间、网络活动、邮件沟通等。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工打卡时间分析</span>\n            <el-select\n              v-model=\"selectedDepartment\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n              placeholder=\"选择部门\"\n              @change=\"handleDepartmentChangeForCheckTime\"\n            >\n              <el-option\n                v-for=\"dept in allDepartments\"\n                :key=\"dept\"\n                :label=\"dept\"\n                :value=\"dept\"\n              ></el-option>\n            </el-select>\n          </div>\n          <div ref=\"checkTimeChartRef\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工工作时长分布</span>\n          </div>\n          <div ref=\"workHoursChartRef\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工网页访问类别分析</span>\n            <el-radio-group\n              v-model=\"webVisitTimeRange\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n              @change=\"handleWebTimeRangeChange\"\n            >\n              <el-radio-button label=\"workHours\">工作时间</el-radio-button>\n              <el-radio-button label=\"afterHours\">非工作时间</el-radio-button>\n              <el-radio-button label=\"allDay\">全天</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div\n            ref=\"webCategoryChartRef\"\n            style=\"width: 100%; height: 350px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>服务器/数据库访问频率</span>\n          </div>\n          <div\n            ref=\"serverAccessChartRef\"\n            style=\"width: 100%; height: 350px\"\n          ></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>网络流量时序分析</span>\n            <el-date-picker\n              v-model=\"selectedDate\"\n              type=\"date\"\n              format=\"yyyy-MM-dd\"\n              value-format=\"yyyy-MM-dd\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\"\n              style=\"float: right; margin-right: 10px; width: 150px\"\n              size=\"mini\"\n              @change=\"handleDateChangeForNetworkFlow\"\n            >\n            </el-date-picker>\n          </div>\n          <div\n            ref=\"networkFlowChartRef\"\n            style=\"width: 100%; height: 400px\"\n          ></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>邮件通信频率（按部门）</span>\n          </div>\n          <div\n            ref=\"emailFrequencyChartRef\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>登录成功率</span>\n          </div>\n          <div\n            ref=\"loginSuccessChartRef\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>TCP协议使用分布</span>\n          </div>\n          <div\n            ref=\"tcpProtocolChartRef\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      pickerOptions: {\n        disabledDate(time) {\n          const start = new Date(\"2017-11-01\").getTime();\n          const end = new Date(\"2017-11-30\").getTime();\n          return time.getTime() < start || time.getTime() > end;\n        },\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n      serverDBAccessData: [],\n      dailyNetworkTrafficData: [],\n    };\n  },\n  async mounted() {\n    console.log(\"Behavior.vue mounted: Starting data load...\");\n    await this.loadBehaviorData();\n    console.log(\n      \"Behavior.vue mounted: Data load complete. Scheduling chart initializations.\"\n    );\n    this.$nextTick(() => {\n      console.log(\"Behavior.vue mounted/$nextTick: Initializing charts...\");\n      this.initAllCharts();\n    });\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n    this.disposeAllCharts();\n  },\n  watch: {\n    selectedDepartment(newVal, oldVal) {\n      if (newVal !== oldVal && this.departmentCheckTimeData) {\n        console.log(\n          `Watcher: selectedDepartment changed to ${newVal}. Re-initializing checkTimeChart.`\n        );\n        this.initCheckTimeChart();\n      }\n    },\n    webVisitTimeRange(newVal, oldVal) {\n      if (newVal !== oldVal && this.webCategoryData) {\n        console.log(\n          `Watcher: webVisitTimeRange changed to ${newVal}. Re-initializing webCategoryChart.`\n        );\n        this.initWebCategoryChart();\n      }\n    },\n    selectedDate(newVal, oldVal) {\n      if (newVal !== oldVal && this.dailyNetworkTrafficData) {\n        // check specific data for this chart\n        console.log(\n          `Watcher: selectedDate changed to ${newVal}. Re-initializing networkFlowChart.`\n        );\n        this.initNetworkFlowChart();\n      }\n    },\n  },\n  methods: {\n    initAllCharts() {\n      this.initCheckTimeChart();\n      this.initWorkHoursChart();\n      this.initWebCategoryChart();\n      this.initServerAccessChart();\n      this.initNetworkFlowChart();\n      this.initEmailFrequencyChart();\n      this.initLoginSuccessChart();\n      this.initTcpProtocolChart();\n    },\n    disposeAllCharts() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n        this.checkTimeChart = null;\n      }\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n        this.workHoursChart = null;\n      }\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n        this.webCategoryChart = null;\n      }\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n        this.serverAccessChart = null;\n      }\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n        this.networkFlowChart = null;\n      }\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n        this.emailFrequencyChart = null;\n      }\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n        this.loginSuccessChart = null;\n      }\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n        this.tcpProtocolChart = null;\n      }\n      console.log(\"All charts disposed.\");\n    },\n    showEmptyChart(chartInstance, chartRefName, message = \"暂无数据\") {\n      const chartDom = this.$refs[chartRefName];\n      if (chartInstance) {\n        try {\n          chartInstance.clear();\n          chartInstance.setOption({\n            title: {\n              text: message,\n              left: \"center\",\n              top: \"center\",\n              textStyle: { color: \"#888\", fontSize: 16 },\n            },\n            xAxis: {},\n            yAxis: {},\n            series: [],\n          });\n        } catch (e) {\n          console.error(\n            `Error setting empty chart option for ${chartRefName}:`,\n            e,\n            chartInstance\n          );\n          if (chartDom)\n            chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message} (Error displaying chart)</div>`;\n        }\n      } else if (chartDom) {\n        chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n        console.log(\n          `showEmptyChart: ${chartRefName} instance was null, set HTML directly.`\n        );\n      } else {\n        console.error(\n          `showEmptyChart: Cannot find DOM element for ${chartRefName} and chart instance is null.`\n        );\n      }\n    },\n\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        // 首先加载所有部门名称\n        const allDeptsResponse = await fetch(\"/all_department_names.json\");\n        if (allDeptsResponse.ok) {\n          this.allDepartments = await allDeptsResponse.json();\n          console.log(\"已加载所有部门:\", this.allDepartments);\n          if (this.allDepartments.length > 0 && !this.selectedDepartment) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        }\n\n        const results = await Promise.allSettled([\n          fetch(\"/department_check_time_approx.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load department_check_time_approx.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/work_duration_distribution.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load work_duration_distribution.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/web_category_distribution.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load web_category_distribution.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/department_email_activity.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load department_email_activity.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/login_success_fail.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load login_success_fail.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/tcp_protocol_distribution.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load tcp_protocol_distribution.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/server_database_access_frequency.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load server_database_access_frequency.json: ${res.statusText}`\n                  )\n                )\n          ),\n          fetch(\"/daily_network_traffic.json\").then((res) =>\n            res.ok\n              ? res.json()\n              : Promise.reject(\n                  new Error(\n                    `Failed to load daily_network_traffic.json: ${res.statusText}`\n                  )\n                )\n          ),\n        ]);\n\n        if (results[0].status === \"fulfilled\" && results[0].value) {\n          this.departmentCheckTimeData = results[0].value;\n          // 不再从这里更新 allDepartments，因为已经从 all_department_names.json 加载\n        } else {\n          console.error(\n            \"Failed to load department check time data:\",\n            results[0].reason\n          );\n          this.departmentCheckTimeData = [];\n        }\n        this.workDurationDistributionData =\n          results[1].status === \"fulfilled\" ? results[1].value : [];\n        this.webCategoryData =\n          results[2].status === \"fulfilled\" ? results[2].value : null;\n        this.departmentEmailActivityData =\n          results[3].status === \"fulfilled\" ? results[3].value : [];\n        this.loginSuccessFailData =\n          results[4].status === \"fulfilled\" ? results[4].value : {};\n        this.tcpProtocolData =\n          results[5].status === \"fulfilled\" ? results[5].value : [];\n        this.serverDBAccessData =\n          results[6].status === \"fulfilled\" ? results[6].value : [];\n        this.dailyNetworkTrafficData =\n          results[7].status === \"fulfilled\" ? results[7].value : [];\n\n        console.log(\n          \"Department Check Time Data Loaded:\",\n          this.departmentCheckTimeData\n        );\n        console.log(\"Login Success/Fail Data:\", this.loginSuccessFailData);\n\n        this.$message.success(\"行为分析数据加载完成!\");\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message || \"未知错误\"}`);\n        // Initialize with empty data to prevent errors\n        this.departmentCheckTimeData = [];\n        this.workDurationDistributionData = [];\n        this.webCategoryData = null;\n        this.departmentEmailActivityData = [];\n        this.loginSuccessFailData = {};\n        this.tcpProtocolData = [];\n        this.serverDBAccessData = [];\n        this.dailyNetworkTrafficData = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    initCheckTimeChart() {\n      const chartDom = this.$refs.checkTimeChartRef;\n      if (!chartDom) {\n        console.error(\n          \"initCheckTimeChart: DOM element 'checkTimeChartRef' not found.\"\n        );\n        return;\n      }\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(chartDom);\n      console.log(\n        \"initCheckTimeChart: Initialized for department:\",\n        this.selectedDepartment\n      );\n\n      if (\n        !this.departmentCheckTimeData ||\n        this.departmentCheckTimeData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChartRef\",\n          \"打卡时间数据正在加载或无可用数据\"\n        );\n        console.log(\n          \"initCheckTimeChart: No departmentCheckTimeData available.\"\n        );\n        return;\n      }\n\n      const selectedDeptData = this.departmentCheckTimeData.find(\n        (d) => d.department === this.selectedDepartment\n      );\n\n      if (\n        !selectedDeptData ||\n        !selectedDeptData.checkInDistribution ||\n        !selectedDeptData.checkOutDistribution\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChartRef\",\n          `部门 [${this.selectedDepartment}] 无打卡数据`\n        );\n        console.log(\n          `initCheckTimeChart: No data for selected department: ${this.selectedDepartment}`\n        );\n        return;\n      }\n\n      const checkInTimes = selectedDeptData.checkInDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkInCounts = selectedDeptData.checkInDistribution.map(\n        (item) => item.count\n      );\n      const checkOutTimes = selectedDeptData.checkOutDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkOutCounts = selectedDeptData.checkOutDistribution.map(\n        (item) => item.count\n      );\n\n      // Ensure unique time bins for x-axis, sorted\n      const allTimeBins = [\n        ...new Set([...checkInTimes, ...checkOutTimes]),\n      ].sort();\n\n      const option = {\n        title: {\n          text: `${this.selectedDepartment} 打卡时间分布`,\n          left: \"center\",\n          textStyle: { fontSize: 16 },\n        },\n        tooltip: { trigger: \"axis\", axisPointer: { type: \"shadow\" } },\n        legend: { data: [\"上班打卡\", \"下班打卡\"], top: 30 },\n        grid: { left: \"3%\", right: \"4%\", bottom: \"3%\", containLabel: true },\n        xAxis: {\n          type: \"category\",\n          data: allTimeBins,\n          axisLabel: { rotate: 45, interval: \"auto\" },\n        }, // Ensure allTimeBins is populated\n        yAxis: { type: \"value\", name: \"次数\" },\n        series: [\n          {\n            name: \"上班打卡\",\n            type: \"bar\",\n            stack: \"time\",\n            emphasis: { focus: \"series\" },\n            data: allTimeBins.map((bin) => {\n              const index = checkInTimes.indexOf(bin);\n              return index !== -1 ? checkInCounts[index] : 0;\n            }),\n            itemStyle: { color: \"#67C23A\" },\n          },\n          {\n            name: \"下班打卡\",\n            type: \"bar\",\n            stack: \"time\",\n            emphasis: { focus: \"series\" },\n            data: allTimeBins.map((bin) => {\n              const index = checkOutTimes.indexOf(bin);\n              return index !== -1 ? checkOutCounts[index] : 0;\n            }),\n            itemStyle: { color: \"#409EFF\" },\n          },\n        ],\n      };\n      try {\n        this.checkTimeChart.setOption(option);\n        console.log(\n          \"initCheckTimeChart: Chart option set successfully for\",\n          this.selectedDepartment\n        );\n      } catch (e) {\n        console.error(\"Error setting chart option for checkTimeChart:\", e);\n      }\n    },\n\n    initWorkHoursChart() {\n      const chartDom = this.$refs.workHoursChartRef;\n      if (!chartDom) {\n        console.error(\n          \"initWorkHoursChart: DOM element 'workHoursChartRef' not found.\"\n        );\n        return;\n      }\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(chartDom);\n\n      if (\n        !this.workDurationDistributionData ||\n        this.workDurationDistributionData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.workHoursChart,\n          \"workHoursChartRef\",\n          \"工时数据正在加载或无可用数据\"\n        );\n        return;\n      }\n      const durationRanges = this.workDurationDistributionData.map(\n        (item) => item.durationRange\n      );\n      const counts = this.workDurationDistributionData.map(\n        (item) => item.count\n      );\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n          textStyle: { fontSize: 16 },\n        },\n        tooltip: { trigger: \"axis\", axisPointer: { type: \"shadow\" } },\n        grid: { left: \"3%\", right: \"4%\", bottom: \"10%\", containLabel: true }, // Adjusted bottom for labels\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          axisLabel: { rotate: 45, interval: 0 },\n        }, // Show all labels\n        yAxis: { type: \"value\", name: \"次数\" },\n        series: [\n          {\n            name: \"工作时长\",\n            type: \"bar\",\n            data: counts,\n            itemStyle: { color: \"#F56C6C\" },\n            barMaxWidth: 50,\n          },\n        ],\n      };\n      this.workHoursChart.setOption(option);\n    },\n\n    initWebCategoryChart() {\n      const chartDom = this.$refs.webCategoryChartRef;\n      if (!chartDom) {\n        console.error(\n          \"initWebCategoryChart: DOM element 'webCategoryChartRef' not found.\"\n        );\n        return;\n      }\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(chartDom);\n\n      if (\n        !this.webCategoryData ||\n        !this.webCategoryData[this.webVisitTimeRange] ||\n        this.webCategoryData[this.webVisitTimeRange].length === 0\n      ) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChartRef\",\n          `网页访问数据(${this.webVisitTimeRange})正在加载或无可用数据`\n        );\n        return;\n      }\n\n      const currentData = this.webCategoryData[this.webVisitTimeRange];\n      const categories = currentData.map((item) => item.category);\n      const counts = currentData.map((item) => item.count);\n\n      const option = {\n        title: {\n          text: `网页访问类别 (${\n            this.webVisitTimeRange === \"workHours\"\n              ? \"工作时间\"\n              : this.webVisitTimeRange === \"afterHours\"\n              ? \"非工作时间\"\n              : \"全天\"\n          })`,\n          left: \"center\",\n          textStyle: { fontSize: 16 },\n        },\n        tooltip: { trigger: \"item\", formatter: \"{b} : {c} ({d}%)\" }, // Tooltip for pie chart\n        legend: {\n          orient: \"vertical\",\n          left: \"left\",\n          data: categories,\n          type: \"scroll\",\n          top: 30,\n          bottom: 20,\n        },\n        series: [\n          {\n            name: \"访问类别\",\n            type: \"pie\",\n            radius: \"65%\",\n            center: [\"60%\", \"55%\"], // Adjusted center for legend\n            data: currentData.map((item) => ({\n              name: item.category,\n              value: item.count,\n            })),\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n          },\n        ],\n      };\n      this.webCategoryChart.setOption(option);\n    },\n\n    initServerAccessChart() {\n      const chartDom = this.$refs.serverAccessChartRef;\n      if (!chartDom) {\n        console.error(\n          \"initServerAccessChart: DOM element 'serverAccessChartRef' not found.\"\n        );\n        return;\n      }\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(chartDom);\n\n      // serverDBAccessData is for tcplog based KNOWN_SERVERS_DATABASES.\n      // For login.csv based data, you might have another data property or need to fetch/process `employee_database_access.json` / `database_server_summary.json`\n      const dataToDisplay = this.serverDBAccessData; // This currently uses server_database_access_frequency.json\n\n      if (!dataToDisplay || dataToDisplay.length === 0) {\n        this.showEmptyChart(\n          this.serverAccessChart,\n          \"serverAccessChartRef\",\n          \"服务器/数据库访问数据正在加载或无可用数据\"\n        );\n        return;\n      }\n\n      const serverNames = dataToDisplay.map((item) => item.name); // 'name' from server_database_access_frequency.json\n      const accessCounts = dataToDisplay.map((item) => item.count); // 'count'\n\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率 (基于预定义列表)\",\n          left: \"center\",\n          textStyle: { fontSize: 16 },\n        },\n        tooltip: { trigger: \"axis\", axisPointer: { type: \"shadow\" } },\n        grid: { left: \"3%\", right: \"4%\", bottom: \"3%\", containLabel: true },\n        xAxis: {\n          type: \"category\",\n          data: serverNames,\n          axisLabel: { rotate: 30, interval: 0 },\n        }, // Show all labels if few enough\n        yAxis: { type: \"value\", name: \"访问次数\" },\n        series: [\n          {\n            name: \"访问次数\",\n            type: \"bar\",\n            data: accessCounts,\n            itemStyle: { color: \"#E6A23C\" },\n            barMaxWidth: 50,\n          },\n        ],\n      };\n      this.serverAccessChart.setOption(option);\n    },\n\n    initNetworkFlowChart() {\n      const chartDom = this.$refs.networkFlowChartRef;\n      if (!chartDom) {\n        console.error(\"networkFlowChartRef not found\");\n        return;\n      }\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(chartDom);\n\n      if (\n        !this.dailyNetworkTrafficData ||\n        this.dailyNetworkTrafficData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.networkFlowChart,\n          \"networkFlowChartRef\",\n          \"网络流量数据正在加载或无可用数据\"\n        );\n        return;\n      }\n\n      // Filter data for selectedDate if necessary, or show all if selectedDate is not used for filtering here\n      // For simplicity, this example assumes dailyNetworkTrafficData is an array of {date, bytes_in, bytes_out}\n      // and we plot all of it or a selected portion based on selectedDate (if you add filtering logic)\n\n      const dates = this.dailyNetworkTrafficData.map((d) => d.date);\n      const bytesIn = this.dailyNetworkTrafficData.map((d) => d.bytes_in);\n      const bytesOut = this.dailyNetworkTrafficData.map((d) => d.bytes_out);\n\n      const option = {\n        title: {\n          text: `每日网络流量 (${this.selectedDate || \"所有日期\"})`,\n          left: \"center\",\n          textStyle: { fontSize: 16 },\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: { type: \"cross\", label: { backgroundColor: \"#6a7985\" } },\n        },\n        legend: { data: [\"流入字节数\", \"流出字节数\"], top: 30 },\n        grid: { left: \"3%\", right: \"4%\", bottom: \"3%\", containLabel: true },\n        xAxis: [{ type: \"category\", boundaryGap: false, data: dates }],\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"字节数\",\n            axisLabel: {\n              formatter: function (value) {\n                return value / 1024 / 1024 + \" MB\";\n              },\n            },\n          },\n        ], // Example formatter\n        series: [\n          {\n            name: \"流入字节数\",\n            type: \"line\",\n            stack: \"总量入\",\n            areaStyle: {},\n            emphasis: { focus: \"series\" },\n            data: bytesIn,\n            smooth: true,\n            itemStyle: { color: \"#5470C6\" },\n          },\n          {\n            name: \"流出字节数\",\n            type: \"line\",\n            stack: \"总量出\",\n            areaStyle: {},\n            emphasis: { focus: \"series\" },\n            data: bytesOut,\n            smooth: true,\n            itemStyle: { color: \"#91CC75\" },\n          },\n        ],\n      };\n      this.networkFlowChart.setOption(option);\n    },\n\n    initEmailFrequencyChart() {\n      const chartDom = this.$refs.emailFrequencyChartRef;\n      if (!chartDom) {\n        console.error(\"emailFrequencyChartRef not found\");\n        return;\n      }\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(chartDom);\n\n      if (\n        !this.departmentEmailActivityData ||\n        this.departmentEmailActivityData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.emailFrequencyChart,\n          \"emailFrequencyChartRef\",\n          \"邮件频率数据正在加载或无可用数据\"\n        );\n        return;\n      }\n      const departmentNames = this.departmentEmailActivityData.map(\n        (item) => item.department\n      );\n      const emailCounts = this.departmentEmailActivityData.map(\n        (item) => item.emailCount\n      );\n      const option = {\n        title: {\n          text: \"部门邮件通信频率\",\n          left: \"center\",\n          textStyle: { fontSize: 14 },\n          top: 5,\n        },\n        tooltip: { trigger: \"axis\", axisPointer: { type: \"shadow\" } },\n        grid: { left: \"3%\", right: \"4%\", bottom: \"3%\", containLabel: true },\n        xAxis: { type: \"value\", boundaryGap: [0, 0.01] },\n        yAxis: {\n          type: \"category\",\n          data: departmentNames.slice(0, 10).reverse(),\n        }, // Show top 10, reversed for horizontal bar\n        series: [\n          {\n            name: \"邮件数量\",\n            type: \"bar\",\n            data: emailCounts.slice(0, 10).reverse(),\n            itemStyle: { color: \"#EE6666\" },\n          },\n        ],\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n\n    initLoginSuccessChart() {\n      const chartDom = this.$refs.loginSuccessChartRef;\n      if (!chartDom) {\n        console.error(\"loginSuccessChartRef not found\");\n        return;\n      }\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(chartDom);\n\n      if (\n        !this.loginSuccessFailData ||\n        Object.keys(this.loginSuccessFailData).length === 0\n      ) {\n        this.showEmptyChart(\n          this.loginSuccessChart,\n          \"loginSuccessChartRef\",\n          \"登录成功率数据正在加载或无可用数据\"\n        );\n        return;\n      }\n\n      // 只获取部门数据，排除顶层的success和fail字段\n      const departments = Object.keys(this.loginSuccessFailData).filter(\n        (key) => key !== \"success\" && key !== \"fail\"\n      );\n\n      const seriesData = departments.map((dept) => {\n        const deptData = this.loginSuccessFailData[dept];\n        let rate = 0;\n        if (\n          deptData &&\n          typeof deptData === \"object\" &&\n          deptData.success !== undefined &&\n          deptData.fail !== undefined\n        ) {\n          const total = deptData.success + deptData.fail;\n          if (total > 0) {\n            rate = (deptData.success / total) * 100;\n          }\n        }\n        return {\n          name: dept,\n          value: parseFloat(rate.toFixed(2)), // Ensure value is a number, rounded\n        };\n      });\n\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n          textStyle: { fontSize: 14 },\n          top: 5,\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            // params.data will be an object like {name: '研发部', value: 95.55}\n            if (params.data && typeof params.data.value === \"number\") {\n              return `${params.data.name} : ${params.data.value.toFixed(2)}%`;\n            }\n            return `${params.name} : N/A`; // Fallback\n          },\n        },\n        series: [\n          {\n            type: \"funnel\",\n            left: \"10%\",\n            top: 40,\n            bottom: 10,\n            width: \"80%\",\n            min: 0,\n            max: 100,\n            minSize: \"0%\",\n            maxSize: \"100%\",\n            sort: \"descending\",\n            gap: 2,\n            label: {\n              show: true,\n              position: \"inside\",\n              formatter: function (params) {\n                if (params.data && typeof params.data.value === \"number\") {\n                  return `${params.data.name}\\n${params.data.value.toFixed(\n                    0\n                  )}%`;\n                }\n                return `${params.data.name}\\nN/A`; // Fallback\n              },\n            },\n            labelLine: { length: 10, lineStyle: { width: 1, type: \"solid\" } },\n            itemStyle: { borderColor: \"#fff\", borderWidth: 1 },\n            emphasis: { label: { fontSize: 16 } },\n            data: seriesData.sort((a, b) => b.value - a.value), // Sort for funnel\n          },\n        ],\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n\n    initTcpProtocolChart() {\n      const chartDom = this.$refs.tcpProtocolChartRef;\n      if (!chartDom) {\n        console.error(\"tcpProtocolChartRef not found\");\n        return;\n      }\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(chartDom);\n\n      if (!this.tcpProtocolData || this.tcpProtocolData.length === 0) {\n        this.showEmptyChart(\n          this.tcpProtocolChart,\n          \"tcpProtocolChartRef\",\n          \"TCP协议数据正在加载或无可用数据\"\n        );\n        return;\n      }\n      // Take top N protocols for clarity, e.g., top 7\n      const topN = 7;\n      const displayData = this.tcpProtocolData.slice(0, topN);\n      const otherCount = this.tcpProtocolData\n        .slice(topN)\n        .reduce((sum, item) => sum + item.count, 0);\n      if (otherCount > 0) {\n        displayData.push({ protocol: \"其他\", count: otherCount });\n      }\n\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n          textStyle: { fontSize: 14 },\n          top: 5,\n        },\n        tooltip: { trigger: \"item\", formatter: \"{b} : {c} ({d}%)\" },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: displayData.map((item) => item.protocol),\n          type: \"scroll\",\n        },\n        series: [\n          {\n            name: \"协议\",\n            type: \"pie\",\n            radius: [\"40%\", \"70%\"],\n            center: [\"60%\", \"55%\"],\n            avoidLabelOverlap: false,\n            label: { show: false, position: \"center\" },\n            emphasis: {\n              label: { show: true, fontSize: \"16\", fontWeight: \"bold\" },\n            },\n            labelLine: { show: false },\n            data: displayData.map((item) => ({\n              name: item.protocol,\n              value: item.count,\n            })),\n          },\n        ],\n      };\n      this.tcpProtocolChart.setOption(option);\n    },\n\n    // Watcher handlers for re-initialization\n    handleDepartmentChangeForCheckTime() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    handleWebTimeRangeChange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    handleDateChangeForNetworkFlow() {\n      // Assuming network flow chart might need re-init or update based on selectedDate\n      if (this.dailyNetworkTrafficData) this.initNetworkFlowChart();\n    },\n\n    handleResize() {\n      if (this.checkTimeChart) this.checkTimeChart.resize();\n      if (this.workHoursChart) this.workHoursChart.resize();\n      if (this.webCategoryChart) this.webCategoryChart.resize();\n      if (this.serverAccessChart) this.serverAccessChart.resize();\n      if (this.networkFlowChart) this.networkFlowChart.resize();\n      if (this.emailFrequencyChart) this.emailFrequencyChart.resize();\n      if (this.loginSuccessChart) this.loginSuccessChart.resize();\n      if (this.tcpProtocolChart) this.tcpProtocolChart.resize();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.behavior {\n  padding: 20px;\n}\n.box-card {\n  margin-bottom: 20px;\n}\n.clearfix:before,\n.clearfix:after {\n  display: table;\n  content: \"\";\n}\n.clearfix:after {\n  clear: both;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}