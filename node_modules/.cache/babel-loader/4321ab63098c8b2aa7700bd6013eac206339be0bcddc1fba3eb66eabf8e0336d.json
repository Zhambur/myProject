{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/**\r\n * 数据集工具函数\r\n * 用于读取和处理ITD-2018数据集\r\n */\nimport axios from \"axios\";\n\n/**\r\n * 读取CSV文件并解析成对象数组\r\n * @param {string} filepath - CSV文件路径\r\n * @returns {Promise<Array>} - 解析后的数据数组\r\n */\nexport const readCSV = async filepath => {\n  try {\n    const response = await axios.get(filepath);\n    const content = response.data;\n    return parseCSV(content);\n  } catch (error) {\n    console.error(\"读取CSV文件失败:\", error);\n    return [];\n  }\n};\n\n/**\r\n * 解析CSV内容\r\n * @param {string} csvContent - CSV文件内容\r\n * @returns {Array} - 解析后的数据数组\r\n */\nexport const parseCSV = csvContent => {\n  const lines = csvContent.split(\"\\n\");\n  if (lines.length === 0) return [];\n  const headers = lines[0].split(\",\");\n  const result = [];\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n\n    // 处理CSV中的引号和逗号\n    const values = [];\n    let inQuotes = false;\n    let currentValue = \"\";\n    for (let j = 0; j < line.length; j++) {\n      const char = line[j];\n      if (char === '\"' && (j === 0 || line[j - 1] !== \"\\\\\")) {\n        inQuotes = !inQuotes;\n      } else if (char === \",\" && !inQuotes) {\n        values.push(currentValue);\n        currentValue = \"\";\n      } else {\n        currentValue += char;\n      }\n    }\n    values.push(currentValue);\n    const obj = {};\n    headers.forEach((header, index) => {\n      obj[header] = values[index] || \"\";\n    });\n    result.push(obj);\n  }\n  return result;\n};\n\n/**\r\n * 获取指定日期的Email数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - Email数据数组\r\n */\nexport const getEmailData = async date => {\n  const formattedDate = date.replace(/-/g, \"-\");\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/email.csv`;\n  return await readCSV(filepath);\n};\n\n/**\r\n * 获取指定日期的登录数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 登录数据数组\r\n */\nexport const getLoginData = async date => {\n  const formattedDate = date.replace(/-/g, \"-\");\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/login.csv`;\n  return await readCSV(filepath);\n};\n\n/**\r\n * 获取指定日期的网页访问数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 网页访问数据数组\r\n */\nexport const getWeblogData = async date => {\n  const formattedDate = date.replace(/-/g, \"-\");\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/weblog.csv`;\n  return await readCSV(filepath);\n};\n\n/**\r\n * 获取指定日期的打卡数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 打卡数据数组\r\n */\nexport const getCheckingData = async date => {\n  const formattedDate = date.replace(/-/g, \"-\");\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/checking.csv`;\n  return await readCSV(filepath);\n};\n\n/**\r\n * 提取邮件发件人和收件人关系\r\n * @param {Array} emailData - 邮件数据数组\r\n * @returns {Object} - 包含发件人、收件人和邮件统计信息的对象\r\n */\nexport const extractEmailRelations = emailData => {\n  const relations = [];\n  const userStats = {};\n  emailData.forEach(email => {\n    const from = email.from.split(\"@\")[0];\n    // 处理多个收件人的情况\n    const toList = email.to.split(\";\").map(to => to.split(\"@\")[0]);\n    toList.forEach(to => {\n      if (from && to) {\n        relations.push({\n          source: from,\n          target: to,\n          value: 1\n        });\n\n        // 统计各用户的邮件数量\n        userStats[from] = (userStats[from] || 0) + 1;\n        userStats[to] = (userStats[to] || 0) + 0; // 确保收件人被记录\n      }\n    });\n  });\n\n  // 合并相同发件人和收件人的记录\n  const mergedRelations = {};\n  relations.forEach(rel => {\n    const key = `${rel.source}-${rel.target}`;\n    if (!mergedRelations[key]) {\n      mergedRelations[key] = {\n        ...rel\n      };\n    } else {\n      mergedRelations[key].value += rel.value;\n    }\n  });\n  return {\n    relations: Object.values(mergedRelations),\n    userStats\n  };\n};\n\n/**\r\n * 按小时统计网络流量数据\r\n * @param {Array} emailData - 邮件数据\r\n * @param {Array} weblogData - 网页访问数据\r\n * @param {Array} loginData - 登录数据\r\n * @returns {Object} - 按小时统计的各类流量数据\r\n */\nexport const aggregateNetworkFlowByHour = (emailData, weblogData, loginData) => {\n  const hours = Array.from(Array(24).keys());\n  const result = {\n    hours: hours.map(h => h < 10 ? `0${h}:00` : `${h}:00`),\n    emailFlow: new Array(24).fill(0),\n    webFlow: new Array(24).fill(0),\n    loginFlow: new Array(24).fill(0),\n    abnormalPoints: []\n  };\n\n  // 处理邮件数据\n  emailData.forEach(email => {\n    const time = email.time;\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\n    if (hour >= 0 && hour < 24) {\n      result.emailFlow[hour]++;\n    }\n\n    // 检测异常邮件行为\n    const subject = email.subject.toLowerCase();\n    const sensitiveWords = [\"password\", \"account\", \"confidential\", \"private\", \"secret\"];\n    if (sensitiveWords.some(word => subject.includes(word))) {\n      result.abnormalPoints.push({\n        type: \"email\",\n        time: time,\n        hour: hour,\n        user: email.from.split(\"@\")[0],\n        value: result.emailFlow[hour]\n      });\n    }\n  });\n\n  // 处理网页访问数据\n  weblogData.forEach(weblog => {\n    const time = weblog.time;\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\n    if (hour >= 0 && hour < 24) {\n      result.webFlow[hour]++;\n    }\n\n    // 检测异常网站访问\n    const host = weblog.host.toLowerCase();\n    const suspiciousHosts = [\"download\", \"rapidshare\", \"dropbox\", \"mediafire\"];\n    if (suspiciousHosts.some(word => host.includes(word))) {\n      result.abnormalPoints.push({\n        type: \"web\",\n        time: time,\n        hour: hour,\n        user: weblog.sip,\n        value: result.webFlow[hour]\n      });\n    }\n  });\n\n  // 处理登录数据\n  loginData.forEach(login => {\n    const time = login.time;\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\n    if (hour >= 0 && hour < 24) {\n      result.loginFlow[hour]++;\n    }\n\n    // 检测登录失败\n    if (login.state === \"error\") {\n      result.abnormalPoints.push({\n        type: \"login\",\n        time: time,\n        hour: hour,\n        user: login.user,\n        value: result.loginFlow[hour]\n      });\n    }\n  });\n  return result;\n};\n\n/**\r\n * 提取部门信息\r\n * 假设工号前两位表示部门编号\r\n * @param {Array} allUserIds - 所有用户ID\r\n * @returns {Object} - 部门与用户的映射\r\n */\nexport const extractDepartments = allUserIds => {\n  const departments = {};\n  allUserIds.forEach(userId => {\n    if (userId && userId.length >= 4) {\n      const deptCode = userId.substring(0, 2);\n      if (!departments[deptCode]) {\n        departments[deptCode] = [];\n      }\n      departments[deptCode].push(userId);\n    }\n  });\n  return departments;\n};\n\n/**\r\n * 分析打卡时间数据\r\n * @param {Array} checkingData - 打卡数据数组\r\n * @returns {Object} - 打卡时间统计\r\n */\nexport const analyzeCheckingTime = checkingData => {\n  const checkinStats = {\n    before_8: 0,\n    \"8_to_9\": 0,\n    after_9: 0\n  };\n  const checkoutStats = {\n    before_18: 0,\n    \"18_to_20\": 0,\n    after_20: 0\n  };\n  checkingData.forEach(record => {\n    // 处理上班打卡时间\n    if (record.checkin && record.checkin !== \"0\") {\n      const checkinTime = new Date(record.checkin);\n      const hours = checkinTime.getHours();\n      const minutes = checkinTime.getMinutes();\n      if (hours < 8) {\n        checkinStats.before_8++;\n      } else if (hours === 8 && minutes <= 59) {\n        checkinStats[\"8_to_9\"]++;\n      } else {\n        checkinStats.after_9++;\n      }\n    }\n\n    // 处理下班打卡时间\n    if (record.checkout && record.checkout !== \"0\") {\n      const checkoutTime = new Date(record.checkout);\n      const hours = checkoutTime.getHours();\n      if (hours < 18) {\n        checkoutStats.before_18++;\n      } else if (hours >= 18 && hours < 20) {\n        checkoutStats[\"18_to_20\"]++;\n      } else {\n        checkoutStats.after_20++;\n      }\n    }\n  });\n  return {\n    checkinStats,\n    checkoutStats\n  };\n};\n\n/**\r\n * 计算工作时长分布\r\n * @param {Array} checkingData - 打卡数据数组\r\n * @returns {Array} - 工作时长分布\r\n */\nexport const calculateWorkHoursDistribution = checkingData => {\n  const workHoursDistribution = {\n    less_than_8: 0,\n    \"8_to_9\": 0,\n    \"9_to_10\": 0,\n    \"10_to_11\": 0,\n    \"11_to_12\": 0,\n    more_than_12: 0\n  };\n  checkingData.forEach(record => {\n    if (record.checkin && record.checkout && record.checkin !== \"0\" && record.checkout !== \"0\") {\n      const checkinTime = new Date(record.checkin);\n      const checkoutTime = new Date(record.checkout);\n\n      // 计算小时差\n      const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);\n      if (diffHours < 8) {\n        workHoursDistribution.less_than_8++;\n      } else if (diffHours >= 8 && diffHours < 9) {\n        workHoursDistribution[\"8_to_9\"]++;\n      } else if (diffHours >= 9 && diffHours < 10) {\n        workHoursDistribution[\"9_to_10\"]++;\n      } else if (diffHours >= 10 && diffHours < 11) {\n        workHoursDistribution[\"10_to_11\"]++;\n      } else if (diffHours >= 11 && diffHours < 12) {\n        workHoursDistribution[\"11_to_12\"]++;\n      } else {\n        workHoursDistribution.more_than_12++;\n      }\n    }\n  });\n  return workHoursDistribution;\n};\n\n/**\r\n * 分析网站访问类别\r\n * @param {Array} weblogData - 网页访问数据\r\n * @param {string} timeRange - 时间范围：workHours, afterHours, allDay\r\n * @returns {Object} - 网站访问类别统计\r\n */\nexport const analyzeWebsiteCategories = (weblogData, timeRange = \"allDay\") => {\n  const categories = {\n    工作相关: 0,\n    搜索引擎: 0,\n    技术社区: 0,\n    在线文档: 0,\n    新闻媒体: 0,\n    社交网站: 0,\n    娱乐网站: 0,\n    其他: 0\n  };\n\n  // 网站分类规则\n  const categoryRules = {\n    工作相关: [\"hightech.com\", \"git\", \"jira\", \"confluence\", \"atlassian\"],\n    搜索引擎: [\"baidu.com\", \"google.com\", \"bing.com\", \"so.com\", \"sogou.com\"],\n    技术社区: [\"github.com\", \"stackoverflow.com\", \"csdn.net\", \"51cto.com\", \"oschina.net\", \"infoq.com\", \"ruanyifeng.com\", \"devexpress.com\"],\n    在线文档: [\"doc\", \"docs.\", \"office\", \"pdf\", \"download\"],\n    新闻媒体: [\"news\", \"sohu.com\", \"sina.com\", \".gov\", \"cntv\", \"china\", \"nytimes\"],\n    社交网站: [\"weibo\", \"zhihu\", \"qq.com\", \"pengyou\", \"friend\", \"social\", \"bbs\", \"forum\", \"zhenai\"],\n    娱乐网站: [\"game\", \"movie\", \"video\", \"music\", \"mp3\", \"tv\", \"play\", \"sport\", \"nba\", \"zhibo\", \"yinyuetai\", \"kugou\", \"qq.com\", \"tudou.com\"]\n  };\n  weblogData.forEach(weblog => {\n    // 根据时间范围过滤\n    const hour = parseInt(weblog.time.split(\" \")[1].split(\":\")[0]);\n    const isWorkHour = hour >= 9 && hour < 18;\n    if (timeRange === \"workHours\" && !isWorkHour || timeRange === \"afterHours\" && isWorkHour) {\n      return;\n    }\n    const host = weblog.host.toLowerCase();\n    let categorized = false;\n    for (const [category, keywords] of Object.entries(categoryRules)) {\n      if (keywords.some(keyword => host.includes(keyword))) {\n        categories[category]++;\n        categorized = true;\n        break;\n      }\n    }\n    if (!categorized) {\n      categories[\"其他\"]++;\n    }\n  });\n  return categories;\n};\n\n/**\r\n * 获取用户详细信息\r\n * @param {string} userId - 用户ID\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Object} - 用户详细信息\r\n */\nexport const getUserDetails = (userId, datasets) => {\n  const {\n    emailData,\n    loginData,\n    weblogData,\n    checkingData\n  } = datasets;\n\n  // 获取IP地址\n  const userIp = loginData.find(login => login.user === userId)?.sip || \"\";\n\n  // 分析邮件活动\n  const sentEmails = emailData.filter(email => email.from.includes(userId)).length;\n  const receivedEmails = emailData.filter(email => email.to.includes(userId)).length;\n\n  // 分析登录活动\n  const loginCount = loginData.filter(login => login.user === userId).length;\n  const loginFailures = loginData.filter(login => login.user === userId && login.state === \"error\").length;\n\n  // 分析网页访问\n  const webVisits = weblogData.filter(log => log.sip === userIp).length;\n\n  // 获取打卡信息\n  const checkRecord = checkingData.find(record => record.id === userId) || {};\n\n  // 分析工作时长\n  let workHours = 0;\n  if (checkRecord.checkin && checkRecord.checkout && checkRecord.checkin !== \"0\" && checkRecord.checkout !== \"0\") {\n    const checkinTime = new Date(checkRecord.checkin);\n    const checkoutTime = new Date(checkRecord.checkout);\n    workHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);\n  }\n  return {\n    userId,\n    userIp,\n    emailStats: {\n      sent: sentEmails,\n      received: receivedEmails,\n      total: sentEmails + receivedEmails\n    },\n    loginStats: {\n      total: loginCount,\n      failures: loginFailures,\n      successRate: loginCount ? ((loginCount - loginFailures) / loginCount * 100).toFixed(1) : 0\n    },\n    webStats: {\n      visits: webVisits\n    },\n    workingHours: workHours.toFixed(1),\n    attendance: {\n      checkin: checkRecord.checkin || \"N/A\",\n      checkout: checkRecord.checkout || \"N/A\"\n    }\n  };\n};\n\n/**\r\n * 检测用户异常活动\r\n * @param {string} userId - 用户ID\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Array} - 异常活动列表\r\n */\nexport const detectUserAnomalies = (userId, datasets) => {\n  const {\n    emailData,\n    loginData,\n    weblogData,\n    checkingData\n  } = datasets;\n  const anomalies = [];\n\n  // 获取用户IP\n  const userIp = loginData.find(login => login.user === userId)?.sip || \"\";\n\n  // 检测非工作时间的活动\n  const checkRecord = checkingData.find(record => record.id === userId) || {};\n  let checkinTime = null;\n  let checkoutTime = null;\n  if (checkRecord.checkin && checkRecord.checkout && checkRecord.checkin !== \"0\" && checkRecord.checkout !== \"0\") {\n    checkinTime = new Date(checkRecord.checkin);\n    checkoutTime = new Date(checkRecord.checkout);\n  }\n\n  // 检测登录失败\n  const failedLogins = loginData.filter(login => login.user === userId && login.state === \"error\");\n  if (failedLogins.length > 1) {\n    anomalies.push({\n      type: \"login\",\n      severity: \"medium\",\n      time: failedLogins[0].time,\n      description: `检测到${failedLogins.length}次登录失败`\n    });\n  }\n\n  // 检测敏感邮件\n  const sensitiveWords = [\"password\", \"account\", \"confidential\", \"private\", \"secret\", \"security\"];\n  const sensitiveEmails = emailData.filter(email => {\n    const from = email.from.toLowerCase();\n    const subject = email.subject.toLowerCase();\n    return from.includes(userId.toLowerCase()) && sensitiveWords.some(word => subject.includes(word));\n  });\n  if (sensitiveEmails.length > 0) {\n    anomalies.push({\n      type: \"email\",\n      severity: \"high\",\n      time: sensitiveEmails[0].time,\n      description: `发送含有敏感内容的邮件${sensitiveEmails.length}次`\n    });\n  }\n\n  // 检测非工作时间的活动\n  if (checkinTime && checkoutTime) {\n    // 检查非工作时间的网页访问\n    const afterHoursWeb = weblogData.filter(log => {\n      if (log.sip !== userIp) return false;\n      const logTime = new Date(log.time);\n      return logTime < checkinTime || logTime > checkoutTime;\n    });\n    if (afterHoursWeb.length > 5) {\n      anomalies.push({\n        type: \"web\",\n        severity: \"low\",\n        time: afterHoursWeb[0].time,\n        description: `非工作时间有${afterHoursWeb.length}次网页访问`\n      });\n    }\n\n    // 检查非工作时间的登录\n    const afterHoursLogin = loginData.filter(login => {\n      if (login.user !== userId) return false;\n      const logTime = new Date(login.time);\n      return logTime < checkinTime || logTime > checkoutTime;\n    });\n    if (afterHoursLogin.length > 2) {\n      anomalies.push({\n        type: \"login\",\n        severity: \"medium\",\n        time: afterHoursLogin[0].time,\n        description: `非工作时间有${afterHoursLogin.length}次系统登录`\n      });\n    }\n  }\n  return anomalies;\n};\n\n/**\r\n * 获取员工实际工号列表\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Array} - 员工工号列表\r\n */\nexport const getEmployeeIds = datasets => {\n  const {\n    emailData,\n    loginData,\n    checkingData\n  } = datasets;\n\n  // 从邮件中提取工号\n  const emailIds = new Set();\n  emailData.forEach(email => {\n    const fromMatch = email.from.match(/^(\\d+)@/);\n    if (fromMatch) emailIds.add(fromMatch[1]);\n    const toMatches = email.to.split(\";\").map(to => to.match(/^(\\d+)@/)).filter(Boolean);\n    toMatches.forEach(match => emailIds.add(match[1]));\n  });\n\n  // 从登录数据中提取工号\n  const loginIds = new Set();\n  loginData.forEach(login => {\n    if (/^\\d+$/.test(login.user)) {\n      loginIds.add(login.user);\n    }\n  });\n\n  // 从打卡数据中提取工号\n  const checkingIds = new Set();\n  checkingData.forEach(record => {\n    checkingIds.add(record.id);\n  });\n\n  // 合并所有ID\n  const allIds = new Set([...emailIds, ...loginIds, ...checkingIds]);\n  return [...allIds].filter(id => /^\\d+$/.test(id));\n};","map":{"version":3,"names":["axios","readCSV","filepath","response","get","content","data","parseCSV","error","console","csvContent","lines","split","length","headers","result","i","line","trim","values","inQuotes","currentValue","j","char","push","obj","forEach","header","index","getEmailData","date","formattedDate","replace","getLoginData","getWeblogData","getCheckingData","extractEmailRelations","emailData","relations","userStats","email","from","toList","to","map","source","target","value","mergedRelations","rel","key","Object","aggregateNetworkFlowByHour","weblogData","loginData","hours","Array","keys","h","emailFlow","fill","webFlow","loginFlow","abnormalPoints","time","hour","parseInt","subject","toLowerCase","sensitiveWords","some","word","includes","type","user","weblog","host","suspiciousHosts","sip","login","state","extractDepartments","allUserIds","departments","userId","deptCode","substring","analyzeCheckingTime","checkingData","checkinStats","before_8","after_9","checkoutStats","before_18","after_20","record","checkin","checkinTime","Date","getHours","minutes","getMinutes","checkout","checkoutTime","calculateWorkHoursDistribution","workHoursDistribution","less_than_8","more_than_12","diffHours","analyzeWebsiteCategories","timeRange","categories","工作相关","搜索引擎","技术社区","在线文档","新闻媒体","社交网站","娱乐网站","其他","categoryRules","isWorkHour","categorized","category","keywords","entries","keyword","getUserDetails","datasets","userIp","find","sentEmails","filter","receivedEmails","loginCount","loginFailures","webVisits","log","checkRecord","id","workHours","emailStats","sent","received","total","loginStats","failures","successRate","toFixed","webStats","visits","workingHours","attendance","detectUserAnomalies","anomalies","failedLogins","severity","description","sensitiveEmails","afterHoursWeb","logTime","afterHoursLogin","getEmployeeIds","emailIds","Set","fromMatch","match","add","toMatches","Boolean","loginIds","test","checkingIds","allIds"],"sources":["E:/200_StudyArea/210_curricularStudy/216_junior_down/02_vis_tech/exp/myProject/src/utils/dataUtils.js"],"sourcesContent":["/**\r\n * 数据集工具函数\r\n * 用于读取和处理ITD-2018数据集\r\n */\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * 读取CSV文件并解析成对象数组\r\n * @param {string} filepath - CSV文件路径\r\n * @returns {Promise<Array>} - 解析后的数据数组\r\n */\r\nexport const readCSV = async (filepath) => {\r\n  try {\r\n    const response = await axios.get(filepath);\r\n    const content = response.data;\r\n    return parseCSV(content);\r\n  } catch (error) {\r\n    console.error(\"读取CSV文件失败:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * 解析CSV内容\r\n * @param {string} csvContent - CSV文件内容\r\n * @returns {Array} - 解析后的数据数组\r\n */\r\nexport const parseCSV = (csvContent) => {\r\n  const lines = csvContent.split(\"\\n\");\r\n  if (lines.length === 0) return [];\r\n\r\n  const headers = lines[0].split(\",\");\r\n  const result = [];\r\n\r\n  for (let i = 1; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) continue;\r\n\r\n    // 处理CSV中的引号和逗号\r\n    const values = [];\r\n    let inQuotes = false;\r\n    let currentValue = \"\";\r\n\r\n    for (let j = 0; j < line.length; j++) {\r\n      const char = line[j];\r\n\r\n      if (char === '\"' && (j === 0 || line[j - 1] !== \"\\\\\")) {\r\n        inQuotes = !inQuotes;\r\n      } else if (char === \",\" && !inQuotes) {\r\n        values.push(currentValue);\r\n        currentValue = \"\";\r\n      } else {\r\n        currentValue += char;\r\n      }\r\n    }\r\n\r\n    values.push(currentValue);\r\n\r\n    const obj = {};\r\n    headers.forEach((header, index) => {\r\n      obj[header] = values[index] || \"\";\r\n    });\r\n\r\n    result.push(obj);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 获取指定日期的Email数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - Email数据数组\r\n */\r\nexport const getEmailData = async (date) => {\r\n  const formattedDate = date.replace(/-/g, \"-\");\r\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/email.csv`;\r\n  return await readCSV(filepath);\r\n};\r\n\r\n/**\r\n * 获取指定日期的登录数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 登录数据数组\r\n */\r\nexport const getLoginData = async (date) => {\r\n  const formattedDate = date.replace(/-/g, \"-\");\r\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/login.csv`;\r\n  return await readCSV(filepath);\r\n};\r\n\r\n/**\r\n * 获取指定日期的网页访问数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 网页访问数据数组\r\n */\r\nexport const getWeblogData = async (date) => {\r\n  const formattedDate = date.replace(/-/g, \"-\");\r\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/weblog.csv`;\r\n  return await readCSV(filepath);\r\n};\r\n\r\n/**\r\n * 获取指定日期的打卡数据\r\n * @param {string} date - 日期字符串，格式：YYYY-MM-DD\r\n * @returns {Promise<Array>} - 打卡数据数组\r\n */\r\nexport const getCheckingData = async (date) => {\r\n  const formattedDate = date.replace(/-/g, \"-\");\r\n  const filepath = `/ITD-2018 Data Set/${formattedDate}/checking.csv`;\r\n  return await readCSV(filepath);\r\n};\r\n\r\n/**\r\n * 提取邮件发件人和收件人关系\r\n * @param {Array} emailData - 邮件数据数组\r\n * @returns {Object} - 包含发件人、收件人和邮件统计信息的对象\r\n */\r\nexport const extractEmailRelations = (emailData) => {\r\n  const relations = [];\r\n  const userStats = {};\r\n\r\n  emailData.forEach((email) => {\r\n    const from = email.from.split(\"@\")[0];\r\n    // 处理多个收件人的情况\r\n    const toList = email.to.split(\";\").map((to) => to.split(\"@\")[0]);\r\n\r\n    toList.forEach((to) => {\r\n      if (from && to) {\r\n        relations.push({\r\n          source: from,\r\n          target: to,\r\n          value: 1,\r\n        });\r\n\r\n        // 统计各用户的邮件数量\r\n        userStats[from] = (userStats[from] || 0) + 1;\r\n        userStats[to] = (userStats[to] || 0) + 0; // 确保收件人被记录\r\n      }\r\n    });\r\n  });\r\n\r\n  // 合并相同发件人和收件人的记录\r\n  const mergedRelations = {};\r\n  relations.forEach((rel) => {\r\n    const key = `${rel.source}-${rel.target}`;\r\n    if (!mergedRelations[key]) {\r\n      mergedRelations[key] = { ...rel };\r\n    } else {\r\n      mergedRelations[key].value += rel.value;\r\n    }\r\n  });\r\n\r\n  return {\r\n    relations: Object.values(mergedRelations),\r\n    userStats,\r\n  };\r\n};\r\n\r\n/**\r\n * 按小时统计网络流量数据\r\n * @param {Array} emailData - 邮件数据\r\n * @param {Array} weblogData - 网页访问数据\r\n * @param {Array} loginData - 登录数据\r\n * @returns {Object} - 按小时统计的各类流量数据\r\n */\r\nexport const aggregateNetworkFlowByHour = (\r\n  emailData,\r\n  weblogData,\r\n  loginData\r\n) => {\r\n  const hours = Array.from(Array(24).keys());\r\n  const result = {\r\n    hours: hours.map((h) => (h < 10 ? `0${h}:00` : `${h}:00`)),\r\n    emailFlow: new Array(24).fill(0),\r\n    webFlow: new Array(24).fill(0),\r\n    loginFlow: new Array(24).fill(0),\r\n    abnormalPoints: [],\r\n  };\r\n\r\n  // 处理邮件数据\r\n  emailData.forEach((email) => {\r\n    const time = email.time;\r\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\r\n    if (hour >= 0 && hour < 24) {\r\n      result.emailFlow[hour]++;\r\n    }\r\n\r\n    // 检测异常邮件行为\r\n    const subject = email.subject.toLowerCase();\r\n    const sensitiveWords = [\r\n      \"password\",\r\n      \"account\",\r\n      \"confidential\",\r\n      \"private\",\r\n      \"secret\",\r\n    ];\r\n    if (sensitiveWords.some((word) => subject.includes(word))) {\r\n      result.abnormalPoints.push({\r\n        type: \"email\",\r\n        time: time,\r\n        hour: hour,\r\n        user: email.from.split(\"@\")[0],\r\n        value: result.emailFlow[hour],\r\n      });\r\n    }\r\n  });\r\n\r\n  // 处理网页访问数据\r\n  weblogData.forEach((weblog) => {\r\n    const time = weblog.time;\r\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\r\n    if (hour >= 0 && hour < 24) {\r\n      result.webFlow[hour]++;\r\n    }\r\n\r\n    // 检测异常网站访问\r\n    const host = weblog.host.toLowerCase();\r\n    const suspiciousHosts = [\"download\", \"rapidshare\", \"dropbox\", \"mediafire\"];\r\n    if (suspiciousHosts.some((word) => host.includes(word))) {\r\n      result.abnormalPoints.push({\r\n        type: \"web\",\r\n        time: time,\r\n        hour: hour,\r\n        user: weblog.sip,\r\n        value: result.webFlow[hour],\r\n      });\r\n    }\r\n  });\r\n\r\n  // 处理登录数据\r\n  loginData.forEach((login) => {\r\n    const time = login.time;\r\n    const hour = parseInt(time.split(\" \")[1].split(\":\")[0]);\r\n    if (hour >= 0 && hour < 24) {\r\n      result.loginFlow[hour]++;\r\n    }\r\n\r\n    // 检测登录失败\r\n    if (login.state === \"error\") {\r\n      result.abnormalPoints.push({\r\n        type: \"login\",\r\n        time: time,\r\n        hour: hour,\r\n        user: login.user,\r\n        value: result.loginFlow[hour],\r\n      });\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 提取部门信息\r\n * 假设工号前两位表示部门编号\r\n * @param {Array} allUserIds - 所有用户ID\r\n * @returns {Object} - 部门与用户的映射\r\n */\r\nexport const extractDepartments = (allUserIds) => {\r\n  const departments = {};\r\n\r\n  allUserIds.forEach((userId) => {\r\n    if (userId && userId.length >= 4) {\r\n      const deptCode = userId.substring(0, 2);\r\n      if (!departments[deptCode]) {\r\n        departments[deptCode] = [];\r\n      }\r\n      departments[deptCode].push(userId);\r\n    }\r\n  });\r\n\r\n  return departments;\r\n};\r\n\r\n/**\r\n * 分析打卡时间数据\r\n * @param {Array} checkingData - 打卡数据数组\r\n * @returns {Object} - 打卡时间统计\r\n */\r\nexport const analyzeCheckingTime = (checkingData) => {\r\n  const checkinStats = {\r\n    before_8: 0,\r\n    \"8_to_9\": 0,\r\n    after_9: 0,\r\n  };\r\n\r\n  const checkoutStats = {\r\n    before_18: 0,\r\n    \"18_to_20\": 0,\r\n    after_20: 0,\r\n  };\r\n\r\n  checkingData.forEach((record) => {\r\n    // 处理上班打卡时间\r\n    if (record.checkin && record.checkin !== \"0\") {\r\n      const checkinTime = new Date(record.checkin);\r\n      const hours = checkinTime.getHours();\r\n      const minutes = checkinTime.getMinutes();\r\n\r\n      if (hours < 8) {\r\n        checkinStats.before_8++;\r\n      } else if (hours === 8 && minutes <= 59) {\r\n        checkinStats[\"8_to_9\"]++;\r\n      } else {\r\n        checkinStats.after_9++;\r\n      }\r\n    }\r\n\r\n    // 处理下班打卡时间\r\n    if (record.checkout && record.checkout !== \"0\") {\r\n      const checkoutTime = new Date(record.checkout);\r\n      const hours = checkoutTime.getHours();\r\n\r\n      if (hours < 18) {\r\n        checkoutStats.before_18++;\r\n      } else if (hours >= 18 && hours < 20) {\r\n        checkoutStats[\"18_to_20\"]++;\r\n      } else {\r\n        checkoutStats.after_20++;\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    checkinStats,\r\n    checkoutStats,\r\n  };\r\n};\r\n\r\n/**\r\n * 计算工作时长分布\r\n * @param {Array} checkingData - 打卡数据数组\r\n * @returns {Array} - 工作时长分布\r\n */\r\nexport const calculateWorkHoursDistribution = (checkingData) => {\r\n  const workHoursDistribution = {\r\n    less_than_8: 0,\r\n    \"8_to_9\": 0,\r\n    \"9_to_10\": 0,\r\n    \"10_to_11\": 0,\r\n    \"11_to_12\": 0,\r\n    more_than_12: 0,\r\n  };\r\n\r\n  checkingData.forEach((record) => {\r\n    if (\r\n      record.checkin &&\r\n      record.checkout &&\r\n      record.checkin !== \"0\" &&\r\n      record.checkout !== \"0\"\r\n    ) {\r\n      const checkinTime = new Date(record.checkin);\r\n      const checkoutTime = new Date(record.checkout);\r\n\r\n      // 计算小时差\r\n      const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);\r\n\r\n      if (diffHours < 8) {\r\n        workHoursDistribution.less_than_8++;\r\n      } else if (diffHours >= 8 && diffHours < 9) {\r\n        workHoursDistribution[\"8_to_9\"]++;\r\n      } else if (diffHours >= 9 && diffHours < 10) {\r\n        workHoursDistribution[\"9_to_10\"]++;\r\n      } else if (diffHours >= 10 && diffHours < 11) {\r\n        workHoursDistribution[\"10_to_11\"]++;\r\n      } else if (diffHours >= 11 && diffHours < 12) {\r\n        workHoursDistribution[\"11_to_12\"]++;\r\n      } else {\r\n        workHoursDistribution.more_than_12++;\r\n      }\r\n    }\r\n  });\r\n\r\n  return workHoursDistribution;\r\n};\r\n\r\n/**\r\n * 分析网站访问类别\r\n * @param {Array} weblogData - 网页访问数据\r\n * @param {string} timeRange - 时间范围：workHours, afterHours, allDay\r\n * @returns {Object} - 网站访问类别统计\r\n */\r\nexport const analyzeWebsiteCategories = (weblogData, timeRange = \"allDay\") => {\r\n  const categories = {\r\n    工作相关: 0,\r\n    搜索引擎: 0,\r\n    技术社区: 0,\r\n    在线文档: 0,\r\n    新闻媒体: 0,\r\n    社交网站: 0,\r\n    娱乐网站: 0,\r\n    其他: 0,\r\n  };\r\n\r\n  // 网站分类规则\r\n  const categoryRules = {\r\n    工作相关: [\"hightech.com\", \"git\", \"jira\", \"confluence\", \"atlassian\"],\r\n    搜索引擎: [\"baidu.com\", \"google.com\", \"bing.com\", \"so.com\", \"sogou.com\"],\r\n    技术社区: [\r\n      \"github.com\",\r\n      \"stackoverflow.com\",\r\n      \"csdn.net\",\r\n      \"51cto.com\",\r\n      \"oschina.net\",\r\n      \"infoq.com\",\r\n      \"ruanyifeng.com\",\r\n      \"devexpress.com\",\r\n    ],\r\n    在线文档: [\"doc\", \"docs.\", \"office\", \"pdf\", \"download\"],\r\n    新闻媒体: [\r\n      \"news\",\r\n      \"sohu.com\",\r\n      \"sina.com\",\r\n      \".gov\",\r\n      \"cntv\",\r\n      \"china\",\r\n      \"nytimes\",\r\n    ],\r\n    社交网站: [\r\n      \"weibo\",\r\n      \"zhihu\",\r\n      \"qq.com\",\r\n      \"pengyou\",\r\n      \"friend\",\r\n      \"social\",\r\n      \"bbs\",\r\n      \"forum\",\r\n      \"zhenai\",\r\n    ],\r\n    娱乐网站: [\r\n      \"game\",\r\n      \"movie\",\r\n      \"video\",\r\n      \"music\",\r\n      \"mp3\",\r\n      \"tv\",\r\n      \"play\",\r\n      \"sport\",\r\n      \"nba\",\r\n      \"zhibo\",\r\n      \"yinyuetai\",\r\n      \"kugou\",\r\n      \"qq.com\",\r\n      \"tudou.com\",\r\n    ],\r\n  };\r\n\r\n  weblogData.forEach((weblog) => {\r\n    // 根据时间范围过滤\r\n    const hour = parseInt(weblog.time.split(\" \")[1].split(\":\")[0]);\r\n    const isWorkHour = hour >= 9 && hour < 18;\r\n\r\n    if (\r\n      (timeRange === \"workHours\" && !isWorkHour) ||\r\n      (timeRange === \"afterHours\" && isWorkHour)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const host = weblog.host.toLowerCase();\r\n    let categorized = false;\r\n\r\n    for (const [category, keywords] of Object.entries(categoryRules)) {\r\n      if (keywords.some((keyword) => host.includes(keyword))) {\r\n        categories[category]++;\r\n        categorized = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!categorized) {\r\n      categories[\"其他\"]++;\r\n    }\r\n  });\r\n\r\n  return categories;\r\n};\r\n\r\n/**\r\n * 获取用户详细信息\r\n * @param {string} userId - 用户ID\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Object} - 用户详细信息\r\n */\r\nexport const getUserDetails = (userId, datasets) => {\r\n  const { emailData, loginData, weblogData, checkingData } = datasets;\r\n\r\n  // 获取IP地址\r\n  const userIp = loginData.find((login) => login.user === userId)?.sip || \"\";\r\n\r\n  // 分析邮件活动\r\n  const sentEmails = emailData.filter((email) =>\r\n    email.from.includes(userId)\r\n  ).length;\r\n  const receivedEmails = emailData.filter((email) =>\r\n    email.to.includes(userId)\r\n  ).length;\r\n\r\n  // 分析登录活动\r\n  const loginCount = loginData.filter((login) => login.user === userId).length;\r\n  const loginFailures = loginData.filter(\r\n    (login) => login.user === userId && login.state === \"error\"\r\n  ).length;\r\n\r\n  // 分析网页访问\r\n  const webVisits = weblogData.filter((log) => log.sip === userIp).length;\r\n\r\n  // 获取打卡信息\r\n  const checkRecord = checkingData.find((record) => record.id === userId) || {};\r\n\r\n  // 分析工作时长\r\n  let workHours = 0;\r\n  if (\r\n    checkRecord.checkin &&\r\n    checkRecord.checkout &&\r\n    checkRecord.checkin !== \"0\" &&\r\n    checkRecord.checkout !== \"0\"\r\n  ) {\r\n    const checkinTime = new Date(checkRecord.checkin);\r\n    const checkoutTime = new Date(checkRecord.checkout);\r\n    workHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);\r\n  }\r\n\r\n  return {\r\n    userId,\r\n    userIp,\r\n    emailStats: {\r\n      sent: sentEmails,\r\n      received: receivedEmails,\r\n      total: sentEmails + receivedEmails,\r\n    },\r\n    loginStats: {\r\n      total: loginCount,\r\n      failures: loginFailures,\r\n      successRate: loginCount\r\n        ? (((loginCount - loginFailures) / loginCount) * 100).toFixed(1)\r\n        : 0,\r\n    },\r\n    webStats: {\r\n      visits: webVisits,\r\n    },\r\n    workingHours: workHours.toFixed(1),\r\n    attendance: {\r\n      checkin: checkRecord.checkin || \"N/A\",\r\n      checkout: checkRecord.checkout || \"N/A\",\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * 检测用户异常活动\r\n * @param {string} userId - 用户ID\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Array} - 异常活动列表\r\n */\r\nexport const detectUserAnomalies = (userId, datasets) => {\r\n  const { emailData, loginData, weblogData, checkingData } = datasets;\r\n  const anomalies = [];\r\n\r\n  // 获取用户IP\r\n  const userIp = loginData.find((login) => login.user === userId)?.sip || \"\";\r\n\r\n  // 检测非工作时间的活动\r\n  const checkRecord = checkingData.find((record) => record.id === userId) || {};\r\n  let checkinTime = null;\r\n  let checkoutTime = null;\r\n\r\n  if (\r\n    checkRecord.checkin &&\r\n    checkRecord.checkout &&\r\n    checkRecord.checkin !== \"0\" &&\r\n    checkRecord.checkout !== \"0\"\r\n  ) {\r\n    checkinTime = new Date(checkRecord.checkin);\r\n    checkoutTime = new Date(checkRecord.checkout);\r\n  }\r\n\r\n  // 检测登录失败\r\n  const failedLogins = loginData.filter(\r\n    (login) => login.user === userId && login.state === \"error\"\r\n  );\r\n  if (failedLogins.length > 1) {\r\n    anomalies.push({\r\n      type: \"login\",\r\n      severity: \"medium\",\r\n      time: failedLogins[0].time,\r\n      description: `检测到${failedLogins.length}次登录失败`,\r\n    });\r\n  }\r\n\r\n  // 检测敏感邮件\r\n  const sensitiveWords = [\r\n    \"password\",\r\n    \"account\",\r\n    \"confidential\",\r\n    \"private\",\r\n    \"secret\",\r\n    \"security\",\r\n  ];\r\n  const sensitiveEmails = emailData.filter((email) => {\r\n    const from = email.from.toLowerCase();\r\n    const subject = email.subject.toLowerCase();\r\n    return (\r\n      from.includes(userId.toLowerCase()) &&\r\n      sensitiveWords.some((word) => subject.includes(word))\r\n    );\r\n  });\r\n\r\n  if (sensitiveEmails.length > 0) {\r\n    anomalies.push({\r\n      type: \"email\",\r\n      severity: \"high\",\r\n      time: sensitiveEmails[0].time,\r\n      description: `发送含有敏感内容的邮件${sensitiveEmails.length}次`,\r\n    });\r\n  }\r\n\r\n  // 检测非工作时间的活动\r\n  if (checkinTime && checkoutTime) {\r\n    // 检查非工作时间的网页访问\r\n    const afterHoursWeb = weblogData.filter((log) => {\r\n      if (log.sip !== userIp) return false;\r\n\r\n      const logTime = new Date(log.time);\r\n      return logTime < checkinTime || logTime > checkoutTime;\r\n    });\r\n\r\n    if (afterHoursWeb.length > 5) {\r\n      anomalies.push({\r\n        type: \"web\",\r\n        severity: \"low\",\r\n        time: afterHoursWeb[0].time,\r\n        description: `非工作时间有${afterHoursWeb.length}次网页访问`,\r\n      });\r\n    }\r\n\r\n    // 检查非工作时间的登录\r\n    const afterHoursLogin = loginData.filter((login) => {\r\n      if (login.user !== userId) return false;\r\n\r\n      const logTime = new Date(login.time);\r\n      return logTime < checkinTime || logTime > checkoutTime;\r\n    });\r\n\r\n    if (afterHoursLogin.length > 2) {\r\n      anomalies.push({\r\n        type: \"login\",\r\n        severity: \"medium\",\r\n        time: afterHoursLogin[0].time,\r\n        description: `非工作时间有${afterHoursLogin.length}次系统登录`,\r\n      });\r\n    }\r\n  }\r\n\r\n  return anomalies;\r\n};\r\n\r\n/**\r\n * 获取员工实际工号列表\r\n * @param {Object} datasets - 包含各种数据集的对象\r\n * @returns {Array} - 员工工号列表\r\n */\r\nexport const getEmployeeIds = (datasets) => {\r\n  const { emailData, loginData, checkingData } = datasets;\r\n\r\n  // 从邮件中提取工号\r\n  const emailIds = new Set();\r\n  emailData.forEach((email) => {\r\n    const fromMatch = email.from.match(/^(\\d+)@/);\r\n    if (fromMatch) emailIds.add(fromMatch[1]);\r\n\r\n    const toMatches = email.to\r\n      .split(\";\")\r\n      .map((to) => to.match(/^(\\d+)@/))\r\n      .filter(Boolean);\r\n    toMatches.forEach((match) => emailIds.add(match[1]));\r\n  });\r\n\r\n  // 从登录数据中提取工号\r\n  const loginIds = new Set();\r\n  loginData.forEach((login) => {\r\n    if (/^\\d+$/.test(login.user)) {\r\n      loginIds.add(login.user);\r\n    }\r\n  });\r\n\r\n  // 从打卡数据中提取工号\r\n  const checkingIds = new Set();\r\n  checkingData.forEach((record) => {\r\n    checkingIds.add(record.id);\r\n  });\r\n\r\n  // 合并所有ID\r\n  const allIds = new Set([...emailIds, ...loginIds, ...checkingIds]);\r\n  return [...allIds].filter((id) => /^\\d+$/.test(id));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}