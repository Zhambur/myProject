{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        }\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    }\n  },\n  methods: {\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [deptCheckRes, workDurationRes, webCatRes, deptEmailRes, loginSucFailRes, tcpProtoRes] = await Promise.all([fetch(\"/department_check_time_approx.json\"), fetch(\"/work_duration_distribution.json\"), fetch(\"/web_category_distribution.json\"), fetch(\"/department_email_activity.json\"), fetch(\"/login_success_fail.json\"), fetch(\"/tcp_protocol_distribution.json\")]);\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (this.departmentCheckTimeData && this.departmentCheckTimeData.length > 0) {\n          this.allDepartments = this.departmentCheckTimeData.map(d => d.department);\n          if (!this.selectedDepartment && this.allDepartments.length > 0) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        } else {\n          this.allDepartments = [\"暂无部门数据\"];\n          this.selectedDepartment = \"暂无部门数据\";\n        }\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n        this.$message.success(\"行为分析数据加载完成！\");\n        this.initializeAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    initializeAllCharts() {\n      this.$nextTick(() => {\n        this.initCheckTimeChart();\n        this.initWorkHoursChart();\n        this.initWebCategoryChart();\n        this.initServerAccessChart();\n        this.initNetworkFlowChart();\n        this.initEmailFrequencyChart();\n        this.initLoginSuccessChart();\n        this.initTcpProtocolChart();\n      });\n    },\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(document.getElementById(\"checkTimeChart\"));\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (!this.departmentCheckTimeData || this.allDepartments.includes(\"暂无部门数据\")) {\n        this.showEmptyChart(this.checkTimeChart, \"暂无部门打卡数据\");\n        return;\n      }\n      const currentDeptData = this.departmentCheckTimeData.find(d => d.department === this.selectedDepartment);\n      if (!currentDeptData) {\n        this.showEmptyChart(this.checkTimeChart, `部门 ${this.selectedDepartment} 无打卡数据`);\n        return;\n      }\n      const checkInTimes = currentDeptData.checkInDistribution.map(item => item.timeBin);\n      const checkInCounts = currentDeptData.checkInDistribution.map(item => item.count);\n      const checkOutTimes = currentDeptData.checkOutDistribution.map(item => item.timeBin);\n      const checkOutCounts = currentDeptData.checkOutDistribution.map(item => item.count);\n      const allTimeBins = [...new Set([...checkInTimes, ...checkOutTimes])].sort();\n      const formattedCheckInData = allTimeBins.map(bin => {\n        const found = currentDeptData.checkInDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map(bin => {\n        const found = currentDeptData.checkOutDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          data: [\"上班打卡\", \"下班打卡\"],\n          axisLabel: {\n            interval: 0\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"人数\"\n        }],\n        series: [{\n          name: \"上班打卡\",\n          type: \"bar\",\n          data: formattedCheckInData,\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }, {\n          name: \"下班打卡\",\n          type: \"bar\",\n          data: formattedCheckOutData,\n          itemStyle: {\n            color: \"#91CC75\"\n          }\n        }]\n      };\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(document.getElementById(\"workHoursChart\"));\n      if (!this.workDurationDistributionData || this.workDurationDistributionData.length === 0) {\n        this.showEmptyChart(this.workHoursChart, \"暂无工时分布数据\");\n        return;\n      }\n      const durationRanges = this.workDurationDistributionData.map(item => item.durationRange);\n      const counts = this.workDurationDistributionData.map(item => item.count);\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\"\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\"\n        },\n        series: [{\n          name: \"工作时长分布\",\n          type: \"bar\",\n          data: counts,\n          itemStyle: {\n            color: \"#FAC858\"\n          }\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(document.getElementById(\"webCategoryChart\"));\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(this.webCategoryChart, \"暂无网页分类数据\");\n        return;\n      }\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n      if (this.webVisitTimeRange === \"workHours\" && this.webCategoryData.workHours) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"afterHours\" && this.webCategoryData.afterHours) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"allDay\" && this.webCategoryData.allDay) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n      if (categoryData.length === 0) {\n        this.showEmptyChart(this.webCategoryChart, `暂无${titleText}数据`);\n        return;\n      }\n      const dataForPie = categoryData.map(item => ({\n        name: item.category,\n        value: item.count\n      }));\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map(item => item.name)\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: [\"50%\", \"70%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"18\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: dataForPie\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      console.warn(\"ServerAccessChart 仍在使用模拟数据或待实现真实数据逻辑。\");\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(document.getElementById(\"serverAccessChart\"));\n      const hours = Array.from({\n        length: 24\n      }, (_, i) => `${i}:00`);\n      const serverData = {\n        数据库服务器: hours.map(() => Math.floor(Math.random() * 50 + 10)),\n        文件服务器: hours.map(() => Math.floor(Math.random() * 80 + 20)),\n        应用服务器: hours.map(() => Math.floor(Math.random() * 120 + 30))\n      };\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"SSH登录\", \"FTP传输\", \"MySQL访问\", \"MongoDB访问\", \"PostgreSQL访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"每日平均访问次数\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        series: [{\n          name: \"SSH登录\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: serverData[\"数据库服务器\"]\n        }, {\n          name: \"FTP传输\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: serverData[\"文件服务器\"]\n        }, {\n          name: \"MySQL访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: serverData[\"应用服务器\"]\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      console.warn(\"NetworkFlowChart 仍在使用模拟数据或待实现真实数据逻辑。\");\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(document.getElementById(\"networkFlowChart\"));\n      const times = Array.from({\n        length: 24 * 4\n      }, (_, i) => {\n        const hour = Math.floor(i / 4);\n        const minute = i % 4 * 15;\n        return `${hour < 10 ? \"0\" + hour : hour}:${minute < 10 ? \"0\" + minute : minute}`;\n      });\n      const uplink = times.map(() => Math.floor(Math.random() * 1024 * 5 + 1024));\n      this.updateNetworkFlowChart();\n    },\n    updateNetworkFlowChart() {\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\n\n      // 模拟从数据集获取数据\n      const date = this.selectedDate || \"2017-11-30\";\n      const dateFolder = date.replace(/-/g, \"-\");\n\n      // 图表标题\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\n\n      // 模拟24小时时间点\n      const hours = Array.from(Array(24).keys()).map(item => item < 10 ? `0${item}:00` : `${item}:00`);\n\n      // 模拟从ITD-2018数据集中读取的数据\n      // 在实际应用中，这应该是从CSV文件解析得到的\n      let emailData = [];\n      let webData = [];\n      let databaseData = [];\n\n      // 基于日期的不同生成模拟数据\n      if (date === \"2017-11-30\") {\n        // 根据email.csv的数据模式生成\n        emailData = [5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58, 40, 35, 25, 18, 12, 8];\n        // 根据weblog.csv的数据模式生成\n        webData = [10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220, 175, 120, 80, 45, 30, 20, 15, 12];\n        // 根据login.csv和tcpLog.csv的数据模式生成\n        databaseData = [2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35, 25, 15, 10, 5, 3];\n      } else {\n        // 其他日期的模拟数据\n        emailData = [2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45, 30, 25, 20, 15, 10, 5];\n        webData = [8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180, 155, 100, 65, 35, 25, 15, 10, 8];\n        databaseData = [1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30, 20, 10, 8, 3, 2];\n      }\n\n      // 工作时间和非工作时间的标记区域\n      const markArea = [[{\n        name: \"非工作时间\",\n        xAxis: \"00:00\"\n      }, {\n        xAxis: \"09:00\"\n      }], [{\n        name: \"非工作时间\",\n        xAxis: \"18:00\"\n      }, {\n        xAxis: \"23:59\"\n      }]];\n\n      // 异常点标记\n      const markPoints = [];\n      // 在日期为2017-11-30时标记异常点\n      if (date === \"2017-11-30\") {\n        // 基于email.csv中的异常模式\n        markPoints.push({\n          name: \"可疑邮件外发\",\n          value: \"员工1103\",\n          xAxis: 3,\n          yAxis: 24,\n          symbolSize: 40\n        });\n\n        // 基于weblog.csv中的异常访问\n        markPoints.push({\n          name: \"可疑网站访问\",\n          value: \"员工1204\",\n          xAxis: 21,\n          yAxis: 20,\n          symbolSize: 40\n        });\n      }\n      const option = {\n        title: {\n          text: title,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            animation: false,\n            label: {\n              backgroundColor: \"#505765\"\n            }\n          }\n        },\n        legend: {\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: hours,\n          boundaryGap: false,\n          splitLine: {\n            show: true\n          },\n          axisLine: {\n            onZero: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量(次数)\",\n          splitLine: {\n            show: true\n          }\n        },\n        dataZoom: [{\n          type: \"inside\",\n          start: 0,\n          end: 100\n        }, {\n          start: 0,\n          end: 100\n        }],\n        series: [{\n          name: \"邮件流量\",\n          type: \"line\",\n          data: emailData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑邮件外发\")\n          },\n          markArea: {\n            data: markArea,\n            itemStyle: {\n              color: \"rgba(255, 173, 177, 0.2)\"\n            }\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"网页访问\",\n          type: \"line\",\n          data: webData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑网站访问\")\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"数据库访问\",\n          type: \"line\",\n          data: databaseData,\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }]\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      this.emailFrequencyChart = this.$echarts.init(document.getElementById(\"emailFrequencyChart\"));\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\"\n        },\n        series: [{\n          name: \"发送邮件\",\n          type: \"bar\",\n          data: [32, 38, 30, 25, 22]\n        }, {\n          name: \"接收邮件\",\n          type: \"bar\",\n          data: [45, 50, 42, 38, 30]\n        }]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      this.loginSuccessChart = this.$echarts.init(document.getElementById(\"loginSuccessChart\"));\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\"\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\"\n        },\n        series: [{\n          name: \"登录成功率\",\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: [98.5, 97.2, 98.1, 99.2, 96.8],\n          itemStyle: {\n            color: function (params) {\n              // 根据值的大小定义不同的颜色\n              if (params.value > 98) {\n                return \"#67C23A\"; // 高成功率为绿色\n              } else if (params.value > 97) {\n                return \"#E6A23C\"; // 中等成功率为黄色\n              } else {\n                return \"#F56C6C\"; // 低成功率为红色\n              }\n            }\n          }\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      this.tcpProtocolChart = this.$echarts.init(document.getElementById(\"tcpProtocolChart\"));\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\"HTTP/HTTPS\", \"SSH/SFTP\", \"FTP\", \"SMTP\", \"MySQL\", \"MongoDB\", \"PostgreSQL\", \"其他\"]\n        },\n        series: [{\n          name: \"协议使用\",\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: [{\n            value: 45,\n            name: \"HTTP/HTTPS\"\n          }, {\n            value: 15,\n            name: \"SSH/SFTP\"\n          }, {\n            value: 10,\n            name: \"FTP\"\n          }, {\n            value: 8,\n            name: \"SMTP\"\n          }, {\n            value: 7,\n            name: \"MySQL\"\n          }, {\n            value: 6,\n            name: \"MongoDB\"\n          }, {\n            value: 5,\n            name: \"PostgreSQL\"\n          }, {\n            value: 4,\n            name: \"其他\"\n          }],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","departments","pickerOptions","disabledDate","time","start","Date","end","getTime","isLoading","allDepartments","departmentCheckTimeData","workDurationDistributionData","webCategoryData","departmentEmailActivityData","loginSuccessFailData","tcpProtocolData","mounted","loadBehaviorData","initCheckTimeChart","initWorkHoursChart","initWebCategoryChart","initServerAccessChart","initNetworkFlowChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","methods","$message","info","deptCheckRes","workDurationRes","webCatRes","deptEmailRes","loginSucFailRes","tcpProtoRes","Promise","all","fetch","ok","Error","json","length","map","d","department","success","initializeAllCharts","error","console","message","$nextTick","resize","dispose","$echarts","init","document","getElementById","updateCheckTimeChart","includes","showEmptyChart","currentDeptData","find","checkInTimes","checkInDistribution","item","timeBin","checkInCounts","count","checkOutTimes","checkOutDistribution","checkOutCounts","allTimeBins","Set","sort","formattedCheckInData","bin","found","formattedCheckOutData","option","title","text","left","tooltip","trigger","formatter","params","value","grid","right","bottom","top","containLabel","xAxis","type","axisLabel","interval","yAxis","series","itemStyle","color","setOption","durationRanges","durationRange","counts","axisPointer","legend","updateWebCategoryChart","categoryData","titleText","workHours","afterHours","allDay","dataForPie","category","orient","radius","avoidLabelOverlap","label","show","position","emphasis","fontSize","fontWeight","labelLine","warn","hours","Array","from","_","i","serverData","数据库服务器","Math","floor","random","文件服务器","应用服务器","stack","focus","times","hour","minute","uplink","updateNetworkFlowChart","date","dateFolder","replace","keys","emailData","webData","databaseData","markArea","markPoints","push","symbolSize","animation","backgroundColor","boundaryGap","splitLine","axisLine","onZero","dataZoom","markPoint","filter","p","lineStyle","width","shadowColor","shadowBlur","shadowOffsetY","smooth","min","max","barWidth","center","shadowOffsetX"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\n  <div class=\"behavior\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工日常工作行为分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"分析各部门员工的正常工作模式和行为特征\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对监控数据的分析，我们总结了公司不同部门员工的工作行为模式，包括工作时间、网络活动、邮件沟通等。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工打卡时间分析</span>\n            <el-select\n              v-model=\"selectedDepartment\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-option\n                v-for=\"dept in departments\"\n                :key=\"dept\"\n                :label=\"dept\"\n                :value=\"dept\"\n              ></el-option>\n            </el-select>\n          </div>\n          <div id=\"checkTimeChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工工作时长分布</span>\n          </div>\n          <div id=\"workHoursChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工网页访问类别分析</span>\n            <el-radio-group\n              v-model=\"webVisitTimeRange\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-radio-button label=\"workHours\">工作时间</el-radio-button>\n              <el-radio-button label=\"afterHours\">非工作时间</el-radio-button>\n              <el-radio-button label=\"allDay\">全天</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div id=\"webCategoryChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>服务器/数据库访问频率</span>\n          </div>\n          <div id=\"serverAccessChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>网络流量时序分析</span>\n            <el-date-picker\n              v-model=\"selectedDate\"\n              type=\"date\"\n              format=\"yyyy-MM-dd\"\n              value-format=\"yyyy-MM-dd\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\"\n              style=\"float: right; margin-right: 10px; width: 150px\"\n              size=\"mini\"\n            >\n            </el-date-picker>\n          </div>\n          <div id=\"networkFlowChart\" style=\"width: 100%; height: 400px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>邮件通信频率（按部门）</span>\n          </div>\n          <div\n            id=\"emailFrequencyChart\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>登录成功率</span>\n          </div>\n          <div id=\"loginSuccessChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>TCP协议使用分布</span>\n          </div>\n          <div id=\"tcpProtocolChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        },\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    },\n  },\n  methods: {\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [\n          deptCheckRes,\n          workDurationRes,\n          webCatRes,\n          deptEmailRes,\n          loginSucFailRes,\n          tcpProtoRes,\n        ] = await Promise.all([\n          fetch(\"/department_check_time_approx.json\"),\n          fetch(\"/work_duration_distribution.json\"),\n          fetch(\"/web_category_distribution.json\"),\n          fetch(\"/department_email_activity.json\"),\n          fetch(\"/login_success_fail.json\"),\n          fetch(\"/tcp_protocol_distribution.json\"),\n        ]);\n\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (\n          this.departmentCheckTimeData &&\n          this.departmentCheckTimeData.length > 0\n        ) {\n          this.allDepartments = this.departmentCheckTimeData.map(\n            (d) => d.department\n          );\n          if (!this.selectedDepartment && this.allDepartments.length > 0) {\n            this.selectedDepartment = this.allDepartments[0];\n          }\n        } else {\n          this.allDepartments = [\"暂无部门数据\"];\n          this.selectedDepartment = \"暂无部门数据\";\n        }\n\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n\n        this.$message.success(\"行为分析数据加载完成！\");\n        this.initializeAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    initializeAllCharts() {\n      this.$nextTick(() => {\n        this.initCheckTimeChart();\n        this.initWorkHoursChart();\n        this.initWebCategoryChart();\n        this.initServerAccessChart();\n        this.initNetworkFlowChart();\n        this.initEmailFrequencyChart();\n        this.initLoginSuccessChart();\n        this.initTcpProtocolChart();\n      });\n    },\n\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(\n        document.getElementById(\"checkTimeChart\")\n      );\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (\n        !this.departmentCheckTimeData ||\n        this.allDepartments.includes(\"暂无部门数据\")\n      ) {\n        this.showEmptyChart(this.checkTimeChart, \"暂无部门打卡数据\");\n        return;\n      }\n      const currentDeptData = this.departmentCheckTimeData.find(\n        (d) => d.department === this.selectedDepartment\n      );\n      if (!currentDeptData) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          `部门 ${this.selectedDepartment} 无打卡数据`\n        );\n        return;\n      }\n\n      const checkInTimes = currentDeptData.checkInDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkInCounts = currentDeptData.checkInDistribution.map(\n        (item) => item.count\n      );\n      const checkOutTimes = currentDeptData.checkOutDistribution.map(\n        (item) => item.timeBin\n      );\n      const checkOutCounts = currentDeptData.checkOutDistribution.map(\n        (item) => item.count\n      );\n\n      const allTimeBins = [\n        ...new Set([...checkInTimes, ...checkOutTimes]),\n      ].sort();\n\n      const formattedCheckInData = allTimeBins.map((bin) => {\n        const found = currentDeptData.checkInDistribution.find(\n          (d) => d.timeBin === bin\n        );\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map((bin) => {\n        const found = currentDeptData.checkOutDistribution.find(\n          (d) => d.timeBin === bin\n        );\n        return found ? found.count : 0;\n      });\n\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          },\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: [\"上班打卡\", \"下班打卡\"],\n            axisLabel: {\n              interval: 0,\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"人数\",\n          },\n        ],\n        series: [\n          {\n            name: \"上班打卡\",\n            type: \"bar\",\n            data: formattedCheckInData,\n            itemStyle: { color: \"#5470C6\" },\n          },\n          {\n            name: \"下班打卡\",\n            type: \"bar\",\n            data: formattedCheckOutData,\n            itemStyle: { color: \"#91CC75\" },\n          },\n        ],\n      };\n\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(\n        document.getElementById(\"workHoursChart\")\n      );\n      if (\n        !this.workDurationDistributionData ||\n        this.workDurationDistributionData.length === 0\n      ) {\n        this.showEmptyChart(this.workHoursChart, \"暂无工时分布数据\");\n        return;\n      }\n\n      const durationRanges = this.workDurationDistributionData.map(\n        (item) => item.durationRange\n      );\n      const counts = this.workDurationDistributionData.map(\n        (item) => item.count\n      );\n\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\",\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\",\n        },\n        series: [\n          {\n            name: \"工作时长分布\",\n            type: \"bar\",\n            data: counts,\n            itemStyle: { color: \"#FAC858\" },\n          },\n        ],\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      this.webCategoryChart = this.$echarts.init(\n        document.getElementById(\"webCategoryChart\")\n      );\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(this.webCategoryChart, \"暂无网页分类数据\");\n        return;\n      }\n\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n\n      if (\n        this.webVisitTimeRange === \"workHours\" &&\n        this.webCategoryData.workHours\n      ) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"afterHours\" &&\n        this.webCategoryData.afterHours\n      ) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"allDay\" &&\n        this.webCategoryData.allDay\n      ) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n\n      if (categoryData.length === 0) {\n        this.showEmptyChart(this.webCategoryChart, `暂无${titleText}数据`);\n        return;\n      }\n\n      const dataForPie = categoryData.map((item) => ({\n        name: item.category,\n        value: item.count,\n      }));\n\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10,\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map((item) => item.name),\n        },\n        series: [\n          {\n            name: \"访问类别\",\n            type: \"pie\",\n            radius: [\"50%\", \"70%\"],\n            avoidLabelOverlap: false,\n            label: {\n              show: false,\n              position: \"center\",\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: \"18\",\n                fontWeight: \"bold\",\n              },\n            },\n            labelLine: {\n              show: false,\n            },\n            data: dataForPie,\n          },\n        ],\n      };\n\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      console.warn(\"ServerAccessChart 仍在使用模拟数据或待实现真实数据逻辑。\");\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(\n        document.getElementById(\"serverAccessChart\")\n      );\n      const hours = Array.from({ length: 24 }, (_, i) => `${i}:00`);\n      const serverData = {\n        数据库服务器: hours.map(() => Math.floor(Math.random() * 50 + 10)),\n        文件服务器: hours.map(() => Math.floor(Math.random() * 80 + 20)),\n        应用服务器: hours.map(() => Math.floor(Math.random() * 120 + 30)),\n      };\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\n            \"SSH登录\",\n            \"FTP传输\",\n            \"MySQL访问\",\n            \"MongoDB访问\",\n            \"PostgreSQL访问\",\n          ],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"每日平均访问次数\",\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        series: [\n          {\n            name: \"SSH登录\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: serverData[\"数据库服务器\"],\n          },\n          {\n            name: \"FTP传输\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: serverData[\"文件服务器\"],\n          },\n          {\n            name: \"MySQL访问\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: serverData[\"应用服务器\"],\n          },\n        ],\n      };\n\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      console.warn(\"NetworkFlowChart 仍在使用模拟数据或待实现真实数据逻辑。\");\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      this.networkFlowChart = this.$echarts.init(\n        document.getElementById(\"networkFlowChart\")\n      );\n      const times = Array.from({ length: 24 * 4 }, (_, i) => {\n        const hour = Math.floor(i / 4);\n        const minute = (i % 4) * 15;\n        return `${hour < 10 ? \"0\" + hour : hour}:${\n          minute < 10 ? \"0\" + minute : minute\n        }`;\n      });\n      const uplink = times.map(() =>\n        Math.floor(Math.random() * 1024 * 5 + 1024)\n      );\n      this.updateNetworkFlowChart();\n    },\n    updateNetworkFlowChart() {\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\n\n      // 模拟从数据集获取数据\n      const date = this.selectedDate || \"2017-11-30\";\n      const dateFolder = date.replace(/-/g, \"-\");\n\n      // 图表标题\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\n\n      // 模拟24小时时间点\n      const hours = Array.from(Array(24).keys()).map((item) =>\n        item < 10 ? `0${item}:00` : `${item}:00`\n      );\n\n      // 模拟从ITD-2018数据集中读取的数据\n      // 在实际应用中，这应该是从CSV文件解析得到的\n      let emailData = [];\n      let webData = [];\n      let databaseData = [];\n\n      // 基于日期的不同生成模拟数据\n      if (date === \"2017-11-30\") {\n        // 根据email.csv的数据模式生成\n        emailData = [\n          5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58,\n          40, 35, 25, 18, 12, 8,\n        ];\n        // 根据weblog.csv的数据模式生成\n        webData = [\n          10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220,\n          175, 120, 80, 45, 30, 20, 15, 12,\n        ];\n        // 根据login.csv和tcpLog.csv的数据模式生成\n        databaseData = [\n          2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35,\n          25, 15, 10, 5, 3,\n        ];\n      } else {\n        // 其他日期的模拟数据\n        emailData = [\n          2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45,\n          30, 25, 20, 15, 10, 5,\n        ];\n        webData = [\n          8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180,\n          155, 100, 65, 35, 25, 15, 10, 8,\n        ];\n        databaseData = [\n          1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30,\n          20, 10, 8, 3, 2,\n        ];\n      }\n\n      // 工作时间和非工作时间的标记区域\n      const markArea = [\n        [\n          {\n            name: \"非工作时间\",\n            xAxis: \"00:00\",\n          },\n          {\n            xAxis: \"09:00\",\n          },\n        ],\n        [\n          {\n            name: \"非工作时间\",\n            xAxis: \"18:00\",\n          },\n          {\n            xAxis: \"23:59\",\n          },\n        ],\n      ];\n\n      // 异常点标记\n      const markPoints = [];\n      // 在日期为2017-11-30时标记异常点\n      if (date === \"2017-11-30\") {\n        // 基于email.csv中的异常模式\n        markPoints.push({\n          name: \"可疑邮件外发\",\n          value: \"员工1103\",\n          xAxis: 3,\n          yAxis: 24,\n          symbolSize: 40,\n        });\n\n        // 基于weblog.csv中的异常访问\n        markPoints.push({\n          name: \"可疑网站访问\",\n          value: \"员工1204\",\n          xAxis: 21,\n          yAxis: 20,\n          symbolSize: 40,\n        });\n      }\n\n      const option = {\n        title: {\n          text: title,\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            animation: false,\n            label: {\n              backgroundColor: \"#505765\",\n            },\n          },\n        },\n        legend: {\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: hours,\n          boundaryGap: false,\n          splitLine: {\n            show: true,\n          },\n          axisLine: {\n            onZero: false,\n          },\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量(次数)\",\n          splitLine: {\n            show: true,\n          },\n        },\n        dataZoom: [\n          {\n            type: \"inside\",\n            start: 0,\n            end: 100,\n          },\n          {\n            start: 0,\n            end: 100,\n          },\n        ],\n        series: [\n          {\n            name: \"邮件流量\",\n            type: \"line\",\n            data: emailData,\n            markPoint: {\n              data: markPoints.filter((p) => p.name === \"可疑邮件外发\"),\n            },\n            markArea: {\n              data: markArea,\n              itemStyle: {\n                color: \"rgba(255, 173, 177, 0.2)\",\n              },\n            },\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n          {\n            name: \"网页访问\",\n            type: \"line\",\n            data: webData,\n            markPoint: {\n              data: markPoints.filter((p) => p.name === \"可疑网站访问\"),\n            },\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n          {\n            name: \"数据库访问\",\n            type: \"line\",\n            data: databaseData,\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n        ],\n      };\n\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      this.emailFrequencyChart = this.$echarts.init(\n        document.getElementById(\"emailFrequencyChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\",\n        },\n        series: [\n          {\n            name: \"发送邮件\",\n            type: \"bar\",\n            data: [32, 38, 30, 25, 22],\n          },\n          {\n            name: \"接收邮件\",\n            type: \"bar\",\n            data: [45, 50, 42, 38, 30],\n          },\n        ],\n      };\n\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      this.loginSuccessChart = this.$echarts.init(\n        document.getElementById(\"loginSuccessChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\",\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\",\n        },\n        series: [\n          {\n            name: \"登录成功率\",\n            type: \"bar\",\n            barWidth: \"60%\",\n            data: [98.5, 97.2, 98.1, 99.2, 96.8],\n            itemStyle: {\n              color: function (params) {\n                // 根据值的大小定义不同的颜色\n                if (params.value > 98) {\n                  return \"#67C23A\"; // 高成功率为绿色\n                } else if (params.value > 97) {\n                  return \"#E6A23C\"; // 中等成功率为黄色\n                } else {\n                  return \"#F56C6C\"; // 低成功率为红色\n                }\n              },\n            },\n          },\n        ],\n      };\n\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      this.tcpProtocolChart = this.$echarts.init(\n        document.getElementById(\"tcpProtocolChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\n            \"HTTP/HTTPS\",\n            \"SSH/SFTP\",\n            \"FTP\",\n            \"SMTP\",\n            \"MySQL\",\n            \"MongoDB\",\n            \"PostgreSQL\",\n            \"其他\",\n          ],\n        },\n        series: [\n          {\n            name: \"协议使用\",\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"60%\"],\n            data: [\n              { value: 45, name: \"HTTP/HTTPS\" },\n              { value: 15, name: \"SSH/SFTP\" },\n              { value: 10, name: \"FTP\" },\n              { value: 8, name: \"SMTP\" },\n              { value: 7, name: \"MySQL\" },\n              { value: 6, name: \"MongoDB\" },\n              { value: 5, name: \"PostgreSQL\" },\n              { value: 4, name: \"其他\" },\n            ],\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n          },\n        ],\n      };\n\n      this.tcpProtocolChart.setOption(option);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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AA,MAAAiE,IAAA;;MAEA;MACA,MAAAnB,KAAA,GAAAC,KAAA,CAAAC,IAAA,CAAAD,KAAA,KAAAqB,IAAA,IAAAzG,GAAA,CAAAsB,IAAA,IACAA,IAAA,YAAAA,IAAA,WAAAA,IAAA,KACA;;MAEA;MACA;MACA,IAAAoF,SAAA;MACA,IAAAC,OAAA;MACA,IAAAC,YAAA;;MAEA;MACA,IAAAN,IAAA;QACA;QACAI,SAAA,IACA,uEACA,sBACA;QACA;QACAC,OAAA,IACA,oEACA,iCACA;QACA;QACAC,YAAA,IACA,sEACA,iBACA;MACA;QACA;QACAF,SAAA,IACA,oEACA,sBACA;QACAC,OAAA,IACA,mEACA,gCACA;QACAC,YAAA,IACA,sEACA,gBACA;MACA;;MAEA;MACA,MAAAC,QAAA,IACA,CACA;QACA1K,IAAA;QACA+G,KAAA;MACA,GACA;QACAA,KAAA;MACA,EACA,EACA,CACA;QACA/G,IAAA;QACA+G,KAAA;MACA,GACA;QACAA,KAAA;MACA,EACA,CACA;;MAEA;MACA,MAAA4D,UAAA;MACA;MACA,IAAAR,IAAA;QACA;QACAQ,UAAA,CAAAC,IAAA;UACA5K,IAAA;UACAyG,KAAA;UACAM,KAAA;UACAI,KAAA;UACA0D,UAAA;QACA;;QAEA;QACAF,UAAA,CAAAC,IAAA;UACA5K,IAAA;UACAyG,KAAA;UACAM,KAAA;UACAI,KAAA;UACA0D,UAAA;QACA;MACA;MAEA,MAAA5E,MAAA;QACAC,KAAA;UACAC,IAAA,EAAAD,KAAA;UACAE,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAqB,WAAA;YACAX,IAAA;YACA8D,SAAA;YACAtC,KAAA;cACAuC,eAAA;YACA;UACA;QACA;QACAnD,MAAA;UACA3H,IAAA;UACA4G,GAAA;QACA;QACAH,IAAA;UACAN,IAAA;UACAO,KAAA;UACAC,MAAA;UACAC,GAAA;UACAC,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACA/G,IAAA,EAAA+I,KAAA;UACAgC,WAAA;UACAC,SAAA;YACAxC,IAAA;UACA;UACAyC,QAAA;YACAC,MAAA;UACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}