{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"研发1部\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        }\n      }\n    };\n  },\n  mounted() {\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n\n    // 监听窗口大小变化，调整图表大小\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      this.updateCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      this.updateWebCategoryChart();\n    },\n    selectedDate() {\n      this.updateNetworkFlowChart();\n    }\n  },\n  methods: {\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      this.checkTimeChart = this.$echarts.init(document.getElementById(\"checkTimeChart\"));\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      // 模拟不同部门的数据\n      let data = [];\n      if (this.selectedDepartment === \"研发1部\") {\n        data = [{\n          value: [0, 5, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 35, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 45, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 5, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 10, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 35, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 30, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 20, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else if (this.selectedDepartment === \"研发2部\") {\n        data = [{\n          value: [0, 8, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 30, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 50, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 2, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 5, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 30, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 40, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 20, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else if (this.selectedDepartment === \"财务部\") {\n        data = [{\n          value: [0, 5, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 10, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 70, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 15, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 0, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 15, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 70, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 15, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 0, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 0, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      } else {\n        // 其他部门的默认数据\n        data = [{\n          value: [0, 10, \"7:00-7:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 25, \"7:30-8:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 50, \"8:00-8:30\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 15, \"8:30-9:00\"],\n          name: \"上班打卡\"\n        }, {\n          value: [0, 0, \"9:00以后\"],\n          name: \"上班打卡\"\n        }, {\n          value: [1, 20, \"17:00-18:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 40, \"18:00-19:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 25, \"19:00-20:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 10, \"20:00-21:00\"],\n          name: \"下班打卡\"\n        }, {\n          value: [1, 5, \"21:00以后\"],\n          name: \"下班打卡\"\n        }];\n      }\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          data: [\"上班打卡\", \"下班打卡\"],\n          axisLabel: {\n            interval: 0\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"人数\"\n        }],\n        series: [{\n          name: \"打卡时间\",\n          type: \"scatter\",\n          data: data,\n          symbolSize: function (val) {\n            return val[1] * 0.8;\n          },\n          itemStyle: {\n            color: function (params) {\n              // 上班打卡用蓝色，下班打卡用橙色\n              return params.data.value[0] === 0 ? \"#409EFF\" : \"#FF9800\";\n            }\n          },\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\"\n            }\n          }\n        }]\n      };\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      this.workHoursChart = this.$echarts.init(document.getElementById(\"workHoursChart\"));\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"<8小时\", \"8-9小时\", \"9-10小时\", \"10-11小时\", \"11-12小时\", \">12小时\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"人数占比(%)\"\n        },\n        series: [{\n          name: \"研发1部\",\n          type: \"bar\",\n          data: [5, 15, 30, 25, 15, 10]\n        }, {\n          name: \"研发2部\",\n          type: \"bar\",\n          data: [3, 12, 25, 30, 20, 10]\n        }, {\n          name: \"研发3部\",\n          type: \"bar\",\n          data: [4, 14, 28, 26, 18, 10]\n        }, {\n          name: \"人力资源部\",\n          type: \"bar\",\n          data: [0, 20, 40, 30, 10, 0]\n        }, {\n          name: \"财务部\",\n          type: \"bar\",\n          data: [0, 25, 45, 30, 0, 0]\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      this.webCategoryChart = this.$echarts.init(document.getElementById(\"webCategoryChart\"));\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      // 根据选择的时间范围提供不同的数据\n      let data = [];\n      if (this.webVisitTimeRange === \"workHours\") {\n        data = [{\n          value: 40,\n          name: \"工作相关网站\"\n        }, {\n          value: 20,\n          name: \"搜索引擎\"\n        }, {\n          value: 15,\n          name: \"技术社区\"\n        }, {\n          value: 10,\n          name: \"在线文档\"\n        }, {\n          value: 8,\n          name: \"新闻媒体\"\n        }, {\n          value: 5,\n          name: \"社交网站\"\n        }, {\n          value: 2,\n          name: \"娱乐网站\"\n        }];\n      } else if (this.webVisitTimeRange === \"afterHours\") {\n        data = [{\n          value: 15,\n          name: \"工作相关网站\"\n        }, {\n          value: 25,\n          name: \"搜索引擎\"\n        }, {\n          value: 10,\n          name: \"技术社区\"\n        }, {\n          value: 5,\n          name: \"在线文档\"\n        }, {\n          value: 15,\n          name: \"新闻媒体\"\n        }, {\n          value: 15,\n          name: \"社交网站\"\n        }, {\n          value: 15,\n          name: \"娱乐网站\"\n        }];\n      } else {\n        data = [{\n          value: 30,\n          name: \"工作相关网站\"\n        }, {\n          value: 22,\n          name: \"搜索引擎\"\n        }, {\n          value: 13,\n          name: \"技术社区\"\n        }, {\n          value: 8,\n          name: \"在线文档\"\n        }, {\n          value: 10,\n          name: \"新闻媒体\"\n        }, {\n          value: 9,\n          name: \"社交网站\"\n        }, {\n          value: 8,\n          name: \"娱乐网站\"\n        }];\n      }\n      const option = {\n        title: {\n          text: \"网页访问类别分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: data.map(item => item.name)\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: [\"50%\", \"70%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"18\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: data\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      this.serverAccessChart = this.$echarts.init(document.getElementById(\"serverAccessChart\"));\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"SSH登录\", \"FTP传输\", \"MySQL访问\", \"MongoDB访问\", \"PostgreSQL访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"每日平均访问次数\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        series: [{\n          name: \"SSH登录\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [120, 132, 101, 34, 30]\n        }, {\n          name: \"FTP传输\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [220, 182, 191, 34, 29]\n        }, {\n          name: \"MySQL访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [150, 232, 201, 54, 190]\n        }, {\n          name: \"MongoDB访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [98, 77, 101, 12, 15]\n        }, {\n          name: \"PostgreSQL访问\",\n          type: \"bar\",\n          stack: \"总量\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: [80, 102, 90, 20, 30]\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      this.networkFlowChart = this.$echarts.init(document.getElementById(\"networkFlowChart\"));\n      this.updateNetworkFlowChart();\n    },\n    updateNetworkFlowChart() {\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\n\n      // 模拟从数据集获取数据\n      const date = this.selectedDate || \"2017-11-30\";\n      const dateFolder = date.replace(/-/g, \"-\");\n\n      // 图表标题\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\n\n      // 模拟24小时时间点\n      const hours = Array.from(Array(24).keys()).map(item => item < 10 ? `0${item}:00` : `${item}:00`);\n\n      // 模拟从ITD-2018数据集中读取的数据\n      // 在实际应用中，这应该是从CSV文件解析得到的\n      let emailData = [];\n      let webData = [];\n      let databaseData = [];\n\n      // 基于日期的不同生成模拟数据\n      if (date === \"2017-11-30\") {\n        // 根据email.csv的数据模式生成\n        emailData = [5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58, 40, 35, 25, 18, 12, 8];\n        // 根据weblog.csv的数据模式生成\n        webData = [10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220, 175, 120, 80, 45, 30, 20, 15, 12];\n        // 根据login.csv和tcpLog.csv的数据模式生成\n        databaseData = [2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35, 25, 15, 10, 5, 3];\n      } else {\n        // 其他日期的模拟数据\n        emailData = [2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45, 30, 25, 20, 15, 10, 5];\n        webData = [8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180, 155, 100, 65, 35, 25, 15, 10, 8];\n        databaseData = [1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30, 20, 10, 8, 3, 2];\n      }\n\n      // 工作时间和非工作时间的标记区域\n      const markArea = [[{\n        name: \"非工作时间\",\n        xAxis: \"00:00\"\n      }, {\n        xAxis: \"09:00\"\n      }], [{\n        name: \"非工作时间\",\n        xAxis: \"18:00\"\n      }, {\n        xAxis: \"23:59\"\n      }]];\n\n      // 异常点标记\n      const markPoints = [];\n      // 在日期为2017-11-30时标记异常点\n      if (date === \"2017-11-30\") {\n        // 基于email.csv中的异常模式\n        markPoints.push({\n          name: \"可疑邮件外发\",\n          value: \"员工1103\",\n          xAxis: 3,\n          yAxis: 24,\n          symbolSize: 40\n        });\n\n        // 基于weblog.csv中的异常访问\n        markPoints.push({\n          name: \"可疑网站访问\",\n          value: \"员工1204\",\n          xAxis: 21,\n          yAxis: 20,\n          symbolSize: 40\n        });\n      }\n      const option = {\n        title: {\n          text: title,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            animation: false,\n            label: {\n              backgroundColor: \"#505765\"\n            }\n          }\n        },\n        legend: {\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: hours,\n          boundaryGap: false,\n          splitLine: {\n            show: true\n          },\n          axisLine: {\n            onZero: false\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量(次数)\",\n          splitLine: {\n            show: true\n          }\n        },\n        dataZoom: [{\n          type: \"inside\",\n          start: 0,\n          end: 100\n        }, {\n          start: 0,\n          end: 100\n        }],\n        series: [{\n          name: \"邮件流量\",\n          type: \"line\",\n          data: emailData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑邮件外发\")\n          },\n          markArea: {\n            data: markArea,\n            itemStyle: {\n              color: \"rgba(255, 173, 177, 0.2)\"\n            }\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"网页访问\",\n          type: \"line\",\n          data: webData,\n          markPoint: {\n            data: markPoints.filter(p => p.name === \"可疑网站访问\")\n          },\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }, {\n          name: \"数据库访问\",\n          type: \"line\",\n          data: databaseData,\n          lineStyle: {\n            width: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.3)\",\n            shadowBlur: 10,\n            shadowOffsetY: 8\n          },\n          smooth: true\n        }]\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      this.emailFrequencyChart = this.$echarts.init(document.getElementById(\"emailFrequencyChart\"));\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\"\n        },\n        series: [{\n          name: \"发送邮件\",\n          type: \"bar\",\n          data: [32, 38, 30, 25, 22]\n        }, {\n          name: \"接收邮件\",\n          type: \"bar\",\n          data: [45, 50, 42, 38, 30]\n        }]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      this.loginSuccessChart = this.$echarts.init(document.getElementById(\"loginSuccessChart\"));\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\"\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"]\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\"\n        },\n        series: [{\n          name: \"登录成功率\",\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: [98.5, 97.2, 98.1, 99.2, 96.8],\n          itemStyle: {\n            color: function (params) {\n              // 根据值的大小定义不同的颜色\n              if (params.value > 98) {\n                return \"#67C23A\"; // 高成功率为绿色\n              } else if (params.value > 97) {\n                return \"#E6A23C\"; // 中等成功率为黄色\n              } else {\n                return \"#F56C6C\"; // 低成功率为红色\n              }\n            }\n          }\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      this.tcpProtocolChart = this.$echarts.init(document.getElementById(\"tcpProtocolChart\"));\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\"HTTP/HTTPS\", \"SSH/SFTP\", \"FTP\", \"SMTP\", \"MySQL\", \"MongoDB\", \"PostgreSQL\", \"其他\"]\n        },\n        series: [{\n          name: \"协议使用\",\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: [{\n            value: 45,\n            name: \"HTTP/HTTPS\"\n          }, {\n            value: 15,\n            name: \"SSH/SFTP\"\n          }, {\n            value: 10,\n            name: \"FTP\"\n          }, {\n            value: 8,\n            name: \"SMTP\"\n          }, {\n            value: 7,\n            name: \"MySQL\"\n          }, {\n            value: 6,\n            name: \"MongoDB\"\n          }, {\n            value: 5,\n            name: \"PostgreSQL\"\n          }, {\n            value: 4,\n            name: \"其他\"\n          }],\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","departments","pickerOptions","disabledDate","time","start","Date","end","getTime","mounted","initCheckTimeChart","initWorkHoursChart","initWebCategoryChart","initServerAccessChart","initNetworkFlowChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","updateCheckTimeChart","updateWebCategoryChart","updateNetworkFlowChart","methods","resize","$echarts","init","document","getElementById","value","option","title","text","left","tooltip","trigger","formatter","params","grid","right","bottom","top","containLabel","xAxis","type","axisLabel","interval","yAxis","series","symbolSize","val","itemStyle","color","emphasis","shadowBlur","shadowColor","setOption","axisPointer","legend","orient","map","item","radius","avoidLabelOverlap","label","show","position","fontSize","fontWeight","labelLine","stack","focus","date","dateFolder","replace","hours","Array","from","keys","emailData","webData","databaseData","markArea","markPoints","push","animation","backgroundColor","boundaryGap","splitLine","axisLine","onZero","dataZoom","markPoint","filter","p","lineStyle","width","shadowOffsetY","smooth","min","max","barWidth","center","shadowOffsetX"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\n  <div class=\"behavior\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工日常工作行为分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"分析各部门员工的正常工作模式和行为特征\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对监控数据的分析，我们总结了公司不同部门员工的工作行为模式，包括工作时间、网络活动、邮件沟通等。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工打卡时间分析</span>\n            <el-select\n              v-model=\"selectedDepartment\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-option\n                v-for=\"dept in departments\"\n                :key=\"dept\"\n                :label=\"dept\"\n                :value=\"dept\"\n              ></el-option>\n            </el-select>\n          </div>\n          <div id=\"checkTimeChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工工作时长分布</span>\n          </div>\n          <div id=\"workHoursChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工网页访问类别分析</span>\n            <el-radio-group\n              v-model=\"webVisitTimeRange\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-radio-button label=\"workHours\">工作时间</el-radio-button>\n              <el-radio-button label=\"afterHours\">非工作时间</el-radio-button>\n              <el-radio-button label=\"allDay\">全天</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div id=\"webCategoryChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>服务器/数据库访问频率</span>\n          </div>\n          <div id=\"serverAccessChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>网络流量时序分析</span>\n            <el-date-picker\n              v-model=\"selectedDate\"\n              type=\"date\"\n              format=\"yyyy-MM-dd\"\n              value-format=\"yyyy-MM-dd\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\"\n              style=\"float: right; margin-right: 10px; width: 150px\"\n              size=\"mini\"\n            >\n            </el-date-picker>\n          </div>\n          <div id=\"networkFlowChart\" style=\"width: 100%; height: 400px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>邮件通信频率（按部门）</span>\n          </div>\n          <div\n            id=\"emailFrequencyChart\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>登录成功率</span>\n          </div>\n          <div id=\"loginSuccessChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>TCP协议使用分布</span>\n          </div>\n          <div id=\"tcpProtocolChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"研发1部\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        },\n      },\n    };\n  },\n  mounted() {\n    this.initCheckTimeChart();\n    this.initWorkHoursChart();\n    this.initWebCategoryChart();\n    this.initServerAccessChart();\n    this.initNetworkFlowChart();\n    this.initEmailFrequencyChart();\n    this.initLoginSuccessChart();\n    this.initTcpProtocolChart();\n\n    // 监听窗口大小变化，调整图表大小\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      this.updateCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      this.updateWebCategoryChart();\n    },\n    selectedDate() {\n      this.updateNetworkFlowChart();\n    },\n  },\n  methods: {\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      this.checkTimeChart = this.$echarts.init(\n        document.getElementById(\"checkTimeChart\")\n      );\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      // 模拟不同部门的数据\n      let data = [];\n      if (this.selectedDepartment === \"研发1部\") {\n        data = [\n          { value: [0, 5, \"7:00-7:30\"], name: \"上班打卡\" },\n          { value: [0, 35, \"7:30-8:00\"], name: \"上班打卡\" },\n          { value: [0, 45, \"8:00-8:30\"], name: \"上班打卡\" },\n          { value: [0, 10, \"8:30-9:00\"], name: \"上班打卡\" },\n          { value: [0, 5, \"9:00以后\"], name: \"上班打卡\" },\n          { value: [1, 10, \"17:00-18:00\"], name: \"下班打卡\" },\n          { value: [1, 35, \"18:00-19:00\"], name: \"下班打卡\" },\n          { value: [1, 30, \"19:00-20:00\"], name: \"下班打卡\" },\n          { value: [1, 20, \"20:00-21:00\"], name: \"下班打卡\" },\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\n        ];\n      } else if (this.selectedDepartment === \"研发2部\") {\n        data = [\n          { value: [0, 8, \"7:00-7:30\"], name: \"上班打卡\" },\n          { value: [0, 30, \"7:30-8:00\"], name: \"上班打卡\" },\n          { value: [0, 50, \"8:00-8:30\"], name: \"上班打卡\" },\n          { value: [0, 10, \"8:30-9:00\"], name: \"上班打卡\" },\n          { value: [0, 2, \"9:00以后\"], name: \"上班打卡\" },\n          { value: [1, 5, \"17:00-18:00\"], name: \"下班打卡\" },\n          { value: [1, 30, \"18:00-19:00\"], name: \"下班打卡\" },\n          { value: [1, 40, \"19:00-20:00\"], name: \"下班打卡\" },\n          { value: [1, 20, \"20:00-21:00\"], name: \"下班打卡\" },\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\n        ];\n      } else if (this.selectedDepartment === \"财务部\") {\n        data = [\n          { value: [0, 5, \"7:00-7:30\"], name: \"上班打卡\" },\n          { value: [0, 10, \"7:30-8:00\"], name: \"上班打卡\" },\n          { value: [0, 70, \"8:00-8:30\"], name: \"上班打卡\" },\n          { value: [0, 15, \"8:30-9:00\"], name: \"上班打卡\" },\n          { value: [0, 0, \"9:00以后\"], name: \"上班打卡\" },\n          { value: [1, 15, \"17:00-18:00\"], name: \"下班打卡\" },\n          { value: [1, 70, \"18:00-19:00\"], name: \"下班打卡\" },\n          { value: [1, 15, \"19:00-20:00\"], name: \"下班打卡\" },\n          { value: [1, 0, \"20:00-21:00\"], name: \"下班打卡\" },\n          { value: [1, 0, \"21:00以后\"], name: \"下班打卡\" },\n        ];\n      } else {\n        // 其他部门的默认数据\n        data = [\n          { value: [0, 10, \"7:00-7:30\"], name: \"上班打卡\" },\n          { value: [0, 25, \"7:30-8:00\"], name: \"上班打卡\" },\n          { value: [0, 50, \"8:00-8:30\"], name: \"上班打卡\" },\n          { value: [0, 15, \"8:30-9:00\"], name: \"上班打卡\" },\n          { value: [0, 0, \"9:00以后\"], name: \"上班打卡\" },\n          { value: [1, 20, \"17:00-18:00\"], name: \"下班打卡\" },\n          { value: [1, 40, \"18:00-19:00\"], name: \"下班打卡\" },\n          { value: [1, 25, \"19:00-20:00\"], name: \"下班打卡\" },\n          { value: [1, 10, \"20:00-21:00\"], name: \"下班打卡\" },\n          { value: [1, 5, \"21:00以后\"], name: \"下班打卡\" },\n        ];\n      }\n\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            return `${params.name}: ${params.data.name}<br />时间段: ${params.data.value[2]}<br />人数: ${params.data.value[1]}人`;\n          },\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 30,\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: [\"上班打卡\", \"下班打卡\"],\n            axisLabel: {\n              interval: 0,\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"人数\",\n          },\n        ],\n        series: [\n          {\n            name: \"打卡时间\",\n            type: \"scatter\",\n            data: data,\n            symbolSize: function (val) {\n              return val[1] * 0.8;\n            },\n            itemStyle: {\n              color: function (params) {\n                // 上班打卡用蓝色，下班打卡用橙色\n                return params.data.value[0] === 0 ? \"#409EFF\" : \"#FF9800\";\n              },\n            },\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              },\n            },\n          },\n        ],\n      };\n\n      this.checkTimeChart.setOption(option);\n    },\n    initWorkHoursChart() {\n      this.workHoursChart = this.$echarts.init(\n        document.getElementById(\"workHoursChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\n            \"<8小时\",\n            \"8-9小时\",\n            \"9-10小时\",\n            \"10-11小时\",\n            \"11-12小时\",\n            \">12小时\",\n          ],\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"人数占比(%)\",\n        },\n        series: [\n          {\n            name: \"研发1部\",\n            type: \"bar\",\n            data: [5, 15, 30, 25, 15, 10],\n          },\n          {\n            name: \"研发2部\",\n            type: \"bar\",\n            data: [3, 12, 25, 30, 20, 10],\n          },\n          {\n            name: \"研发3部\",\n            type: \"bar\",\n            data: [4, 14, 28, 26, 18, 10],\n          },\n          {\n            name: \"人力资源部\",\n            type: \"bar\",\n            data: [0, 20, 40, 30, 10, 0],\n          },\n          {\n            name: \"财务部\",\n            type: \"bar\",\n            data: [0, 25, 45, 30, 0, 0],\n          },\n        ],\n      };\n\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      this.webCategoryChart = this.$echarts.init(\n        document.getElementById(\"webCategoryChart\")\n      );\n      this.updateWebCategoryChart();\n    },\n    updateWebCategoryChart() {\n      // 根据选择的时间范围提供不同的数据\n      let data = [];\n      if (this.webVisitTimeRange === \"workHours\") {\n        data = [\n          { value: 40, name: \"工作相关网站\" },\n          { value: 20, name: \"搜索引擎\" },\n          { value: 15, name: \"技术社区\" },\n          { value: 10, name: \"在线文档\" },\n          { value: 8, name: \"新闻媒体\" },\n          { value: 5, name: \"社交网站\" },\n          { value: 2, name: \"娱乐网站\" },\n        ];\n      } else if (this.webVisitTimeRange === \"afterHours\") {\n        data = [\n          { value: 15, name: \"工作相关网站\" },\n          { value: 25, name: \"搜索引擎\" },\n          { value: 10, name: \"技术社区\" },\n          { value: 5, name: \"在线文档\" },\n          { value: 15, name: \"新闻媒体\" },\n          { value: 15, name: \"社交网站\" },\n          { value: 15, name: \"娱乐网站\" },\n        ];\n      } else {\n        data = [\n          { value: 30, name: \"工作相关网站\" },\n          { value: 22, name: \"搜索引擎\" },\n          { value: 13, name: \"技术社区\" },\n          { value: 8, name: \"在线文档\" },\n          { value: 10, name: \"新闻媒体\" },\n          { value: 9, name: \"社交网站\" },\n          { value: 8, name: \"娱乐网站\" },\n        ];\n      }\n\n      const option = {\n        title: {\n          text: \"网页访问类别分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: data.map((item) => item.name),\n        },\n        series: [\n          {\n            name: \"访问类别\",\n            type: \"pie\",\n            radius: [\"50%\", \"70%\"],\n            avoidLabelOverlap: false,\n            label: {\n              show: false,\n              position: \"center\",\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: \"18\",\n                fontWeight: \"bold\",\n              },\n            },\n            labelLine: {\n              show: false,\n            },\n            data: data,\n          },\n        ],\n      };\n\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      this.serverAccessChart = this.$echarts.init(\n        document.getElementById(\"serverAccessChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\n            \"SSH登录\",\n            \"FTP传输\",\n            \"MySQL访问\",\n            \"MongoDB访问\",\n            \"PostgreSQL访问\",\n          ],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"value\",\n          name: \"每日平均访问次数\",\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        series: [\n          {\n            name: \"SSH登录\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: [120, 132, 101, 34, 30],\n          },\n          {\n            name: \"FTP传输\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: [220, 182, 191, 34, 29],\n          },\n          {\n            name: \"MySQL访问\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: [150, 232, 201, 54, 190],\n          },\n          {\n            name: \"MongoDB访问\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: [98, 77, 101, 12, 15],\n          },\n          {\n            name: \"PostgreSQL访问\",\n            type: \"bar\",\n            stack: \"总量\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: [80, 102, 90, 20, 30],\n          },\n        ],\n      };\n\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      this.networkFlowChart = this.$echarts.init(\n        document.getElementById(\"networkFlowChart\")\n      );\n      this.updateNetworkFlowChart();\n    },\n    updateNetworkFlowChart() {\n      // 使用选择的日期创建一个基于ITD-2018数据集的图表\n\n      // 模拟从数据集获取数据\n      const date = this.selectedDate || \"2017-11-30\";\n      const dateFolder = date.replace(/-/g, \"-\");\n\n      // 图表标题\n      const title = `${date} 网络流量分析 (基于ITD-2018数据集)`;\n\n      // 模拟24小时时间点\n      const hours = Array.from(Array(24).keys()).map((item) =>\n        item < 10 ? `0${item}:00` : `${item}:00`\n      );\n\n      // 模拟从ITD-2018数据集中读取的数据\n      // 在实际应用中，这应该是从CSV文件解析得到的\n      let emailData = [];\n      let webData = [];\n      let databaseData = [];\n\n      // 基于日期的不同生成模拟数据\n      if (date === \"2017-11-30\") {\n        // 根据email.csv的数据模式生成\n        emailData = [\n          5, 8, 12, 24, 30, 15, 10, 28, 50, 120, 95, 85, 76, 70, 68, 72, 65, 58,\n          40, 35, 25, 18, 12, 8,\n        ];\n        // 根据weblog.csv的数据模式生成\n        webData = [\n          10, 5, 3, 2, 4, 18, 35, 88, 150, 210, 230, 225, 205, 195, 210, 220,\n          175, 120, 80, 45, 30, 20, 15, 12,\n        ];\n        // 根据login.csv和tcpLog.csv的数据模式生成\n        databaseData = [\n          2, 2, 3, 2, 5, 8, 20, 45, 65, 85, 95, 90, 85, 80, 85, 82, 75, 60, 35,\n          25, 15, 10, 5, 3,\n        ];\n      } else {\n        // 其他日期的模拟数据\n        emailData = [\n          2, 4, 8, 15, 18, 10, 8, 22, 40, 85, 70, 65, 60, 55, 58, 65, 55, 45,\n          30, 25, 20, 15, 10, 5,\n        ];\n        webData = [\n          8, 4, 2, 1, 3, 10, 30, 75, 125, 180, 200, 190, 175, 165, 175, 180,\n          155, 100, 65, 35, 25, 15, 10, 8,\n        ];\n        databaseData = [\n          1, 1, 2, 1, 3, 5, 15, 35, 55, 70, 80, 75, 70, 65, 70, 72, 65, 50, 30,\n          20, 10, 8, 3, 2,\n        ];\n      }\n\n      // 工作时间和非工作时间的标记区域\n      const markArea = [\n        [\n          {\n            name: \"非工作时间\",\n            xAxis: \"00:00\",\n          },\n          {\n            xAxis: \"09:00\",\n          },\n        ],\n        [\n          {\n            name: \"非工作时间\",\n            xAxis: \"18:00\",\n          },\n          {\n            xAxis: \"23:59\",\n          },\n        ],\n      ];\n\n      // 异常点标记\n      const markPoints = [];\n      // 在日期为2017-11-30时标记异常点\n      if (date === \"2017-11-30\") {\n        // 基于email.csv中的异常模式\n        markPoints.push({\n          name: \"可疑邮件外发\",\n          value: \"员工1103\",\n          xAxis: 3,\n          yAxis: 24,\n          symbolSize: 40,\n        });\n\n        // 基于weblog.csv中的异常访问\n        markPoints.push({\n          name: \"可疑网站访问\",\n          value: \"员工1204\",\n          xAxis: 21,\n          yAxis: 20,\n          symbolSize: 40,\n        });\n      }\n\n      const option = {\n        title: {\n          text: title,\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            animation: false,\n            label: {\n              backgroundColor: \"#505765\",\n            },\n          },\n        },\n        legend: {\n          data: [\"邮件流量\", \"网页访问\", \"数据库访问\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: hours,\n          boundaryGap: false,\n          splitLine: {\n            show: true,\n          },\n          axisLine: {\n            onZero: false,\n          },\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量(次数)\",\n          splitLine: {\n            show: true,\n          },\n        },\n        dataZoom: [\n          {\n            type: \"inside\",\n            start: 0,\n            end: 100,\n          },\n          {\n            start: 0,\n            end: 100,\n          },\n        ],\n        series: [\n          {\n            name: \"邮件流量\",\n            type: \"line\",\n            data: emailData,\n            markPoint: {\n              data: markPoints.filter((p) => p.name === \"可疑邮件外发\"),\n            },\n            markArea: {\n              data: markArea,\n              itemStyle: {\n                color: \"rgba(255, 173, 177, 0.2)\",\n              },\n            },\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n          {\n            name: \"网页访问\",\n            type: \"line\",\n            data: webData,\n            markPoint: {\n              data: markPoints.filter((p) => p.name === \"可疑网站访问\"),\n            },\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n          {\n            name: \"数据库访问\",\n            type: \"line\",\n            data: databaseData,\n            lineStyle: {\n              width: 3,\n              shadowColor: \"rgba(0, 0, 0, 0.3)\",\n              shadowBlur: 10,\n              shadowOffsetY: 8,\n            },\n            smooth: true,\n          },\n        ],\n      };\n\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      this.emailFrequencyChart = this.$echarts.init(\n        document.getElementById(\"emailFrequencyChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"邮件通信频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"每天平均邮件数\",\n        },\n        series: [\n          {\n            name: \"发送邮件\",\n            type: \"bar\",\n            data: [32, 38, 30, 25, 22],\n          },\n          {\n            name: \"接收邮件\",\n            type: \"bar\",\n            data: [45, 50, 42, 38, 30],\n          },\n        ],\n      };\n\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      this.loginSuccessChart = this.$echarts.init(\n        document.getElementById(\"loginSuccessChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\",\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n        },\n        yAxis: {\n          type: \"value\",\n          min: 80,\n          max: 100,\n          name: \"成功率(%)\",\n        },\n        series: [\n          {\n            name: \"登录成功率\",\n            type: \"bar\",\n            barWidth: \"60%\",\n            data: [98.5, 97.2, 98.1, 99.2, 96.8],\n            itemStyle: {\n              color: function (params) {\n                // 根据值的大小定义不同的颜色\n                if (params.value > 98) {\n                  return \"#67C23A\"; // 高成功率为绿色\n                } else if (params.value > 97) {\n                  return \"#E6A23C\"; // 中等成功率为黄色\n                } else {\n                  return \"#F56C6C\"; // 低成功率为红色\n                }\n              },\n            },\n          },\n        ],\n      };\n\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      this.tcpProtocolChart = this.$echarts.init(\n        document.getElementById(\"tcpProtocolChart\")\n      );\n\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: [\n            \"HTTP/HTTPS\",\n            \"SSH/SFTP\",\n            \"FTP\",\n            \"SMTP\",\n            \"MySQL\",\n            \"MongoDB\",\n            \"PostgreSQL\",\n            \"其他\",\n          ],\n        },\n        series: [\n          {\n            name: \"协议使用\",\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"60%\"],\n            data: [\n              { value: 45, name: \"HTTP/HTTPS\" },\n              { value: 15, name: \"SSH/SFTP\" },\n              { value: 10, name: \"FTP\" },\n              { value: 8, name: \"SMTP\" },\n              { value: 7, name: \"MySQL\" },\n              { value: 6, name: \"MongoDB\" },\n              { value: 5, name: \"PostgreSQL\" },\n              { value: 4, name: \"其他\" },\n            ],\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n          },\n        ],\n      };\n\n      this.tcpProtocolChart.setOption(option);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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CA,GACA;QACAA,KAAA;MACA,EACA,EACA,CACA;QACA3D,IAAA;QACA2D,KAAA;MACA,GACA;QACAA,KAAA;MACA,EACA,CACA;;MAEA;MACA,MAAAwC,UAAA;MACA;MACA,IAAAX,IAAA;QACA;QACAW,UAAA,CAAAC,IAAA;UACApG,IAAA;UACA6C,KAAA;UACAc,KAAA;UACAI,KAAA;UACAE,UAAA;QACA;;QAEA;QACAkC,UAAA,CAAAC,IAAA;UACApG,IAAA;UACA6C,KAAA;UACAc,KAAA;UACAI,KAAA;UACAE,UAAA;QACA;MACA;MAEA,MAAAnB,MAAA;QACAC,KAAA;UACAC,IAAA,EAAAD,KAAA;UACAE,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAsB,WAAA;YACAb,IAAA;YACAyC,SAAA;YACArB,KAAA;cACAsB,eAAA;YACA;UACA;QACA;QACA5B,MAAA;UACAzE,IAAA;UACAwD,GAAA;QACA;QACAH,IAAA;UACAL,IAAA;UACAM,KAAA;UACAC,MAAA;UACAC,GAAA;UACAC,YAAA;QACA;QACAC,KAAA;UACAC,IAAA;UACA3D,IAAA,EAAA0F,KAAA;UACAY,WAAA;UACAC,SAAA;YACAvB,IAAA;UACA;UACAwB,QAAA;YACAC,MAAA;UACA;QACA;QACA3C,KAAA;UACAH,IAAA;UACA5D,IAAA;UACAwG,SAAA;YACAvB,IAAA;UACA;QACA;QACA0B,QAAA,GACA;UACA/C,IAAA;UACA3C,KAAA;UACAE,GAAA;QACA,GACA;UACAF,KAAA;UACAE,GAAA;QACA,EACA;QACA6C,MAAA,GACA;UACAhE,IAAA;UACA4D,IAAA;UACA3D,IAAA,EAAA8F,SAAA;UACAa,SAAA;YACA3G,IAAA,EAAAkG,UAAA,CAAAU,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAA9G,IAAA;UACA;UACAkG,QAAA;YACAjG,IAAA,EAAAiG,QAAA;YACA/B,SAAA;cACAC,KAAA;YACA;UACA;UACA2C,SAAA;YACAC,KAAA;YACAzC,WAAA;YACAD,UAAA;YACA2C,aAAA;UACA;UACAC,MAAA;QACA,GACA;UACAlH,IAAA;UA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}