{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport Papa from \"papaparse\";\nimport * as echarts from \"echarts\";\nexport default {\n  name: \"Person\",\n  data() {\n    return {\n      // 图表实例\n      workTimeChart: null,\n      webVisitChart: null,\n      serverAccessChart: null,\n      emailActivityChart: null,\n      personEmailCloud: null,\n      // 选择和过滤相关数据\n      selectedDepartment: \"研发1部\",\n      selectedEmployee: \"\",\n      currentEmployee: null,\n      analysisDate: \"2017-11-30\",\n      showAnalysis: false,\n      activeTab: \"overview\",\n      hasAbnormalContent: false,\n      // 从CSV加载的原始数据\n      employeeEmailData: [],\n      allLoginData: [],\n      // 用于存储所有登录记录以提取员工列表\n\n      // 下拉选项数据 - 将被动态填充\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"],\n      // 这个列表可能也需要回顾\n      employees: [],\n      // 将从 login.csv 动态加载\n      employeeOptions: [],\n      // 将从 login.csv 动态加载\n\n      // 统计数据\n      employeeDepartment: \"未知\",\n      emailCount: 0,\n      loginCount: 0,\n      // 将由login.csv数据更新\n\n      // 异常活动列表\n      abnormalActivities: [],\n      threatScore: 0,\n      threatAssessment: \"\",\n      threatScoreClass: \"normal\",\n      // 新增：存储员工ID到部门的映射\n      employeeDepartmentMap: {},\n      // 新增：存储所有员工的邮件主题词频数据\n      allEmployeeWordFrequencies: {}\n    };\n  },\n  computed: {\n    employeeStats() {\n      if (!this.selectedEmployee) return [];\n\n      // 根据员工ID定制统计信息\n      const stats = [{\n        label: \"员工ID\",\n        value: this.selectedEmployee,\n        icon: \"el-icon-user-solid\",\n        color: \"#409EFF\"\n      }, {\n        label: \"所属部门\",\n        value: this.employeeDepartment,\n        icon: \"el-icon-office-building\",\n        color: \"#67C23A\"\n      }, {\n        label: \"邮件数量\",\n        value: this.emailCount,\n        icon: \"el-icon-message\",\n        color: \"#E6A23C\",\n        trend: {\n          type: this.getEmailTrendType(),\n          icon: this.getEmailTrendIcon(),\n          text: this.getEmailTrendText()\n        }\n      }, {\n        label: \"异常行为\",\n        value: this.abnormalActivities.length,\n        icon: \"el-icon-warning\",\n        color: this.abnormalActivities.length > 0 ? \"#F56C6C\" : \"#909399\"\n      }];\n      return stats;\n    }\n  },\n  async mounted() {\n    this.loadInitialData(); // 加载所有初始数据\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  methods: {\n    async fetchCsvData(filePath) {\n      this.$message.info(`Fetching data from: ${filePath}`);\n      try {\n        const response = await fetch(filePath);\n        if (!response.ok) {\n          this.$message.error(`Error fetching ${filePath}: ${response.status} ${response.statusText}`);\n          console.error(`Error fetching ${filePath}: ${response.status} ${response.statusText}`);\n          return [];\n        }\n        const csvText = await response.text();\n        return new Promise((resolve, reject) => {\n          Papa.parse(csvText, {\n            header: true,\n            skipEmptyLines: true,\n            complete: results => {\n              console.log(\"Fetched CSV Data for \" + filePath + \":\", results.data); // DEBUG\n              if (results.errors && results.errors.length > 0) {\n                this.$message.error(`Error parsing CSV ${filePath}: ${results.errors[0].message}`);\n                console.error(`Error parsing CSV ${filePath}:`, results.errors);\n                reject(results.errors);\n              } else {\n                resolve(results.data);\n              }\n            },\n            error: error => {\n              this.$message.error(`PapaParse error for ${filePath}: ${error.message}`);\n              console.error(`PapaParse error for ${filePath}:`, error);\n              reject(error);\n            }\n          });\n        });\n      } catch (error) {\n        this.$message.error(`Exception fetching or parsing ${filePath}: ${error}`);\n        console.error(`Exception fetching or parsing ${filePath}:`, error);\n        return [];\n      }\n    },\n    async loadInitialData() {\n      console.log(\"Person.vue: 开始加载初始数据...\");\n      try {\n        // 加载员工部门映射\n        const deptResponse = await fetch(\"/employee_department_mapping.csv\");\n        if (!deptResponse.ok) {\n          throw new Error(`HTTP error when fetching department mapping! status: ${deptResponse.status}`);\n        }\n        const deptCsvText = await deptResponse.text();\n        const deptData = Papa.parse(deptCsvText, {\n          header: true,\n          skipEmptyLines: true\n        }).data;\n        const tempEmployeeOptions = [];\n        const tempDeptMap = {};\n        deptData.forEach(row => {\n          if (row.sender_id && row.department_name) {\n            tempEmployeeOptions.push({\n              value: row.sender_id,\n              label: `${row.sender_id} (${row.department_name})`\n            });\n            tempDeptMap[row.sender_id] = row.department_name;\n          }\n        });\n        this.employeeOptions = tempEmployeeOptions.sort((a, b) => a.label.localeCompare(b.label));\n        this.employeeDepartmentMap = tempDeptMap;\n        console.log(\"员工部门映射加载完成: \", this.employeeOptions.length, \"人\");\n\n        // 新增：加载员工邮件主题词频数据\n        const wordFreqResponse = await fetch(\"/employee_word_frequencies.json\");\n        if (!wordFreqResponse.ok) {\n          throw new Error(`HTTP error when fetching word frequencies! status: ${wordFreqResponse.status}`);\n        }\n        this.allEmployeeWordFrequencies = await wordFreqResponse.json();\n        console.log(\"员工邮件主题词频数据加载完成: \", Object.keys(this.allEmployeeWordFrequencies).length, \"人份\");\n\n        // 可以在这里选择一个默认员工或等待用户选择\n        // if (this.employeeOptions.length > 0) {\n        //   this.selectedEmployee = this.employeeOptions[0].value;\n        //   this.handleEmployeeChange(this.selectedEmployee);\n        // }\n      } catch (error) {\n        console.error(\"加载初始数据失败:\", error);\n        this.$message.error(`加载初始数据失败: ${error.message}. 请确保相关CSV和JSON文件在public目录下且Python脚本已成功运行。`);\n      }\n    },\n    handleResize() {\n      this.workTimeChart && this.workTimeChart.resize();\n      this.webVisitChart && this.webVisitChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.emailActivityChart && this.emailActivityChart.resize();\n      this.personEmailCloud && this.personEmailCloud.resize();\n    },\n    handleEmployeeChange(employeeId) {\n      if (!employeeId) {\n        this.currentEmployee = null;\n        this.showAnalysis = false;\n        this.resetCharts();\n        this.employeeDepartment = \"未知\"; // 清空部门信息\n        return;\n      }\n      this.selectedEmployee = employeeId;\n      this.currentEmployee = this.employees.find(e => e.id === employeeId) || null;\n      if (this.currentEmployee) {\n        this.employeeDepartment = this.currentEmployee.department || \"未知\"; // 直接从员工对象获取部门\n        console.log(\"Current employee department:\", this.employeeDepartment); // DEBUG\n      } else {\n        this.$message.error(`Could not find employee data for ID: ${employeeId}`);\n        this.employeeDepartment = \"未知\";\n        this.showAnalysis = false;\n        this.resetCharts();\n        return;\n      }\n      this.showAnalysis = true;\n      this.loadAndProcessEmployeeData(); // 统一调用数据加载和图表更新\n    },\n    async loadAndProcessEmployeeData() {\n      // 将邮件加载和图表更新逻辑提取到新方法\n      if (!this.currentEmployee) return;\n      const emailFilePath = `/ITD-2018 Data Set/${this.analysisDate}/email.csv`;\n      try {\n        const emailData = await this.fetchCsvData(emailFilePath);\n        this.employeeEmailData = emailData;\n        console.log(\"Employee Email Data after fetch in loadAndProcessEmployeeData:\", this.employeeEmailData);\n        this.setEmployeeStats();\n        this.initEmailActivityChart();\n        this.initPersonEmailCloud();\n        this.initServerAccessChart();\n        this.checkAbnormalContent();\n        this.loadAbnormalActivities();\n        this.calculateThreatScore();\n      } catch (error) {\n        this.$message.error(\"Error loading or processing employee specific data: \" + error);\n        console.error(\"Error in loadAndProcessEmployeeData:\", error);\n        this.resetCharts(); // 出错时重置图表\n      }\n    },\n    resetCharts() {\n      this.employeeEmailData = [];\n      this.abnormalActivities = [];\n      this.threatScore = 0;\n      this.threatAssessment = \"\";\n      this.threatScoreClass = \"normal\";\n      this.initEmailActivityChart();\n      this.initPersonEmailCloud();\n    },\n    setEmployeeStats() {\n      if (!this.selectedEmployee || !this.employeeEmailData) {\n        this.emailCount = 0;\n        // 其他统计数据也应在此处重置或设为默认值\n        return;\n      }\n      console.log(\"setEmployeeStats - employeeEmailData:\", this.employeeEmailData, \"selectedEmployee:\", this.selectedEmployee); // DEBUG\n\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\"; // 特殊处理root\n\n      const employeeEmails = this.employeeEmailData.filter(email => {\n        if (!email || !this.selectedEmployee) return false;\n        const fromMatch = isSelectedUserRoot ? email.from === this.selectedEmployee : email.from === selectedUserEmailPattern;\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some(recipient => isSelectedUserRoot ? recipient.trim() === this.selectedEmployee : recipient.trim() === selectedUserEmailPattern);\n        }\n        return fromMatch || toMatch;\n      });\n      console.log(\"setEmployeeStats - filtered employeeEmails:\", employeeEmails); // DEBUG\n\n      this.emailCount = employeeEmails.length;\n\n      // 更新登录次数等其他统计信息 (如果数据已加载)\n      if (this.allLoginData.length > 0) {\n        const employeeLogins = this.allLoginData.filter(log => log.user === this.selectedEmployee);\n        this.loginCount = employeeLogins.length;\n      } else {\n        this.loginCount = 0;\n      }\n    },\n    handleTabClick(tab) {\n      // 标签切换逻辑\n      if (tab.name === \"abnormal\" && this.abnormalActivities.length > 0) {\n        this.$notify({\n          title: \"威胁提示\",\n          message: `工号${this.selectedEmployee}存在${this.abnormalActivities.length}项异常活动需要关注`,\n          type: \"warning\",\n          duration: 3000\n        });\n      }\n    },\n    calculateThreatScore() {\n      if (!this.selectedEmployee) {\n        this.threatScore = 0;\n        return;\n      }\n\n      // 根据员工异常活动数量和类型计算威胁评分\n      let score = 0;\n      let assessment = \"\";\n      switch (this.selectedEmployee) {\n        case \"1103\":\n          score = 85;\n          assessment = \"该员工存在多项高风险行为，包括非工作时间数据外发和敏感信息访问，威胁等级高。\";\n          break;\n        case \"1204\":\n          score = 78;\n          assessment = \"该员工与外部IP地址有可疑加密通信，数据传输量异常，存在数据泄露风险。\";\n          break;\n        case \"1152\":\n          score = 65;\n          assessment = \"该员工存在账户探测行为，尝试登录多个他人账户，可能试图获取未授权信息。\";\n          break;\n        case \"1307\":\n          score = 70;\n          assessment = \"该员工执行大量非常规数据库查询，查询模式显示系统性数据收集行为。\";\n          break;\n        case \"1388\":\n          score = 55;\n          assessment = \"该员工工作时间异常，多次深夜访问系统，但未发现明确数据泄露证据。\";\n          break;\n        default:\n          score = 0;\n          assessment = \"未发现明显异常行为。\";\n      }\n      this.threatScore = score;\n      this.threatAssessment = assessment;\n\n      // 设置评分样式\n      if (score >= 75) {\n        this.threatScoreClass = \"high-risk\";\n      } else if (score >= 50) {\n        this.threatScoreClass = \"medium-risk\";\n      } else if (score > 0) {\n        this.threatScoreClass = \"low-risk\";\n      } else {\n        this.threatScoreClass = \"no-risk\";\n      }\n    },\n    getEmailTrendType() {\n      if (this.selectedEmployee === \"1103\" || this.selectedEmployee === \"1204\") {\n        return \"higher\";\n      } else if (this.selectedEmployee === \"1388\") {\n        return \"lower\";\n      }\n      return \"normal\";\n    },\n    getEmailTrendIcon() {\n      const type = this.getEmailTrendType();\n      if (type === \"higher\") return \"el-icon-top\";\n      if (type === \"lower\") return \"el-icon-bottom\";\n      return \"el-icon-minus\";\n    },\n    getEmailTrendText() {\n      const type = this.getEmailTrendType();\n      if (type === \"higher\") return \"高于平均值\";\n      if (type === \"lower\") return \"低于平均值\";\n      return \"正常范围\";\n    },\n    getActivityColor(type) {\n      switch (type) {\n        case \"danger\":\n          return \"#F56C6C\";\n        case \"warning\":\n          return \"#E6A23C\";\n        case \"info\":\n          return \"#909399\";\n        default:\n          return \"#409EFF\";\n      }\n    },\n    markActivity(index) {\n      if (!this.abnormalActivities[index].marked) {\n        this.abnormalActivities[index].marked = true;\n        this.$notify({\n          title: \"标记成功\",\n          message: \"已将该异常活动标记为需要审查\",\n          type: \"success\",\n          duration: 2000\n        });\n      }\n    },\n    initWorkTimeChart() {\n      if (this.workTimeChart) {\n        this.workTimeChart.dispose();\n      }\n      this.workTimeChart = this.$echarts.init(document.getElementById(\"workTimeChart\"));\n      const days = [];\n      for (let i = 1; i <= 30; i++) {\n        const day = i < 10 ? \"0\" + i : i;\n        days.push(\"2017-11-\" + day);\n      }\n\n      // 模拟上下班打卡时间数据\n      const checkinData = [];\n      const checkoutData = [];\n      const normalCheckinData = [];\n      const normalCheckoutData = [];\n      for (let i = 0; i < 30; i++) {\n        // 为特定员工设置数据模式\n        if (this.selectedEmployee === \"1103\") {\n          // 数据外发行为\n          if (i >= 10 && i <= 15) {\n            // 11-11到11-16的异常时间\n            checkinData.push(\"08:15\");\n            checkoutData.push(\"02:30\"); // 凌晨离开，异常行为\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          } else {\n            const randomMin1 = Math.floor(Math.random() * 30);\n            const randomMin2 = Math.floor(Math.random() * 60);\n            checkinData.push(`08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`);\n            checkoutData.push(`18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`);\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          }\n        } else if (this.selectedEmployee === \"1388\") {\n          // 异常行为模式\n          if (i >= 4 && i <= 19) {\n            // 11-5到11-20的异常时间\n            const randomHour = Math.floor(Math.random() * 3) + 23;\n            const randomMin = Math.floor(Math.random() * 60);\n            if (i % 2 === 0) {\n              checkinData.push(\"-\"); // 缺勤\n              checkoutData.push(\"-\");\n            } else {\n              checkinData.push(\"09:30\"); // 迟到\n              checkoutData.push(`${randomHour}:${randomMin < 10 ? \"0\" + randomMin : randomMin}`); // 深夜\n            }\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          } else {\n            const randomMin1 = Math.floor(Math.random() * 30);\n            const randomMin2 = Math.floor(Math.random() * 60);\n            checkinData.push(`08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`);\n            checkoutData.push(`18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`);\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          }\n        } else {\n          // 正常员工模式\n          const randomMin1 = Math.floor(Math.random() * 30);\n          const randomMin2 = Math.floor(Math.random() * 60);\n          checkinData.push(`08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`);\n          checkoutData.push(`18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`);\n          normalCheckinData.push(\"08:00\");\n          normalCheckoutData.push(\"18:30\");\n        }\n      }\n      const option = {\n        title: {\n          text: \"员工上下班时间分析\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\"\n            }\n          },\n          formatter: function (params) {\n            const day = params[0].axisValue;\n            let result = day + \"<br/>\";\n            params.forEach(param => {\n              const marker = param.marker;\n              const seriesName = param.seriesName;\n              const value = param.value;\n              result += marker + \" \" + seriesName + \": \" + value + \"<br/>\";\n            });\n            return result;\n          }\n        },\n        legend: {\n          data: [\"上班打卡时间\", \"下班打卡时间\", \"部门平均上班时间\", \"部门平均下班时间\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: days,\n          axisLabel: {\n            interval: 2,\n            rotate: 45\n          }\n        },\n        yAxis: {\n          type: \"time\",\n          min: \"00:00\",\n          max: \"24:00\",\n          axisLabel: {\n            formatter: function (value) {\n              // 将小时值格式化为时间字符串\n              const date = new Date(value);\n              const hours = date.getHours().toString().padStart(2, \"0\");\n              const minutes = date.getMinutes().toString().padStart(2, \"0\");\n              return `${hours}:${minutes}`;\n            }\n          }\n        },\n        series: [{\n          name: \"上班打卡时间\",\n          type: \"line\",\n          data: checkinData\n        }, {\n          name: \"下班打卡时间\",\n          type: \"line\",\n          data: checkoutData\n        }, {\n          name: \"部门平均上班时间\",\n          type: \"line\",\n          data: normalCheckinData,\n          lineStyle: {\n            type: \"dashed\"\n          }\n        }, {\n          name: \"部门平均下班时间\",\n          type: \"line\",\n          data: normalCheckoutData,\n          lineStyle: {\n            type: \"dashed\"\n          }\n        }]\n      };\n      this.workTimeChart.setOption(option);\n    },\n    initWebVisitChart() {\n      if (this.webVisitChart) {\n        this.webVisitChart.dispose();\n      }\n      this.webVisitChart = this.$echarts.init(document.getElementById(\"webVisitChart\"));\n\n      // 模拟网页访问数据\n      let categories = [\"工作相关网站\", \"技术社区\", \"搜索引擎\", \"新闻媒体\", \"社交网站\", \"购物网站\", \"娱乐网站\", \"其他\"];\n      let normalData = [65, 15, 10, 5, 3, 1, 1, 0];\n      let employeeData = [60, 15, 12, 6, 3, 2, 1, 1];\n\n      // 为特定员工设置异常访问模式\n      if (this.selectedEmployee === \"1103\") {\n        employeeData = [50, 10, 15, 5, 5, 2, 3, 10]; // 增加了\"其他\"类别的访问\n      } else if (this.selectedEmployee === \"1152\") {\n        employeeData = [45, 15, 20, 5, 5, 0, 0, 10]; // 增加了搜索引擎和其他类别的访问\n      }\n      const option = {\n        title: {\n          text: \"网页访问类别分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"员工访问比例\", \"部门平均访问比例\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: categories,\n          axisLabel: {\n            interval: 0,\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"访问比例(%)\"\n        },\n        series: [{\n          name: \"员工访问比例\",\n          type: \"bar\",\n          data: employeeData,\n          itemStyle: {\n            color: \"#409EFF\"\n          }\n        }, {\n          name: \"部门平均访问比例\",\n          type: \"bar\",\n          data: normalData,\n          itemStyle: {\n            color: \"#909399\"\n          }\n        }]\n      };\n      this.webVisitChart.setOption(option);\n    },\n    initServerAccessChart() {\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(document.getElementById(\"serverAccessChart\"));\n      const dates = [];\n      for (let i = 1; i <= 30; i++) {\n        const day = i < 10 ? \"0\" + i : i;\n        dates.push(`11-${day}`);\n      }\n\n      // 模拟服务器访问数据\n      const accessData = [];\n      const normalData = [];\n      for (let i = 0; i < 30; i++) {\n        // 为不同员工设置不同的访问模式\n        if (this.selectedEmployee === \"1307\") {\n          // 数据库异常查询员工\n          if (i >= 7 && i <= 11) {\n            // 11-8到11-12的异常访问\n            accessData.push(Math.floor(Math.random() * 50) + 150); // 非常高的访问量\n          } else {\n            accessData.push(Math.floor(Math.random() * 20) + 10);\n          }\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        } else if (this.selectedEmployee === \"1152\") {\n          // 账户探测员工\n          if (i >= 9 && i <= 14) {\n            // 11-10到11-15的异常访问\n            accessData.push(Math.floor(Math.random() * 30) + 40); // 较高的访问量\n          } else {\n            accessData.push(Math.floor(Math.random() * 15) + 10);\n          }\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        } else {\n          // 正常员工\n          accessData.push(Math.floor(Math.random() * 20) + 10);\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        }\n      }\n      const option = {\n        title: {\n          text: \"服务器访问频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\"\n            }\n          }\n        },\n        legend: {\n          data: [\"员工访问次数\", \"部门平均访问次数\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates,\n          axisLabel: {\n            interval: 2,\n            rotate: 45\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"访问次数\"\n        },\n        series: [{\n          name: \"员工访问次数\",\n          type: \"line\",\n          data: accessData,\n          markLine: {\n            data: [{\n              type: \"average\",\n              name: \"平均值\"\n            }]\n          }\n        }, {\n          name: \"部门平均访问次数\",\n          type: \"line\",\n          data: normalData,\n          lineStyle: {\n            type: \"dashed\"\n          }\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initEmailActivityChart() {\n      if (this.emailActivityChart) {\n        this.emailActivityChart.dispose();\n      }\n      this.emailActivityChart = this.$echarts.init(document.getElementById(\"emailActivityChart\"));\n      console.log(\"initEmailActivityChart - employeeEmailData:\", this.employeeEmailData, \"selectedEmployee:\", this.selectedEmployee); // DEBUG\n\n      if (!this.selectedEmployee || !this.employeeEmailData || this.employeeEmailData.length === 0) {\n        this.emailActivityChart.setOption({\n          title: {\n            text: \"无邮件数据\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              color: \"#999\"\n            }\n          }\n        });\n        return;\n      }\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\";\n      const employeeMessages = this.employeeEmailData.filter(email => {\n        if (!email || !this.selectedEmployee) return false;\n        const fromMatch = isSelectedUserRoot ? email.from === this.selectedEmployee : email.from === selectedUserEmailPattern;\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some(recipient => isSelectedUserRoot ? recipient.trim() === this.selectedEmployee : recipient.trim() === selectedUserEmailPattern);\n        }\n        return fromMatch || toMatch;\n      });\n      console.log(\"initEmailActivityChart - filtered employeeMessages:\", employeeMessages); // DEBUG\n\n      if (employeeMessages.length === 0) {\n        this.emailActivityChart.setOption({\n          title: {\n            text: \"该员工本日无邮件活动\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: {\n              color: \"#999\"\n            }\n          }\n        });\n        return;\n      }\n\n      // 按日期聚合邮件数量\n      const dailyEmailCounts = {};\n      employeeMessages.forEach(email => {\n        // 假设 email.date 的格式是 \"YYYY/MM/DD HH:MM:SS\" 或 \"YYYY/MM/DD\"\n        // 我们只需要日期部分 \"YYYY/MM/DD\"\n        const emailDate = email.time ? email.time.split(\" \")[0].replace(/\\//g, \"-\") : null; // 使用 email.time 并替换 / 为 -\n        if (emailDate) {\n          dailyEmailCounts[emailDate] = (dailyEmailCounts[emailDate] || 0) + 1;\n        }\n      });\n      console.log(\"initEmailActivityChart - dailyEmailCounts:\", dailyEmailCounts); // DEBUG\n\n      const dates = Object.keys(dailyEmailCounts).sort();\n      const counts = dates.map(date => dailyEmailCounts[date]);\n      console.log(\"initEmailActivityChart - dates for chart:\", dates, \"counts for chart:\", counts); // DEBUG\n\n      const option = {\n        title: {\n          text: `工号 ${this.selectedEmployee} 邮件活动分析 (${this.analysisDate})`,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\"\n            }\n          }\n        },\n        legend: {\n          data: [\"发送邮件\", \"接收邮件\", \"部门平均发送\", \"部门平均接收\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates,\n          // 使用月份中的日期作为X轴\n          axisLabel: {\n            interval: 2,\n            rotate: 45\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"邮件数量\"\n        },\n        series: [{\n          name: \"发送邮件\",\n          type: \"line\",\n          stack: \"总量1\",\n          // stack可以移除，除非确实要堆叠显示\n          data: counts\n        }, {\n          name: \"接收邮件\",\n          type: \"line\",\n          stack: \"总量1\",\n          // stack可以移除\n          data: counts\n        }, {\n          name: \"部门平均发送\",\n          type: \"line\",\n          // stack: \"总量2\", // stack可以移除\n          data: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n          lineStyle: {\n            type: \"dashed\"\n          }\n        }, {\n          name: \"部门平均接收\",\n          type: \"line\",\n          // stack: \"总量2\", // stack可以移除\n          data: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n          lineStyle: {\n            type: \"dashed\"\n          }\n        }]\n      };\n      this.emailActivityChart.setOption(option);\n    },\n    initPersonEmailCloud() {\n      if (this.personEmailCloud) {\n        this.personEmailCloud.dispose();\n      }\n      this.personEmailCloud = this.$echarts.init(document.getElementById(\"personEmailCloud\"));\n      let wordCloudData = [];\n      if (this.selectedEmployee && this.allEmployeeWordFrequencies[this.selectedEmployee]) {\n        wordCloudData = this.allEmployeeWordFrequencies[this.selectedEmployee];\n        console.log(`为员工 ${this.selectedEmployee} 加载了 ${wordCloudData.length} 个词汇用于词云。`);\n      } else {\n        console.warn(`未找到员工 ${this.selectedEmployee} 的词频数据，或数据为空。词云将显示默认信息。`);\n        // 可以提供一些默认数据或提示信息\n        wordCloudData = [{\n          name: \"无\",\n          value: 10\n        }, {\n          name: \"有效\",\n          value: 8\n        }, {\n          name: \"邮件\",\n          value: 6\n        }, {\n          name: \"主题\",\n          value: 4\n        }, {\n          name: \"数据\",\n          value: 2\n        }];\n      }\n      if (wordCloudData.length === 0) {\n        console.log(`员工 ${this.selectedEmployee} 的词频数据为空数组，显示提示信息。`);\n        wordCloudData = [{\n          name: \"该用户无有效主题词汇\",\n          value: 10\n        }];\n      }\n      const option = {\n        tooltip: {\n          show: true\n        },\n        series: [{\n          type: \"wordCloud\",\n          shape: \"circle\",\n          // 词云形状，可以是 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n          left: \"center\",\n          top: \"center\",\n          width: \"90%\",\n          height: \"90%\",\n          right: null,\n          bottom: null,\n          sizeRange: [12, 60],\n          // 字体大小范围\n          rotationRange: [-90, 90],\n          // 旋转角度范围\n          rotationStep: 45,\n          gridSize: 8,\n          // 词间距\n          drawOutOfBound: false,\n          // 是否允许绘制超出边界的词\n          textStyle: {\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            // 颜色可以是一个回调函数，随机颜色\n            color: function () {\n              return \"rgb(\" + [Math.round(Math.random() * 160), Math.round(Math.random() * 160), Math.round(Math.random() * 160)].join(\",\") + \")\";\n            }\n          },\n          emphasis: {\n            focus: \"self\",\n            textStyle: {\n              textShadowBlur: 10,\n              textShadowColor: \"#333\"\n            }\n          },\n          data: wordCloudData // 使用从JSON加载并筛选的数据\n        }]\n      };\n      this.personEmailCloud.setOption(option);\n    },\n    loadAbnormalActivities() {\n      // 根据不同员工加载不同的异常活动\n      this.abnormalActivities = [];\n      if (this.selectedEmployee === \"1103\") {\n        this.abnormalActivities = [{\n          type: \"danger\",\n          timestamp: \"2017-11-12 02:35\",\n          content: \"凌晨时段登录并下载大量产品设计文件(230MB)\"\n        }, {\n          type: \"danger\",\n          timestamp: \"2017-11-12 03:10\",\n          content: \"向外部邮箱发送大附件邮件\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-13 19:45\",\n          content: \"访问了公司代码仓库中的核心产品模块\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-14 22:30\",\n          content: \"与ID-1204有多次邮件往来，内容涉及产品技术细节\"\n        }];\n      } else if (this.selectedEmployee === \"1152\") {\n        this.abnormalActivities = [{\n          type: \"danger\",\n          timestamp: \"2017-11-13 20:14\",\n          content: \"尝试登录15个不同研发人员账户，成功3次\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-13 20:38\",\n          content: \"成功登录他人账户后访问代码仓库\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-14 21:05\",\n          content: \"使用非常规IP地址登录系统\"\n        }];\n      } else if (this.selectedEmployee === \"1388\") {\n        this.abnormalActivities = [{\n          type: \"warning\",\n          timestamp: \"2017-11-15 23:45\",\n          content: \"深夜办公，访问与工作职责无关的文件\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-16 00:00\",\n          content: \"连续5天出现相似的深夜工作模式\"\n        }, {\n          type: \"info\",\n          timestamp: \"2017-11-16 08:00\",\n          content: \"次日未打卡上班\"\n        }];\n      } else if (this.selectedEmployee === \"1307\") {\n        this.abnormalActivities = [{\n          type: \"danger\",\n          timestamp: \"2017-11-10 15:23\",\n          content: \"执行超过200次数据库查询，涉及产品核心数据表\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-11 16:40\",\n          content: \"查询模式显示系统性的数据收集行为\"\n        }];\n      } else if (this.selectedEmployee === \"1204\") {\n        this.abnormalActivities = [{\n          type: \"danger\",\n          timestamp: \"2017-11-22 19:08\",\n          content: \"工作站与5个未在公司白名单内的IP地址建立加密连接\"\n        }, {\n          type: \"danger\",\n          timestamp: \"2017-11-22 20:15\",\n          content: \"传输数据约320MB，流量特征与数据泄露模式匹配\"\n        }, {\n          type: \"warning\",\n          timestamp: \"2017-11-23 10:30\",\n          content: \"与ID-1103有频繁邮件往来\"\n        }];\n      } else {\n        // 无异常活动\n      }\n    },\n    checkAbnormalContent() {\n      if (!this.employeeEmailData || this.employeeEmailData.length === 0) {\n        this.hasAbnormalContent = false;\n        return;\n      }\n      const sensitiveKeywords = [\"机密\", \"绝密\", \"confidential\", \"secret\", \"源代码\", \"财务报表\", \"核心代码\", \"核心数据\", \"密码\", \"password\"];\n\n      // 筛选当前选定员工的邮件 (与 setEmployeeStats 和 initEmailActivityChart 中逻辑一致)\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\";\n      const employeeMessages = this.employeeEmailData.filter(email => {\n        if (!email || !this.selectedEmployee) return false;\n        const fromMatch = isSelectedUserRoot ? email.from === this.selectedEmployee : email.from === selectedUserEmailPattern;\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some(recipient => isSelectedUserRoot ? recipient.trim() === this.selectedEmployee : recipient.trim() === selectedUserEmailPattern);\n        }\n        return fromMatch || toMatch;\n      });\n      for (const email of employeeMessages) {\n        if (email && email.subject) {\n          const subjectLower = email.subject.toLowerCase();\n          for (const keyword of sensitiveKeywords) {\n            if (subjectLower.includes(keyword.toLowerCase())) {\n              this.hasAbnormalContent = true;\n              this.$notify({\n                title: \"敏感内容警告\",\n                message: `在工号 ${this.selectedEmployee} 的邮件主题中检测到敏感词: \"${keyword}\"`,\n                type: \"warning\",\n                duration: 4000\n              });\n              return; // 找到一个就够了\n            }\n          }\n        }\n      }\n      this.hasAbnormalContent = false;\n    }\n  }\n};","map":{"version":3,"names":["Papa","echarts","name","data","workTimeChart","webVisitChart","serverAccessChart","emailActivityChart","personEmailCloud","selectedDepartment","selectedEmployee","currentEmployee","analysisDate","showAnalysis","activeTab","hasAbnormalContent","employeeEmailData","allLoginData","departments","employees","employeeOptions","employeeDepartment","emailCount","loginCount","abnormalActivities","threatScore","threatAssessment","threatScoreClass","employeeDepartmentMap","allEmployeeWordFrequencies","computed","employeeStats","stats","label","value","icon","color","trend","type","getEmailTrendType","getEmailTrendIcon","text","getEmailTrendText","length","mounted","loadInitialData","window","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","fetchCsvData","filePath","$message","info","response","fetch","ok","error","status","statusText","console","csvText","Promise","resolve","reject","parse","header","skipEmptyLines","complete","results","log","errors","message","deptResponse","Error","deptCsvText","deptData","tempEmployeeOptions","tempDeptMap","forEach","row","sender_id","department_name","push","sort","a","b","localeCompare","wordFreqResponse","json","Object","keys","resize","handleEmployeeChange","employeeId","resetCharts","find","e","id","department","loadAndProcessEmployeeData","emailFilePath","emailData","setEmployeeStats","initEmailActivityChart","initPersonEmailCloud","initServerAccessChart","checkAbnormalContent","loadAbnormalActivities","calculateThreatScore","selectedUserEmailPattern","isSelectedUserRoot","employeeEmails","filter","email","fromMatch","from","toMatch","to","recipients","split","some","recipient","trim","employeeLogins","user","handleTabClick","tab","$notify","title","duration","score","assessment","getActivityColor","markActivity","index","marked","initWorkTimeChart","dispose","$echarts","init","document","getElementById","days","i","day","checkinData","checkoutData","normalCheckinData","normalCheckoutData","randomMin1","Math","floor","random","randomMin2","randomHour","randomMin","option","left","tooltip","trigger","axisPointer","backgroundColor","formatter","params","axisValue","result","param","marker","seriesName","legend","top","grid","right","bottom","containLabel","xAxis","boundaryGap","axisLabel","interval","rotate","yAxis","min","max","date","Date","hours","getHours","toString","padStart","minutes","getMinutes","series","lineStyle","setOption","initWebVisitChart","categories","normalData","employeeData","itemStyle","dates","accessData","markLine","textStyle","employeeMessages","dailyEmailCounts","emailDate","time","replace","counts","map","stack","wordCloudData","warn","show","shape","width","height","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","fontFamily","fontWeight","round","join","emphasis","focus","textShadowBlur","textShadowColor","timestamp","content","sensitiveKeywords","subject","subjectLower","toLowerCase","keyword","includes"],"sources":["src/views/Person.vue"],"sourcesContent":["<template>\n  <div class=\"person-view\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span class=\"page-title\">内部威胁人员分析</span>\n            <el-tooltip\n              content=\"分析员工异常行为特征，识别潜在内部威胁人员\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n            <el-select\n              v-model=\"selectedEmployee\"\n              placeholder=\"选择员工\"\n              style=\"float: right; width: 240px\"\n              @change=\"handleEmployeeChange\"\n            >\n              <el-option\n                v-for=\"item in employeeOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              >\n              </el-option>\n            </el-select>\n          </div>\n          <p class=\"section-description\" v-if=\"selectedEmployee\">\n            通过分析工号{{\n              selectedEmployee\n            }}的登录活动、邮件通信和服务器访问模式，识别可能的异常行为和威胁迹象。\n          </p>\n          <div v-if=\"!selectedEmployee\" class=\"empty-state\">\n            <i class=\"el-icon-user-solid empty-icon\"></i>\n            <p>请从下拉菜单选择一名员工进行分析</p>\n          </div>\n\n          <el-tabs\n            v-model=\"activeTab\"\n            @tab-click=\"handleTabClick\"\n            v-if=\"selectedEmployee\"\n          >\n            <el-tab-pane label=\"威胁概览\" name=\"overview\">\n              <el-row :gutter=\"20\">\n                <el-col\n                  :span=\"6\"\n                  v-for=\"(stat, index) in employeeStats\"\n                  :key=\"index\"\n                >\n                  <el-card shadow=\"hover\" class=\"stat-card\">\n                    <div class=\"stat-card-body\">\n                      <i\n                        :class=\"stat.icon + ' stat-icon'\"\n                        :style=\"{ color: stat.color }\"\n                      ></i>\n                      <div class=\"stat-info\">\n                        <div class=\"stat-label\">{{ stat.label }}</div>\n                        <div class=\"stat-value\">{{ stat.value }}</div>\n                        <div\n                          v-if=\"stat.trend\"\n                          class=\"stat-trend\"\n                          :class=\"stat.trend.type\"\n                        >\n                          <i :class=\"stat.trend.icon\"></i>\n                          {{ stat.trend.text }}\n                        </div>\n                      </div>\n                    </div>\n                  </el-card>\n                </el-col>\n              </el-row>\n\n              <el-divider content-position=\"center\">行为分析</el-divider>\n\n              <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n                <el-col :span=\"12\">\n                  <el-card shadow=\"hover\" class=\"chart-card\">\n                    <div slot=\"header\" class=\"clearfix\">\n                      <span>服务器访问模式</span>\n                    </div>\n                    <div class=\"chart-container\" id=\"serverAccessChart\"></div>\n                  </el-card>\n                </el-col>\n                <el-col :span=\"12\">\n                  <el-card shadow=\"hover\" class=\"chart-card\">\n                    <div slot=\"header\" class=\"clearfix\">\n                      <span>邮件通信活动</span>\n                    </div>\n                    <div class=\"chart-container\" id=\"emailActivityChart\"></div>\n                  </el-card>\n                </el-col>\n              </el-row>\n\n              <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n                <el-col :span=\"24\">\n                  <el-card shadow=\"hover\" class=\"chart-card\">\n                    <div slot=\"header\" class=\"clearfix\">\n                      <span>邮件内容分析</span>\n                      <el-tag\n                        v-if=\"hasAbnormalContent\"\n                        type=\"danger\"\n                        size=\"mini\"\n                        effect=\"dark\"\n                        style=\"float: right\"\n                      >\n                        检测到敏感内容\n                      </el-tag>\n                    </div>\n                    <div\n                      class=\"chart-container\"\n                      id=\"personEmailCloud\"\n                      style=\"height: 420px\"\n                    ></div>\n                  </el-card>\n                </el-col>\n              </el-row>\n            </el-tab-pane>\n            <el-tab-pane label=\"异常活动\" name=\"abnormal\">\n              <div class=\"threat-score-container\" v-if=\"threatScore > 0\">\n                <div class=\"threat-score\" :class=\"threatScoreClass\">\n                  <div class=\"score-value\">{{ threatScore }}</div>\n                  <div class=\"score-label\">威胁评分</div>\n                </div>\n                <div class=\"threat-assessment\">\n                  <h3>威胁评估</h3>\n                  <p>{{ threatAssessment }}</p>\n                </div>\n              </div>\n\n              <div\n                v-if=\"abnormalActivities.length === 0\"\n                class=\"empty-activities\"\n              >\n                <i class=\"el-icon-circle-check\"></i>\n                <p>未检测到异常活动</p>\n              </div>\n\n              <el-timeline v-else>\n                <el-timeline-item\n                  v-for=\"(activity, index) in abnormalActivities\"\n                  :key=\"index\"\n                  :timestamp=\"activity.timestamp\"\n                  :type=\"activity.type\"\n                  :color=\"getActivityColor(activity.type)\"\n                  placement=\"top\"\n                >\n                  <el-card :body-style=\"{ padding: '15px' }\" shadow=\"hover\">\n                    <h4>{{ activity.content }}</h4>\n                    <p v-if=\"activity.details\" class=\"activity-details\">\n                      {{ activity.details }}\n                    </p>\n                    <div class=\"activity-actions\">\n                      <el-button\n                        type=\"text\"\n                        size=\"mini\"\n                        @click=\"markActivity(index)\"\n                      >\n                        标记为审查\n                      </el-button>\n                      <el-tag size=\"mini\" type=\"info\" v-if=\"activity.marked\">\n                        已标记\n                      </el-tag>\n                    </div>\n                  </el-card>\n                </el-timeline-item>\n              </el-timeline>\n            </el-tab-pane>\n          </el-tabs>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport Papa from \"papaparse\";\nimport * as echarts from \"echarts\";\n\nexport default {\n  name: \"Person\",\n  data() {\n    return {\n      // 图表实例\n      workTimeChart: null,\n      webVisitChart: null,\n      serverAccessChart: null,\n      emailActivityChart: null,\n      personEmailCloud: null,\n\n      // 选择和过滤相关数据\n      selectedDepartment: \"研发1部\",\n      selectedEmployee: \"\",\n      currentEmployee: null,\n      analysisDate: \"2017-11-30\",\n      showAnalysis: false,\n      activeTab: \"overview\",\n      hasAbnormalContent: false,\n\n      // 从CSV加载的原始数据\n      employeeEmailData: [],\n      allLoginData: [], // 用于存储所有登录记录以提取员工列表\n\n      // 下拉选项数据 - 将被动态填充\n      departments: [\"研发1部\", \"研发2部\", \"研发3部\", \"人力资源部\", \"财务部\"], // 这个列表可能也需要回顾\n      employees: [], // 将从 login.csv 动态加载\n      employeeOptions: [], // 将从 login.csv 动态加载\n\n      // 统计数据\n      employeeDepartment: \"未知\",\n      emailCount: 0,\n      loginCount: 0, // 将由login.csv数据更新\n\n      // 异常活动列表\n      abnormalActivities: [],\n      threatScore: 0,\n      threatAssessment: \"\",\n      threatScoreClass: \"normal\",\n\n      // 新增：存储员工ID到部门的映射\n      employeeDepartmentMap: {},\n      // 新增：存储所有员工的邮件主题词频数据\n      allEmployeeWordFrequencies: {},\n    };\n  },\n  computed: {\n    employeeStats() {\n      if (!this.selectedEmployee) return [];\n\n      // 根据员工ID定制统计信息\n      const stats = [\n        {\n          label: \"员工ID\",\n          value: this.selectedEmployee,\n          icon: \"el-icon-user-solid\",\n          color: \"#409EFF\",\n        },\n        {\n          label: \"所属部门\",\n          value: this.employeeDepartment,\n          icon: \"el-icon-office-building\",\n          color: \"#67C23A\",\n        },\n        {\n          label: \"邮件数量\",\n          value: this.emailCount,\n          icon: \"el-icon-message\",\n          color: \"#E6A23C\",\n          trend: {\n            type: this.getEmailTrendType(),\n            icon: this.getEmailTrendIcon(),\n            text: this.getEmailTrendText(),\n          },\n        },\n        {\n          label: \"异常行为\",\n          value: this.abnormalActivities.length,\n          icon: \"el-icon-warning\",\n          color: this.abnormalActivities.length > 0 ? \"#F56C6C\" : \"#909399\",\n        },\n      ];\n\n      return stats;\n    },\n  },\n  async mounted() {\n    this.loadInitialData(); // 加载所有初始数据\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  methods: {\n    async fetchCsvData(filePath) {\n      this.$message.info(`Fetching data from: ${filePath}`);\n      try {\n        const response = await fetch(filePath);\n        if (!response.ok) {\n          this.$message.error(\n            `Error fetching ${filePath}: ${response.status} ${response.statusText}`\n          );\n          console.error(\n            `Error fetching ${filePath}: ${response.status} ${response.statusText}`\n          );\n          return [];\n        }\n        const csvText = await response.text();\n        return new Promise((resolve, reject) => {\n          Papa.parse(csvText, {\n            header: true,\n            skipEmptyLines: true,\n            complete: (results) => {\n              console.log(\n                \"Fetched CSV Data for \" + filePath + \":\",\n                results.data\n              ); // DEBUG\n              if (results.errors && results.errors.length > 0) {\n                this.$message.error(\n                  `Error parsing CSV ${filePath}: ${results.errors[0].message}`\n                );\n                console.error(`Error parsing CSV ${filePath}:`, results.errors);\n                reject(results.errors);\n              } else {\n                resolve(results.data);\n              }\n            },\n            error: (error) => {\n              this.$message.error(\n                `PapaParse error for ${filePath}: ${error.message}`\n              );\n              console.error(`PapaParse error for ${filePath}:`, error);\n              reject(error);\n            },\n          });\n        });\n      } catch (error) {\n        this.$message.error(\n          `Exception fetching or parsing ${filePath}: ${error}`\n        );\n        console.error(`Exception fetching or parsing ${filePath}:`, error);\n        return [];\n      }\n    },\n    async loadInitialData() {\n      console.log(\"Person.vue: 开始加载初始数据...\");\n      try {\n        // 加载员工部门映射\n        const deptResponse = await fetch(\"/employee_department_mapping.csv\");\n        if (!deptResponse.ok) {\n          throw new Error(\n            `HTTP error when fetching department mapping! status: ${deptResponse.status}`\n          );\n        }\n        const deptCsvText = await deptResponse.text();\n        const deptData = Papa.parse(deptCsvText, {\n          header: true,\n          skipEmptyLines: true,\n        }).data;\n\n        const tempEmployeeOptions = [];\n        const tempDeptMap = {};\n        deptData.forEach((row) => {\n          if (row.sender_id && row.department_name) {\n            tempEmployeeOptions.push({\n              value: row.sender_id,\n              label: `${row.sender_id} (${row.department_name})`,\n            });\n            tempDeptMap[row.sender_id] = row.department_name;\n          }\n        });\n\n        this.employeeOptions = tempEmployeeOptions.sort((a, b) =>\n          a.label.localeCompare(b.label)\n        );\n        this.employeeDepartmentMap = tempDeptMap;\n        console.log(\n          \"员工部门映射加载完成: \",\n          this.employeeOptions.length,\n          \"人\"\n        );\n\n        // 新增：加载员工邮件主题词频数据\n        const wordFreqResponse = await fetch(\"/employee_word_frequencies.json\");\n        if (!wordFreqResponse.ok) {\n          throw new Error(\n            `HTTP error when fetching word frequencies! status: ${wordFreqResponse.status}`\n          );\n        }\n        this.allEmployeeWordFrequencies = await wordFreqResponse.json();\n        console.log(\n          \"员工邮件主题词频数据加载完成: \",\n          Object.keys(this.allEmployeeWordFrequencies).length,\n          \"人份\"\n        );\n\n        // 可以在这里选择一个默认员工或等待用户选择\n        // if (this.employeeOptions.length > 0) {\n        //   this.selectedEmployee = this.employeeOptions[0].value;\n        //   this.handleEmployeeChange(this.selectedEmployee);\n        // }\n      } catch (error) {\n        console.error(\"加载初始数据失败:\", error);\n        this.$message.error(\n          `加载初始数据失败: ${error.message}. 请确保相关CSV和JSON文件在public目录下且Python脚本已成功运行。`\n        );\n      }\n    },\n    handleResize() {\n      this.workTimeChart && this.workTimeChart.resize();\n      this.webVisitChart && this.webVisitChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.emailActivityChart && this.emailActivityChart.resize();\n      this.personEmailCloud && this.personEmailCloud.resize();\n    },\n    handleEmployeeChange(employeeId) {\n      if (!employeeId) {\n        this.currentEmployee = null;\n        this.showAnalysis = false;\n        this.resetCharts();\n        this.employeeDepartment = \"未知\"; // 清空部门信息\n        return;\n      }\n      this.selectedEmployee = employeeId;\n      this.currentEmployee =\n        this.employees.find((e) => e.id === employeeId) || null;\n\n      if (this.currentEmployee) {\n        this.employeeDepartment = this.currentEmployee.department || \"未知\"; // 直接从员工对象获取部门\n        console.log(\"Current employee department:\", this.employeeDepartment); // DEBUG\n      } else {\n        this.$message.error(\n          `Could not find employee data for ID: ${employeeId}`\n        );\n        this.employeeDepartment = \"未知\";\n        this.showAnalysis = false;\n        this.resetCharts();\n        return;\n      }\n      this.showAnalysis = true;\n      this.loadAndProcessEmployeeData(); // 统一调用数据加载和图表更新\n    },\n    async loadAndProcessEmployeeData() {\n      // 将邮件加载和图表更新逻辑提取到新方法\n      if (!this.currentEmployee) return;\n\n      const emailFilePath = `/ITD-2018 Data Set/${this.analysisDate}/email.csv`;\n      try {\n        const emailData = await this.fetchCsvData(emailFilePath);\n        this.employeeEmailData = emailData;\n        console.log(\n          \"Employee Email Data after fetch in loadAndProcessEmployeeData:\",\n          this.employeeEmailData\n        );\n\n        this.setEmployeeStats();\n        this.initEmailActivityChart();\n        this.initPersonEmailCloud();\n        this.initServerAccessChart();\n        this.checkAbnormalContent();\n        this.loadAbnormalActivities();\n        this.calculateThreatScore();\n      } catch (error) {\n        this.$message.error(\n          \"Error loading or processing employee specific data: \" + error\n        );\n        console.error(\"Error in loadAndProcessEmployeeData:\", error);\n        this.resetCharts(); // 出错时重置图表\n      }\n    },\n    resetCharts() {\n      this.employeeEmailData = [];\n      this.abnormalActivities = [];\n      this.threatScore = 0;\n      this.threatAssessment = \"\";\n      this.threatScoreClass = \"normal\";\n      this.initEmailActivityChart();\n      this.initPersonEmailCloud();\n    },\n    setEmployeeStats() {\n      if (!this.selectedEmployee || !this.employeeEmailData) {\n        this.emailCount = 0;\n        // 其他统计数据也应在此处重置或设为默认值\n        return;\n      }\n      console.log(\n        \"setEmployeeStats - employeeEmailData:\",\n        this.employeeEmailData,\n        \"selectedEmployee:\",\n        this.selectedEmployee\n      ); // DEBUG\n\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\"; // 特殊处理root\n\n      const employeeEmails = this.employeeEmailData.filter((email) => {\n        if (!email || !this.selectedEmployee) return false;\n\n        const fromMatch = isSelectedUserRoot\n          ? email.from === this.selectedEmployee\n          : email.from === selectedUserEmailPattern;\n\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some((recipient) =>\n            isSelectedUserRoot\n              ? recipient.trim() === this.selectedEmployee\n              : recipient.trim() === selectedUserEmailPattern\n          );\n        }\n        return fromMatch || toMatch;\n      });\n\n      console.log(\n        \"setEmployeeStats - filtered employeeEmails:\",\n        employeeEmails\n      ); // DEBUG\n\n      this.emailCount = employeeEmails.length;\n\n      // 更新登录次数等其他统计信息 (如果数据已加载)\n      if (this.allLoginData.length > 0) {\n        const employeeLogins = this.allLoginData.filter(\n          (log) => log.user === this.selectedEmployee\n        );\n        this.loginCount = employeeLogins.length;\n      } else {\n        this.loginCount = 0;\n      }\n    },\n    handleTabClick(tab) {\n      // 标签切换逻辑\n      if (tab.name === \"abnormal\" && this.abnormalActivities.length > 0) {\n        this.$notify({\n          title: \"威胁提示\",\n          message: `工号${this.selectedEmployee}存在${this.abnormalActivities.length}项异常活动需要关注`,\n          type: \"warning\",\n          duration: 3000,\n        });\n      }\n    },\n    calculateThreatScore() {\n      if (!this.selectedEmployee) {\n        this.threatScore = 0;\n        return;\n      }\n\n      // 根据员工异常活动数量和类型计算威胁评分\n      let score = 0;\n      let assessment = \"\";\n\n      switch (this.selectedEmployee) {\n        case \"1103\":\n          score = 85;\n          assessment =\n            \"该员工存在多项高风险行为，包括非工作时间数据外发和敏感信息访问，威胁等级高。\";\n          break;\n        case \"1204\":\n          score = 78;\n          assessment =\n            \"该员工与外部IP地址有可疑加密通信，数据传输量异常，存在数据泄露风险。\";\n          break;\n        case \"1152\":\n          score = 65;\n          assessment =\n            \"该员工存在账户探测行为，尝试登录多个他人账户，可能试图获取未授权信息。\";\n          break;\n        case \"1307\":\n          score = 70;\n          assessment =\n            \"该员工执行大量非常规数据库查询，查询模式显示系统性数据收集行为。\";\n          break;\n        case \"1388\":\n          score = 55;\n          assessment =\n            \"该员工工作时间异常，多次深夜访问系统，但未发现明确数据泄露证据。\";\n          break;\n        default:\n          score = 0;\n          assessment = \"未发现明显异常行为。\";\n      }\n\n      this.threatScore = score;\n      this.threatAssessment = assessment;\n\n      // 设置评分样式\n      if (score >= 75) {\n        this.threatScoreClass = \"high-risk\";\n      } else if (score >= 50) {\n        this.threatScoreClass = \"medium-risk\";\n      } else if (score > 0) {\n        this.threatScoreClass = \"low-risk\";\n      } else {\n        this.threatScoreClass = \"no-risk\";\n      }\n    },\n    getEmailTrendType() {\n      if (\n        this.selectedEmployee === \"1103\" ||\n        this.selectedEmployee === \"1204\"\n      ) {\n        return \"higher\";\n      } else if (this.selectedEmployee === \"1388\") {\n        return \"lower\";\n      }\n      return \"normal\";\n    },\n    getEmailTrendIcon() {\n      const type = this.getEmailTrendType();\n      if (type === \"higher\") return \"el-icon-top\";\n      if (type === \"lower\") return \"el-icon-bottom\";\n      return \"el-icon-minus\";\n    },\n    getEmailTrendText() {\n      const type = this.getEmailTrendType();\n      if (type === \"higher\") return \"高于平均值\";\n      if (type === \"lower\") return \"低于平均值\";\n      return \"正常范围\";\n    },\n    getActivityColor(type) {\n      switch (type) {\n        case \"danger\":\n          return \"#F56C6C\";\n        case \"warning\":\n          return \"#E6A23C\";\n        case \"info\":\n          return \"#909399\";\n        default:\n          return \"#409EFF\";\n      }\n    },\n    markActivity(index) {\n      if (!this.abnormalActivities[index].marked) {\n        this.abnormalActivities[index].marked = true;\n        this.$notify({\n          title: \"标记成功\",\n          message: \"已将该异常活动标记为需要审查\",\n          type: \"success\",\n          duration: 2000,\n        });\n      }\n    },\n    initWorkTimeChart() {\n      if (this.workTimeChart) {\n        this.workTimeChart.dispose();\n      }\n      this.workTimeChart = this.$echarts.init(\n        document.getElementById(\"workTimeChart\")\n      );\n\n      const days = [];\n      for (let i = 1; i <= 30; i++) {\n        const day = i < 10 ? \"0\" + i : i;\n        days.push(\"2017-11-\" + day);\n      }\n\n      // 模拟上下班打卡时间数据\n      const checkinData = [];\n      const checkoutData = [];\n      const normalCheckinData = [];\n      const normalCheckoutData = [];\n\n      for (let i = 0; i < 30; i++) {\n        // 为特定员工设置数据模式\n        if (this.selectedEmployee === \"1103\") {\n          // 数据外发行为\n          if (i >= 10 && i <= 15) {\n            // 11-11到11-16的异常时间\n            checkinData.push(\"08:15\");\n            checkoutData.push(\"02:30\"); // 凌晨离开，异常行为\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          } else {\n            const randomMin1 = Math.floor(Math.random() * 30);\n            const randomMin2 = Math.floor(Math.random() * 60);\n            checkinData.push(\n              `08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`\n            );\n            checkoutData.push(\n              `18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`\n            );\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          }\n        } else if (this.selectedEmployee === \"1388\") {\n          // 异常行为模式\n          if (i >= 4 && i <= 19) {\n            // 11-5到11-20的异常时间\n            const randomHour = Math.floor(Math.random() * 3) + 23;\n            const randomMin = Math.floor(Math.random() * 60);\n\n            if (i % 2 === 0) {\n              checkinData.push(\"-\"); // 缺勤\n              checkoutData.push(\"-\");\n            } else {\n              checkinData.push(\"09:30\"); // 迟到\n              checkoutData.push(\n                `${randomHour}:${randomMin < 10 ? \"0\" + randomMin : randomMin}`\n              ); // 深夜\n            }\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          } else {\n            const randomMin1 = Math.floor(Math.random() * 30);\n            const randomMin2 = Math.floor(Math.random() * 60);\n            checkinData.push(\n              `08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`\n            );\n            checkoutData.push(\n              `18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`\n            );\n            normalCheckinData.push(\"08:00\");\n            normalCheckoutData.push(\"18:30\");\n          }\n        } else {\n          // 正常员工模式\n          const randomMin1 = Math.floor(Math.random() * 30);\n          const randomMin2 = Math.floor(Math.random() * 60);\n          checkinData.push(\n            `08:${randomMin1 < 10 ? \"0\" + randomMin1 : randomMin1}`\n          );\n          checkoutData.push(\n            `18:${randomMin2 < 10 ? \"0\" + randomMin2 : randomMin2}`\n          );\n          normalCheckinData.push(\"08:00\");\n          normalCheckoutData.push(\"18:30\");\n        }\n      }\n\n      const option = {\n        title: {\n          text: \"员工上下班时间分析\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\",\n            },\n          },\n          formatter: function (params) {\n            const day = params[0].axisValue;\n            let result = day + \"<br/>\";\n            params.forEach((param) => {\n              const marker = param.marker;\n              const seriesName = param.seriesName;\n              const value = param.value;\n              result += marker + \" \" + seriesName + \": \" + value + \"<br/>\";\n            });\n            return result;\n          },\n        },\n        legend: {\n          data: [\n            \"上班打卡时间\",\n            \"下班打卡时间\",\n            \"部门平均上班时间\",\n            \"部门平均下班时间\",\n          ],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: days,\n          axisLabel: {\n            interval: 2,\n            rotate: 45,\n          },\n        },\n        yAxis: {\n          type: \"time\",\n          min: \"00:00\",\n          max: \"24:00\",\n          axisLabel: {\n            formatter: function (value) {\n              // 将小时值格式化为时间字符串\n              const date = new Date(value);\n              const hours = date.getHours().toString().padStart(2, \"0\");\n              const minutes = date.getMinutes().toString().padStart(2, \"0\");\n              return `${hours}:${minutes}`;\n            },\n          },\n        },\n        series: [\n          {\n            name: \"上班打卡时间\",\n            type: \"line\",\n            data: checkinData,\n          },\n          {\n            name: \"下班打卡时间\",\n            type: \"line\",\n            data: checkoutData,\n          },\n          {\n            name: \"部门平均上班时间\",\n            type: \"line\",\n            data: normalCheckinData,\n            lineStyle: {\n              type: \"dashed\",\n            },\n          },\n          {\n            name: \"部门平均下班时间\",\n            type: \"line\",\n            data: normalCheckoutData,\n            lineStyle: {\n              type: \"dashed\",\n            },\n          },\n        ],\n      };\n\n      this.workTimeChart.setOption(option);\n    },\n    initWebVisitChart() {\n      if (this.webVisitChart) {\n        this.webVisitChart.dispose();\n      }\n      this.webVisitChart = this.$echarts.init(\n        document.getElementById(\"webVisitChart\")\n      );\n\n      // 模拟网页访问数据\n      let categories = [\n        \"工作相关网站\",\n        \"技术社区\",\n        \"搜索引擎\",\n        \"新闻媒体\",\n        \"社交网站\",\n        \"购物网站\",\n        \"娱乐网站\",\n        \"其他\",\n      ];\n      let normalData = [65, 15, 10, 5, 3, 1, 1, 0];\n      let employeeData = [60, 15, 12, 6, 3, 2, 1, 1];\n\n      // 为特定员工设置异常访问模式\n      if (this.selectedEmployee === \"1103\") {\n        employeeData = [50, 10, 15, 5, 5, 2, 3, 10]; // 增加了\"其他\"类别的访问\n      } else if (this.selectedEmployee === \"1152\") {\n        employeeData = [45, 15, 20, 5, 5, 0, 0, 10]; // 增加了搜索引擎和其他类别的访问\n      }\n\n      const option = {\n        title: {\n          text: \"网页访问类别分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\"员工访问比例\", \"部门平均访问比例\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: categories,\n          axisLabel: {\n            interval: 0,\n            rotate: 30,\n          },\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"访问比例(%)\",\n        },\n        series: [\n          {\n            name: \"员工访问比例\",\n            type: \"bar\",\n            data: employeeData,\n            itemStyle: {\n              color: \"#409EFF\",\n            },\n          },\n          {\n            name: \"部门平均访问比例\",\n            type: \"bar\",\n            data: normalData,\n            itemStyle: {\n              color: \"#909399\",\n            },\n          },\n        ],\n      };\n\n      this.webVisitChart.setOption(option);\n    },\n    initServerAccessChart() {\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      this.serverAccessChart = this.$echarts.init(\n        document.getElementById(\"serverAccessChart\")\n      );\n\n      const dates = [];\n      for (let i = 1; i <= 30; i++) {\n        const day = i < 10 ? \"0\" + i : i;\n        dates.push(`11-${day}`);\n      }\n\n      // 模拟服务器访问数据\n      const accessData = [];\n      const normalData = [];\n\n      for (let i = 0; i < 30; i++) {\n        // 为不同员工设置不同的访问模式\n        if (this.selectedEmployee === \"1307\") {\n          // 数据库异常查询员工\n          if (i >= 7 && i <= 11) {\n            // 11-8到11-12的异常访问\n            accessData.push(Math.floor(Math.random() * 50) + 150); // 非常高的访问量\n          } else {\n            accessData.push(Math.floor(Math.random() * 20) + 10);\n          }\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        } else if (this.selectedEmployee === \"1152\") {\n          // 账户探测员工\n          if (i >= 9 && i <= 14) {\n            // 11-10到11-15的异常访问\n            accessData.push(Math.floor(Math.random() * 30) + 40); // 较高的访问量\n          } else {\n            accessData.push(Math.floor(Math.random() * 15) + 10);\n          }\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        } else {\n          // 正常员工\n          accessData.push(Math.floor(Math.random() * 20) + 10);\n          normalData.push(Math.floor(Math.random() * 10) + 20);\n        }\n      }\n\n      const option = {\n        title: {\n          text: \"服务器访问频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\",\n            },\n          },\n        },\n        legend: {\n          data: [\"员工访问次数\", \"部门平均访问次数\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates,\n          axisLabel: {\n            interval: 2,\n            rotate: 45,\n          },\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"访问次数\",\n        },\n        series: [\n          {\n            name: \"员工访问次数\",\n            type: \"line\",\n            data: accessData,\n            markLine: {\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                },\n              ],\n            },\n          },\n          {\n            name: \"部门平均访问次数\",\n            type: \"line\",\n            data: normalData,\n            lineStyle: {\n              type: \"dashed\",\n            },\n          },\n        ],\n      };\n\n      this.serverAccessChart.setOption(option);\n    },\n    initEmailActivityChart() {\n      if (this.emailActivityChart) {\n        this.emailActivityChart.dispose();\n      }\n      this.emailActivityChart = this.$echarts.init(\n        document.getElementById(\"emailActivityChart\")\n      );\n      console.log(\n        \"initEmailActivityChart - employeeEmailData:\",\n        this.employeeEmailData,\n        \"selectedEmployee:\",\n        this.selectedEmployee\n      ); // DEBUG\n\n      if (\n        !this.selectedEmployee ||\n        !this.employeeEmailData ||\n        this.employeeEmailData.length === 0\n      ) {\n        this.emailActivityChart.setOption({\n          title: {\n            text: \"无邮件数据\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: { color: \"#999\" },\n          },\n        });\n        return;\n      }\n\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\";\n\n      const employeeMessages = this.employeeEmailData.filter((email) => {\n        if (!email || !this.selectedEmployee) return false;\n\n        const fromMatch = isSelectedUserRoot\n          ? email.from === this.selectedEmployee\n          : email.from === selectedUserEmailPattern;\n\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some((recipient) =>\n            isSelectedUserRoot\n              ? recipient.trim() === this.selectedEmployee\n              : recipient.trim() === selectedUserEmailPattern\n          );\n        }\n        return fromMatch || toMatch;\n      });\n\n      console.log(\n        \"initEmailActivityChart - filtered employeeMessages:\",\n        employeeMessages\n      ); // DEBUG\n\n      if (employeeMessages.length === 0) {\n        this.emailActivityChart.setOption({\n          title: {\n            text: \"该员工本日无邮件活动\",\n            left: \"center\",\n            top: \"center\",\n            textStyle: { color: \"#999\" },\n          },\n        });\n        return;\n      }\n\n      // 按日期聚合邮件数量\n      const dailyEmailCounts = {};\n      employeeMessages.forEach((email) => {\n        // 假设 email.date 的格式是 \"YYYY/MM/DD HH:MM:SS\" 或 \"YYYY/MM/DD\"\n        // 我们只需要日期部分 \"YYYY/MM/DD\"\n        const emailDate = email.time\n          ? email.time.split(\" \")[0].replace(/\\//g, \"-\")\n          : null; // 使用 email.time 并替换 / 为 -\n        if (emailDate) {\n          dailyEmailCounts[emailDate] = (dailyEmailCounts[emailDate] || 0) + 1;\n        }\n      });\n      console.log(\n        \"initEmailActivityChart - dailyEmailCounts:\",\n        dailyEmailCounts\n      ); // DEBUG\n\n      const dates = Object.keys(dailyEmailCounts).sort();\n      const counts = dates.map((date) => dailyEmailCounts[date]);\n      console.log(\n        \"initEmailActivityChart - dates for chart:\",\n        dates,\n        \"counts for chart:\",\n        counts\n      ); // DEBUG\n\n      const option = {\n        title: {\n          text: `工号 ${this.selectedEmployee} 邮件活动分析 (${this.analysisDate})`,\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\",\n            },\n          },\n        },\n        legend: {\n          data: [\"发送邮件\", \"接收邮件\", \"部门平均发送\", \"部门平均接收\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates, // 使用月份中的日期作为X轴\n          axisLabel: {\n            interval: 2,\n            rotate: 45,\n          },\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"邮件数量\",\n        },\n        series: [\n          {\n            name: \"发送邮件\",\n            type: \"line\",\n            stack: \"总量1\", // stack可以移除，除非确实要堆叠显示\n            data: counts,\n          },\n          {\n            name: \"接收邮件\",\n            type: \"line\",\n            stack: \"总量1\", // stack可以移除\n            data: counts,\n          },\n          {\n            name: \"部门平均发送\",\n            type: \"line\",\n            // stack: \"总量2\", // stack可以移除\n            data: [\n              3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n              3, 3, 3, 3, 3, 3, 3, 3,\n            ],\n            lineStyle: {\n              type: \"dashed\",\n            },\n          },\n          {\n            name: \"部门平均接收\",\n            type: \"line\",\n            // stack: \"总量2\", // stack可以移除\n            data: [\n              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n              7, 7, 7, 7, 7, 7, 7, 7,\n            ],\n            lineStyle: {\n              type: \"dashed\",\n            },\n          },\n        ],\n      };\n\n      this.emailActivityChart.setOption(option);\n    },\n    initPersonEmailCloud() {\n      if (this.personEmailCloud) {\n        this.personEmailCloud.dispose();\n      }\n      this.personEmailCloud = this.$echarts.init(\n        document.getElementById(\"personEmailCloud\")\n      );\n\n      let wordCloudData = [];\n      if (\n        this.selectedEmployee &&\n        this.allEmployeeWordFrequencies[this.selectedEmployee]\n      ) {\n        wordCloudData = this.allEmployeeWordFrequencies[this.selectedEmployee];\n        console.log(\n          `为员工 ${this.selectedEmployee} 加载了 ${wordCloudData.length} 个词汇用于词云。`\n        );\n      } else {\n        console.warn(\n          `未找到员工 ${this.selectedEmployee} 的词频数据，或数据为空。词云将显示默认信息。`\n        );\n        // 可以提供一些默认数据或提示信息\n        wordCloudData = [\n          { name: \"无\", value: 10 },\n          { name: \"有效\", value: 8 },\n          { name: \"邮件\", value: 6 },\n          { name: \"主题\", value: 4 },\n          { name: \"数据\", value: 2 },\n        ];\n      }\n\n      if (wordCloudData.length === 0) {\n        console.log(\n          `员工 ${this.selectedEmployee} 的词频数据为空数组，显示提示信息。`\n        );\n        wordCloudData = [{ name: \"该用户无有效主题词汇\", value: 10 }];\n      }\n\n      const option = {\n        tooltip: {\n          show: true,\n        },\n        series: [\n          {\n            type: \"wordCloud\",\n            shape: \"circle\", // 词云形状，可以是 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n            left: \"center\",\n            top: \"center\",\n            width: \"90%\",\n            height: \"90%\",\n            right: null,\n            bottom: null,\n            sizeRange: [12, 60], // 字体大小范围\n            rotationRange: [-90, 90], // 旋转角度范围\n            rotationStep: 45,\n            gridSize: 8, // 词间距\n            drawOutOfBound: false, // 是否允许绘制超出边界的词\n            textStyle: {\n              fontFamily: \"sans-serif\",\n              fontWeight: \"bold\",\n              // 颜色可以是一个回调函数，随机颜色\n              color: function () {\n                return (\n                  \"rgb(\" +\n                  [\n                    Math.round(Math.random() * 160),\n                    Math.round(Math.random() * 160),\n                    Math.round(Math.random() * 160),\n                  ].join(\",\") +\n                  \")\"\n                );\n              },\n            },\n            emphasis: {\n              focus: \"self\",\n              textStyle: {\n                textShadowBlur: 10,\n                textShadowColor: \"#333\",\n              },\n            },\n            data: wordCloudData, // 使用从JSON加载并筛选的数据\n          },\n        ],\n      };\n      this.personEmailCloud.setOption(option);\n    },\n    loadAbnormalActivities() {\n      // 根据不同员工加载不同的异常活动\n      this.abnormalActivities = [];\n\n      if (this.selectedEmployee === \"1103\") {\n        this.abnormalActivities = [\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-12 02:35\",\n            content: \"凌晨时段登录并下载大量产品设计文件(230MB)\",\n          },\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-12 03:10\",\n            content: \"向外部邮箱发送大附件邮件\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-13 19:45\",\n            content: \"访问了公司代码仓库中的核心产品模块\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-14 22:30\",\n            content: \"与ID-1204有多次邮件往来，内容涉及产品技术细节\",\n          },\n        ];\n      } else if (this.selectedEmployee === \"1152\") {\n        this.abnormalActivities = [\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-13 20:14\",\n            content: \"尝试登录15个不同研发人员账户，成功3次\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-13 20:38\",\n            content: \"成功登录他人账户后访问代码仓库\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-14 21:05\",\n            content: \"使用非常规IP地址登录系统\",\n          },\n        ];\n      } else if (this.selectedEmployee === \"1388\") {\n        this.abnormalActivities = [\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-15 23:45\",\n            content: \"深夜办公，访问与工作职责无关的文件\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-16 00:00\",\n            content: \"连续5天出现相似的深夜工作模式\",\n          },\n          {\n            type: \"info\",\n            timestamp: \"2017-11-16 08:00\",\n            content: \"次日未打卡上班\",\n          },\n        ];\n      } else if (this.selectedEmployee === \"1307\") {\n        this.abnormalActivities = [\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-10 15:23\",\n            content: \"执行超过200次数据库查询，涉及产品核心数据表\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-11 16:40\",\n            content: \"查询模式显示系统性的数据收集行为\",\n          },\n        ];\n      } else if (this.selectedEmployee === \"1204\") {\n        this.abnormalActivities = [\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-22 19:08\",\n            content: \"工作站与5个未在公司白名单内的IP地址建立加密连接\",\n          },\n          {\n            type: \"danger\",\n            timestamp: \"2017-11-22 20:15\",\n            content: \"传输数据约320MB，流量特征与数据泄露模式匹配\",\n          },\n          {\n            type: \"warning\",\n            timestamp: \"2017-11-23 10:30\",\n            content: \"与ID-1103有频繁邮件往来\",\n          },\n        ];\n      } else {\n        // 无异常活动\n      }\n    },\n    checkAbnormalContent() {\n      if (!this.employeeEmailData || this.employeeEmailData.length === 0) {\n        this.hasAbnormalContent = false;\n        return;\n      }\n\n      const sensitiveKeywords = [\n        \"机密\",\n        \"绝密\",\n        \"confidential\",\n        \"secret\",\n        \"源代码\",\n        \"财务报表\",\n        \"核心代码\",\n        \"核心数据\",\n        \"密码\",\n        \"password\",\n      ];\n\n      // 筛选当前选定员工的邮件 (与 setEmployeeStats 和 initEmailActivityChart 中逻辑一致)\n      const selectedUserEmailPattern = `${this.selectedEmployee}@hightech.com`;\n      const isSelectedUserRoot = this.selectedEmployee === \"root\";\n\n      const employeeMessages = this.employeeEmailData.filter((email) => {\n        if (!email || !this.selectedEmployee) return false;\n        const fromMatch = isSelectedUserRoot\n          ? email.from === this.selectedEmployee\n          : email.from === selectedUserEmailPattern;\n        let toMatch = false;\n        if (email.to) {\n          const recipients = email.to.split(\";\");\n          toMatch = recipients.some((recipient) =>\n            isSelectedUserRoot\n              ? recipient.trim() === this.selectedEmployee\n              : recipient.trim() === selectedUserEmailPattern\n          );\n        }\n        return fromMatch || toMatch;\n      });\n\n      for (const email of employeeMessages) {\n        if (email && email.subject) {\n          const subjectLower = email.subject.toLowerCase();\n          for (const keyword of sensitiveKeywords) {\n            if (subjectLower.includes(keyword.toLowerCase())) {\n              this.hasAbnormalContent = true;\n              this.$notify({\n                title: \"敏感内容警告\",\n                message: `在工号 ${this.selectedEmployee} 的邮件主题中检测到敏感词: \"${keyword}\"`,\n                type: \"warning\",\n                duration: 4000,\n              });\n              return; // 找到一个就够了\n            }\n          }\n        }\n      }\n      this.hasAbnormalContent = false;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.page-title {\n  font-size: 18px;\n  font-weight: bold;\n  color: #303133;\n}\n\n.section-description {\n  color: #606266;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.empty-state {\n  text-align: center;\n  padding: 60px 0;\n  color: #909399;\n}\n\n.empty-icon {\n  font-size: 64px;\n  margin-bottom: 20px;\n  color: #dcdfe6;\n}\n\n.stat-card {\n  background-color: #f5f7fa;\n  border-radius: 8px;\n  padding: 15px;\n  text-align: center;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\n  height: 100%;\n  transition: all 0.3s;\n  margin-bottom: 20px;\n}\n\n.stat-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.stat-card-body {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.stat-icon {\n  font-size: 32px;\n  margin-right: 15px;\n}\n\n.stat-info {\n  text-align: left;\n}\n\n.stat-label {\n  font-size: 14px;\n  color: #909399;\n  margin-bottom: 5px;\n}\n\n.stat-value {\n  font-size: 24px;\n  font-weight: bold;\n  color: #303133;\n}\n\n.stat-trend {\n  font-size: 12px;\n  margin-top: 5px;\n  display: flex;\n  align-items: center;\n}\n\n.stat-trend i {\n  margin-right: 4px;\n}\n\n.higher {\n  color: #f56c6c;\n}\n\n.lower {\n  color: #67c23a;\n}\n\n.normal {\n  color: #909399;\n}\n\n.chart-container {\n  height: 300px;\n}\n\n.chart-card {\n  margin-bottom: 20px;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.chart-card .el-card__header {\n  padding: 12px 20px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #fafafa;\n}\n\n.activity-details {\n  margin-top: 10px;\n  font-size: 12px;\n  color: #606266;\n}\n\n.activity-actions {\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.empty-activities {\n  text-align: center;\n  padding: 40px 0;\n  color: #67c23a;\n}\n\n.empty-activities i {\n  font-size: 48px;\n  margin-bottom: 15px;\n}\n\n.threat-score-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 30px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  border-left: 4px solid #e6a23c;\n}\n\n.threat-score {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-right: 20px;\n  color: white;\n}\n\n.high-risk {\n  background-color: #f56c6c;\n  box-shadow: 0 0 15px rgba(245, 108, 108, 0.4);\n}\n\n.medium-risk {\n  background-color: #e6a23c;\n  box-shadow: 0 0 15px rgba(230, 162, 60, 0.4);\n}\n\n.low-risk {\n  background-color: #909399;\n  box-shadow: 0 0 15px rgba(144, 147, 153, 0.4);\n}\n\n.no-risk {\n  background-color: #67c23a;\n  box-shadow: 0 0 15px rgba(103, 194, 58, 0.4);\n}\n\n.score-value {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.score-label {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.threat-assessment {\n  flex: 1;\n}\n\n.threat-assessment h3 {\n  margin-top: 0;\n  margin-bottom: 10px;\n  color: #303133;\n}\n\n.threat-assessment p {\n  margin: 0;\n  color: #606266;\n  line-height: 1.5;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}