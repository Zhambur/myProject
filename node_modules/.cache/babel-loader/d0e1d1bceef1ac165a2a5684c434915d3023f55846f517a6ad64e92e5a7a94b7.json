{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport Papa from \"papaparse\";\nimport * as echarts from \"echarts\";\nexport default {\n  name: \"Organization\",\n  data() {\n    return {\n      orgChart: null,\n      deptPieChart: null,\n      positionChart: null,\n      deptRelationChart: null,\n      organizationData: [],\n      departmentCounts: [],\n      deptRelationNodes: [],\n      deptRelationLinks: []\n    };\n  },\n  async mounted() {\n    await this.loadOrganizationData();\n    this.initAllCharts();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.orgChart && this.orgChart.resize();\n      this.deptPieChart && this.deptPieChart.resize();\n      this.positionChart && this.positionChart.resize();\n      this.deptRelationChart && this.deptRelationChart.resize();\n    },\n    initAllCharts() {\n      this.initOrgChart();\n      this.initDeptPieChart();\n      this.initPositionChart();\n      this.initDeptRelationChart();\n    },\n    async loadOrganizationData() {\n      console.log(\"Organization.vue: 开始加载组织数据...\");\n      this.$message.info(\"正在加载组织架构数据...\");\n      try {\n        const response = await fetch(\"/employee_department_mapping.csv\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status} while fetching employee_department_mapping.csv`);\n        }\n        const csvText = await response.text();\n        const parsedData = Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true\n        }).data;\n        this.organizationData = parsedData.filter(row => row.sender_id && row.department_name);\n        console.log(\"组织数据加载完成: \", this.organizationData.length, \"条记录\");\n        const counts = {};\n        this.organizationData.forEach(item => {\n          counts[item.department_name] = (counts[item.department_name] || 0) + 1;\n        });\n        this.departmentCounts = Object.entries(counts).map(([name, value]) => ({\n          name,\n          value\n        }));\n        console.log(\"部门人数统计: \", this.departmentCounts);\n\n        // 新增：加载部门关系数据\n        const nodesResponse = await fetch(\"/department_relation_nodes.json\");\n        if (!nodesResponse.ok) {\n          throw new Error(`HTTP error! status: ${nodesResponse.status} while fetching department_relation_nodes.json`);\n        }\n        this.deptRelationNodes = await nodesResponse.json();\n        console.log(\"部门关系节点数据加载完成: \", this.deptRelationNodes.length, \"个部门\");\n        const linksResponse = await fetch(\"/department_relation_links.json\");\n        if (!linksResponse.ok) {\n          throw new Error(`HTTP error! status: ${linksResponse.status} while fetching department_relation_links.json`);\n        }\n        this.deptRelationLinks = await linksResponse.json();\n        console.log(\"部门关系连接数据加载完成: \", this.deptRelationLinks.length, \"条关系\");\n        this.$message.success(\"组织架构及关系数据加载成功！\");\n      } catch (error) {\n        console.error(\"加载组织数据失败:\", error);\n        this.$message.error(`加载组织数据失败: ${error.message}`);\n        this.organizationData = [];\n        this.departmentCounts = [];\n        this.deptRelationNodes = []; // 清空\n        this.deptRelationLinks = []; // 清空\n      }\n    },\n    initOrgChart() {\n      if (this.orgChart) {\n        this.orgChart.dispose();\n      }\n      const chartDom = document.getElementById(\"orgChart\");\n      if (!chartDom) {\n        console.error(\"initOrgChart: 无法找到DOM元素 #orgChart\");\n        return;\n      }\n      this.orgChart = echarts.init(chartDom);\n      const nodes = [];\n      const links = [];\n      let nodeIdCounter = 0;\n      if (this.organizationData.length === 0) {\n        console.warn(\"组织数据为空，无法生成组织架构图。\");\n        this.orgChart.setOption({\n          title: {\n            text: \"组织数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\"\n          }\n        });\n        return;\n      }\n      const companyRootId = `company-${nodeIdCounter++}`;\n      nodes.push({\n        id: companyRootId,\n        name: \"HighTech 公司\",\n        category: \"公司\",\n        symbolSize: 70,\n        itemStyle: {\n          color: \"#A30000\"\n        },\n        label: {\n          show: true,\n          fontSize: 16,\n          fontWeight: \"bold\"\n        },\n        fixed: true,\n        x: this.orgChart.getWidth() / 2,\n        y: 50\n      });\n      const departments = {};\n      this.organizationData.forEach(employee => {\n        const departmentName = employee.department_name;\n        const employeeId = String(employee.sender_id);\n        if (!departments[departmentName]) {\n          const deptId = `dept-${departmentName}-${nodeIdCounter++}`;\n          departments[departmentName] = deptId;\n          nodes.push({\n            id: deptId,\n            name: departmentName,\n            category: \"部门\",\n            symbolSize: 50,\n            itemStyle: {\n              color: \"#00529B\"\n            },\n            label: {\n              show: true,\n              fontSize: 14,\n              position: \"bottom\"\n            }\n          });\n          links.push({\n            source: companyRootId,\n            target: deptId,\n            lineStyle: {\n              width: 2\n            }\n          });\n        }\n        const empNodeId = `emp-${employeeId}-${nodeIdCounter++}`;\n        nodes.push({\n          id: empNodeId,\n          name: employeeId,\n          category: \"员工\",\n          department: departmentName,\n          symbolSize: 30,\n          itemStyle: {\n            color: \"#409EFF\"\n          },\n          label: {\n            show: true,\n            position: \"right\",\n            formatter: \"{b}\"\n          }\n        });\n        links.push({\n          source: departments[departmentName],\n          target: empNodeId\n        });\n      });\n      const option = {\n        title: {\n          text: \"公司组织结构图 (基于推断数据)\",\n          subtext: \"点击节点可拖动，滚轮可缩放\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            if (params.dataType === \"node\") {\n              const data = params.data;\n              let res = `<div style=\"font-weight:bold;margin-bottom:5px;\">${data.category}: ${data.name}</div>`;\n              if (data.department) {\n                res += `所属部门: ${data.department}<br/>`;\n              }\n              return res;\n            }\n            return params.data.source && params.data.target ? \"层级关系\" : \"\";\n          }\n        },\n        legend: [{\n          data: [\"公司\", \"部门\", \"员工\"],\n          top: 50,\n          textStyle: {\n            fontSize: 12\n          },\n          icon: \"circle\",\n          itemWidth: 10,\n          itemHeight: 10\n        }],\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [{\n          type: \"graph\",\n          layout: \"force\",\n          force: {\n            repulsion: [300, 400],\n            gravity: 0.15,\n            edgeLength: [80, 150],\n            layoutAnimation: true,\n            friction: 0.6\n          },\n          roam: true,\n          draggable: true,\n          label: {\n            show: true,\n            position: \"right\",\n            fontSize: 10\n          },\n          edgeSymbol: [\"none\", \"arrow\"],\n          edgeSymbolSize: [0, 8],\n          nodes: nodes,\n          links: links,\n          categories: [{\n            name: \"公司\",\n            itemStyle: {\n              color: \"#A30000\"\n            }\n          }, {\n            name: \"部门\",\n            itemStyle: {\n              color: \"#00529B\"\n            }\n          }, {\n            name: \"员工\",\n            itemStyle: {\n              color: \"#409EFF\"\n            }\n          }],\n          lineStyle: {\n            opacity: 0.9,\n            width: 1.5,\n            curveness: 0\n          }\n        }]\n      };\n      this.orgChart.setOption(option);\n    },\n    initDeptPieChart() {\n      if (this.deptPieChart) {\n        this.deptPieChart.dispose();\n      }\n      const chartDom = document.getElementById(\"deptPieChart\");\n      if (!chartDom) {\n        console.error(\"initDeptPieChart: 无法找到DOM元素 #deptPieChart\");\n        return;\n      }\n      this.deptPieChart = echarts.init(chartDom);\n      if (this.departmentCounts.length === 0) {\n        console.warn(\"部门统计数据为空，无法生成饼图。\");\n        this.deptPieChart.setOption({\n          title: {\n            text: \"部门人数数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\"\n          }\n        });\n        return;\n      }\n      const option = {\n        title: {\n          text: \"各部门人员数量占比\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}人 ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: this.departmentCounts.map(item => item.name)\n        },\n        series: [{\n          name: \"部门人数\",\n          type: \"pie\",\n          radius: \"70%\",\n          center: [\"55%\", \"60%\"],\n          data: this.departmentCounts,\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          },\n          label: {\n            show: true,\n            formatter: \"{b}: {c}人\\n({d}%)\"\n          },\n          labelLine: {\n            show: true\n          }\n        }]\n      };\n      this.deptPieChart.setOption(option);\n    },\n    initPositionChart() {\n      this.positionChart = this.$echarts.init(document.getElementById(\"positionChart\"));\n      const option = {\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"总经理\", \"部长\", \"组长\", \"普通员工\"]\n        },\n        series: [{\n          name: \"职位人数\",\n          type: \"bar\",\n          data: [1, 5, 17, 297]\n        }]\n      };\n      this.positionChart.setOption(option);\n    },\n    initDeptRelationChart() {\n      if (this.deptRelationChart) {\n        this.deptRelationChart.dispose();\n      }\n      const chartDom = document.getElementById(\"deptRelationChart\");\n      if (!chartDom) {\n        console.error(\"initDeptRelationChart: 无法找到DOM元素 #deptRelationChart\");\n        return;\n      }\n      this.deptRelationChart = echarts.init(chartDom);\n      if (this.deptRelationNodes.length === 0 || this.deptRelationLinks.length === 0) {\n        console.warn(\"部门关系数据为空，无法生成关系网络图。\");\n        this.deptRelationChart.setOption({\n          title: {\n            text: \"部门关系数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\"\n          }\n        });\n        return;\n      }\n\n      // 为节点数据添加symbolSize和category（如果需要，可以基于memberCount或value）\n      const processedNodes = this.deptRelationNodes.map(node => ({\n        ...node,\n        symbolSize: Math.max(20, Math.min(80, node.memberCount * 2 + node.value / 50)),\n        // 示例：根据成员数和邮件量调整大小\n        category: node.name,\n        // 每个部门一个类别，用于图例和颜色区分\n        draggable: true\n      }));\n      const categories = this.deptRelationNodes.map(node => ({\n        name: node.name\n      }));\n      const option = {\n        title: {\n          text: \"部门间邮件往来关系 (真实数据)\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 18,\n            fontWeight: \"bold\"\n          },\n          subtext: \"基于 전체邮件数据分析\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            if (params.dataType === \"edge\") {\n              return `${params.data.source} → ${params.data.target}<br/>邮件往来: ${params.data.value}封`;\n            }\n            // params.dataType === 'node'\n            return `${params.data.name}<br/>总邮件活跃度: ${params.data.value || \"-\"}<br/>成员数: ${params.data.memberCount || \"-\"}人`;\n          }\n        },\n        legend: {\n          type: \"scroll\",\n          orient: \"vertical\",\n          right: 10,\n          top: 50,\n          data: categories.map(c => c.name) // 从节点动态生成图例\n        },\n        animationDuration: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [{\n          name: \"部门关系网络\",\n          type: \"graph\",\n          layout: \"force\",\n          data: processedNodes,\n          // 使用处理后的节点数据\n          links: this.deptRelationLinks,\n          // 使用加载的连接数据\n          categories: categories,\n          // 用于图例和颜色\n          roam: true,\n          draggable: true,\n          label: {\n            show: true,\n            position: \"right\",\n            formatter: \"{b}\",\n            // 显示节点名称 (b 代表 name)\n            fontSize: 10\n          },\n          force: {\n            repulsion: 400,\n            // 节点间斥力因子\n            gravity: 0.1,\n            // 引力因子\n            edgeLength: [80, 150],\n            // 边的理想长度范围\n            layoutAnimation: true,\n            friction: 0.6\n          },\n          lineStyle: {\n            opacity: 0.7,\n            width: 1.5,\n            curveness: 0.1,\n            // 边的弯曲度\n            color: \"source\" // 边颜色跟随源节点\n          },\n          edgeSymbol: [\"none\", \"arrow\"],\n          edgeSymbolSize: [0, 7],\n          emphasis: {\n            focus: \"adjacency\",\n            lineStyle: {\n              width: 4 // 高亮时边的宽度\n            },\n            label: {\n              show: true,\n              // 高亮时也显示标签\n              fontSize: 12\n            }\n          }\n        }]\n      };\n      this.deptRelationChart.setOption(option);\n\n      // 可以保留或移除原有的点击事件，根据新数据结构调整\n      this.deptRelationChart.off(\"click\"); // 先移除旧的监听器\n      this.deptRelationChart.on(\"click\", params => {\n        if (params.dataType === \"edge\") {\n          console.log(`点击了边: ${params.data.source} -> ${params.data.target}, 往来数: ${params.data.value}`);\n          this.$message.info(`部门 ${params.data.source} 与 ${params.data.target} 间邮件往来 ${params.data.value} 封`);\n        } else if (params.dataType === \"node\") {\n          console.log(`点击了部门节点: ${params.name}, 成员数: ${params.data.memberCount}, 邮件活跃度: ${params.data.value}`);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Papa","echarts","name","data","orgChart","deptPieChart","positionChart","deptRelationChart","organizationData","departmentCounts","deptRelationNodes","deptRelationLinks","mounted","loadOrganizationData","initAllCharts","window","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","resize","initOrgChart","initDeptPieChart","initPositionChart","initDeptRelationChart","console","log","$message","info","response","fetch","ok","Error","status","csvText","text","parsedData","parse","header","skipEmptyLines","filter","row","sender_id","department_name","length","counts","forEach","item","Object","entries","map","value","nodesResponse","json","linksResponse","success","error","message","dispose","chartDom","document","getElementById","init","nodes","links","nodeIdCounter","warn","setOption","title","left","top","companyRootId","push","id","category","symbolSize","itemStyle","color","label","show","fontSize","fontWeight","fixed","x","getWidth","y","departments","employee","departmentName","employeeId","String","deptId","position","source","target","lineStyle","width","empNodeId","department","formatter","option","subtext","tooltip","trigger","params","dataType","res","legend","textStyle","icon","itemWidth","itemHeight","animationDurationUpdate","animationEasingUpdate","series","type","layout","force","repulsion","gravity","edgeLength","layoutAnimation","friction","roam","draggable","edgeSymbol","edgeSymbolSize","categories","opacity","curveness","orient","radius","center","emphasis","shadowBlur","shadowOffsetX","shadowColor","labelLine","$echarts","axisPointer","grid","right","bottom","containLabel","xAxis","yAxis","processedNodes","node","Math","max","min","memberCount","c","animationDuration","focus","off","on"],"sources":["src/views/Organization.vue"],"sourcesContent":["<template>\n  <div class=\"organization\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>公司组织结构分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"通过分析邮件往来和登录行为，识别公司各部门结构和人员组成\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对公司内部邮件、登录和打卡数据的分析，我们识别出了HighTech公司的组织结构。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"16\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>公司组织架构图</span>\n          </div>\n          <div id=\"orgChart\" style=\"width: 100%; height: 600px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>部门人员统计</span>\n          </div>\n          <div id=\"deptPieChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n        <el-card class=\"box-card\" style=\"margin-top: 20px\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>职位分布</span>\n          </div>\n          <div id=\"positionChart\" style=\"width: 100%; height: 200px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>部门关系网络</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"基于邮件往来数据构建的部门间联系强度图\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <div id=\"deptRelationChart\" style=\"width: 100%; height: 500px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport Papa from \"papaparse\";\nimport * as echarts from \"echarts\";\n\nexport default {\n  name: \"Organization\",\n  data() {\n    return {\n      orgChart: null,\n      deptPieChart: null,\n      positionChart: null,\n      deptRelationChart: null,\n      organizationData: [],\n      departmentCounts: [],\n      deptRelationNodes: [],\n      deptRelationLinks: [],\n    };\n  },\n  async mounted() {\n    await this.loadOrganizationData();\n    this.initAllCharts();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.orgChart && this.orgChart.resize();\n      this.deptPieChart && this.deptPieChart.resize();\n      this.positionChart && this.positionChart.resize();\n      this.deptRelationChart && this.deptRelationChart.resize();\n    },\n    initAllCharts() {\n      this.initOrgChart();\n      this.initDeptPieChart();\n      this.initPositionChart();\n      this.initDeptRelationChart();\n    },\n    async loadOrganizationData() {\n      console.log(\"Organization.vue: 开始加载组织数据...\");\n      this.$message.info(\"正在加载组织架构数据...\");\n      try {\n        const response = await fetch(\"/employee_department_mapping.csv\");\n        if (!response.ok) {\n          throw new Error(\n            `HTTP error! status: ${response.status} while fetching employee_department_mapping.csv`\n          );\n        }\n        const csvText = await response.text();\n        const parsedData = Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true,\n        }).data;\n\n        this.organizationData = parsedData.filter(\n          (row) => row.sender_id && row.department_name\n        );\n        console.log(\n          \"组织数据加载完成: \",\n          this.organizationData.length,\n          \"条记录\"\n        );\n\n        const counts = {};\n        this.organizationData.forEach((item) => {\n          counts[item.department_name] =\n            (counts[item.department_name] || 0) + 1;\n        });\n        this.departmentCounts = Object.entries(counts).map(([name, value]) => ({\n          name,\n          value,\n        }));\n        console.log(\"部门人数统计: \", this.departmentCounts);\n\n        // 新增：加载部门关系数据\n        const nodesResponse = await fetch(\"/department_relation_nodes.json\");\n        if (!nodesResponse.ok) {\n          throw new Error(\n            `HTTP error! status: ${nodesResponse.status} while fetching department_relation_nodes.json`\n          );\n        }\n        this.deptRelationNodes = await nodesResponse.json();\n        console.log(\n          \"部门关系节点数据加载完成: \",\n          this.deptRelationNodes.length,\n          \"个部门\"\n        );\n\n        const linksResponse = await fetch(\"/department_relation_links.json\");\n        if (!linksResponse.ok) {\n          throw new Error(\n            `HTTP error! status: ${linksResponse.status} while fetching department_relation_links.json`\n          );\n        }\n        this.deptRelationLinks = await linksResponse.json();\n        console.log(\n          \"部门关系连接数据加载完成: \",\n          this.deptRelationLinks.length,\n          \"条关系\"\n        );\n\n        this.$message.success(\"组织架构及关系数据加载成功！\");\n      } catch (error) {\n        console.error(\"加载组织数据失败:\", error);\n        this.$message.error(`加载组织数据失败: ${error.message}`);\n        this.organizationData = [];\n        this.departmentCounts = [];\n        this.deptRelationNodes = []; // 清空\n        this.deptRelationLinks = []; // 清空\n      }\n    },\n    initOrgChart() {\n      if (this.orgChart) {\n        this.orgChart.dispose();\n      }\n      const chartDom = document.getElementById(\"orgChart\");\n      if (!chartDom) {\n        console.error(\"initOrgChart: 无法找到DOM元素 #orgChart\");\n        return;\n      }\n      this.orgChart = echarts.init(chartDom);\n\n      const nodes = [];\n      const links = [];\n      let nodeIdCounter = 0;\n\n      if (this.organizationData.length === 0) {\n        console.warn(\"组织数据为空，无法生成组织架构图。\");\n        this.orgChart.setOption({\n          title: {\n            text: \"组织数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\",\n          },\n        });\n        return;\n      }\n\n      const companyRootId = `company-${nodeIdCounter++}`;\n      nodes.push({\n        id: companyRootId,\n        name: \"HighTech 公司\",\n        category: \"公司\",\n        symbolSize: 70,\n        itemStyle: { color: \"#A30000\" },\n        label: { show: true, fontSize: 16, fontWeight: \"bold\" },\n        fixed: true,\n        x: this.orgChart.getWidth() / 2,\n        y: 50,\n      });\n\n      const departments = {};\n      this.organizationData.forEach((employee) => {\n        const departmentName = employee.department_name;\n        const employeeId = String(employee.sender_id);\n\n        if (!departments[departmentName]) {\n          const deptId = `dept-${departmentName}-${nodeIdCounter++}`;\n          departments[departmentName] = deptId;\n          nodes.push({\n            id: deptId,\n            name: departmentName,\n            category: \"部门\",\n            symbolSize: 50,\n            itemStyle: { color: \"#00529B\" },\n            label: { show: true, fontSize: 14, position: \"bottom\" },\n          });\n          links.push({\n            source: companyRootId,\n            target: deptId,\n            lineStyle: { width: 2 },\n          });\n        }\n\n        const empNodeId = `emp-${employeeId}-${nodeIdCounter++}`;\n        nodes.push({\n          id: empNodeId,\n          name: employeeId,\n          category: \"员工\",\n          department: departmentName,\n          symbolSize: 30,\n          itemStyle: { color: \"#409EFF\" },\n          label: { show: true, position: \"right\", formatter: \"{b}\" },\n        });\n\n        links.push({\n          source: departments[departmentName],\n          target: empNodeId,\n        });\n      });\n\n      const option = {\n        title: {\n          text: \"公司组织结构图 (基于推断数据)\",\n          subtext: \"点击节点可拖动，滚轮可缩放\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            if (params.dataType === \"node\") {\n              const data = params.data;\n              let res = `<div style=\"font-weight:bold;margin-bottom:5px;\">${data.category}: ${data.name}</div>`;\n              if (data.department) {\n                res += `所属部门: ${data.department}<br/>`;\n              }\n              return res;\n            }\n            return params.data.source && params.data.target ? \"层级关系\" : \"\";\n          },\n        },\n        legend: [\n          {\n            data: [\"公司\", \"部门\", \"员工\"],\n            top: 50,\n            textStyle: { fontSize: 12 },\n            icon: \"circle\",\n            itemWidth: 10,\n            itemHeight: 10,\n          },\n        ],\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [\n          {\n            type: \"graph\",\n            layout: \"force\",\n            force: {\n              repulsion: [300, 400],\n              gravity: 0.15,\n              edgeLength: [80, 150],\n              layoutAnimation: true,\n              friction: 0.6,\n            },\n            roam: true,\n            draggable: true,\n            label: {\n              show: true,\n              position: \"right\",\n              fontSize: 10,\n            },\n            edgeSymbol: [\"none\", \"arrow\"],\n            edgeSymbolSize: [0, 8],\n            nodes: nodes,\n            links: links,\n            categories: [\n              { name: \"公司\", itemStyle: { color: \"#A30000\" } },\n              { name: \"部门\", itemStyle: { color: \"#00529B\" } },\n              { name: \"员工\", itemStyle: { color: \"#409EFF\" } },\n            ],\n            lineStyle: {\n              opacity: 0.9,\n              width: 1.5,\n              curveness: 0,\n            },\n          },\n        ],\n      };\n      this.orgChart.setOption(option);\n    },\n    initDeptPieChart() {\n      if (this.deptPieChart) {\n        this.deptPieChart.dispose();\n      }\n      const chartDom = document.getElementById(\"deptPieChart\");\n      if (!chartDom) {\n        console.error(\"initDeptPieChart: 无法找到DOM元素 #deptPieChart\");\n        return;\n      }\n      this.deptPieChart = echarts.init(chartDom);\n\n      if (this.departmentCounts.length === 0) {\n        console.warn(\"部门统计数据为空，无法生成饼图。\");\n        this.deptPieChart.setOption({\n          title: {\n            text: \"部门人数数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\",\n          },\n        });\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"各部门人员数量占比\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}人 ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: this.departmentCounts.map((item) => item.name),\n        },\n        series: [\n          {\n            name: \"部门人数\",\n            type: \"pie\",\n            radius: \"70%\",\n            center: [\"55%\", \"60%\"],\n            data: this.departmentCounts,\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n            label: {\n              show: true,\n              formatter: \"{b}: {c}人\\n({d}%)\",\n            },\n            labelLine: {\n              show: true,\n            },\n          },\n        ],\n      };\n      this.deptPieChart.setOption(option);\n    },\n    initPositionChart() {\n      this.positionChart = this.$echarts.init(\n        document.getElementById(\"positionChart\")\n      );\n\n      const option = {\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"value\",\n        },\n        yAxis: {\n          type: \"category\",\n          data: [\"总经理\", \"部长\", \"组长\", \"普通员工\"],\n        },\n        series: [\n          {\n            name: \"职位人数\",\n            type: \"bar\",\n            data: [1, 5, 17, 297],\n          },\n        ],\n      };\n\n      this.positionChart.setOption(option);\n    },\n    initDeptRelationChart() {\n      if (this.deptRelationChart) {\n        this.deptRelationChart.dispose();\n      }\n      const chartDom = document.getElementById(\"deptRelationChart\");\n      if (!chartDom) {\n        console.error(\n          \"initDeptRelationChart: 无法找到DOM元素 #deptRelationChart\"\n        );\n        return;\n      }\n      this.deptRelationChart = echarts.init(chartDom);\n\n      if (\n        this.deptRelationNodes.length === 0 ||\n        this.deptRelationLinks.length === 0\n      ) {\n        console.warn(\"部门关系数据为空，无法生成关系网络图。\");\n        this.deptRelationChart.setOption({\n          title: {\n            text: \"部门关系数据加载失败或为空\",\n            left: \"center\",\n            top: \"center\",\n          },\n        });\n        return;\n      }\n\n      // 为节点数据添加symbolSize和category（如果需要，可以基于memberCount或value）\n      const processedNodes = this.deptRelationNodes.map((node) => ({\n        ...node,\n        symbolSize: Math.max(\n          20,\n          Math.min(80, node.memberCount * 2 + node.value / 50)\n        ), // 示例：根据成员数和邮件量调整大小\n        category: node.name, // 每个部门一个类别，用于图例和颜色区分\n        draggable: true,\n      }));\n\n      const categories = this.deptRelationNodes.map((node) => ({\n        name: node.name,\n      }));\n\n      const option = {\n        title: {\n          text: \"部门间邮件往来关系 (真实数据)\",\n          left: \"center\",\n          textStyle: {\n            fontSize: 18,\n            fontWeight: \"bold\",\n          },\n          subtext: \"基于 전체邮件数据分析\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: function (params) {\n            if (params.dataType === \"edge\") {\n              return `${params.data.source} → ${params.data.target}<br/>邮件往来: ${params.data.value}封`;\n            }\n            // params.dataType === 'node'\n            return `${params.data.name}<br/>总邮件活跃度: ${\n              params.data.value || \"-\"\n            }<br/>成员数: ${params.data.memberCount || \"-\"}人`;\n          },\n        },\n        legend: {\n          type: \"scroll\",\n          orient: \"vertical\",\n          right: 10,\n          top: 50,\n          data: categories.map((c) => c.name), // 从节点动态生成图例\n        },\n        animationDuration: 1500,\n        animationEasingUpdate: \"quinticInOut\",\n        series: [\n          {\n            name: \"部门关系网络\",\n            type: \"graph\",\n            layout: \"force\",\n            data: processedNodes, // 使用处理后的节点数据\n            links: this.deptRelationLinks, // 使用加载的连接数据\n            categories: categories, // 用于图例和颜色\n            roam: true,\n            draggable: true,\n            label: {\n              show: true,\n              position: \"right\",\n              formatter: \"{b}\", // 显示节点名称 (b 代表 name)\n              fontSize: 10,\n            },\n            force: {\n              repulsion: 400, // 节点间斥力因子\n              gravity: 0.1, // 引力因子\n              edgeLength: [80, 150], // 边的理想长度范围\n              layoutAnimation: true,\n              friction: 0.6,\n            },\n            lineStyle: {\n              opacity: 0.7,\n              width: 1.5,\n              curveness: 0.1, // 边的弯曲度\n              color: \"source\", // 边颜色跟随源节点\n            },\n            edgeSymbol: [\"none\", \"arrow\"],\n            edgeSymbolSize: [0, 7],\n            emphasis: {\n              focus: \"adjacency\",\n              lineStyle: {\n                width: 4, // 高亮时边的宽度\n              },\n              label: {\n                show: true, // 高亮时也显示标签\n                fontSize: 12,\n              },\n            },\n          },\n        ],\n      };\n\n      this.deptRelationChart.setOption(option);\n\n      // 可以保留或移除原有的点击事件，根据新数据结构调整\n      this.deptRelationChart.off(\"click\"); // 先移除旧的监听器\n      this.deptRelationChart.on(\"click\", (params) => {\n        if (params.dataType === \"edge\") {\n          console.log(\n            `点击了边: ${params.data.source} -> ${params.data.target}, 往来数: ${params.data.value}`\n          );\n          this.$message.info(\n            `部门 ${params.data.source} 与 ${params.data.target} 间邮件往来 ${params.data.value} 封`\n          );\n        } else if (params.dataType === \"node\") {\n          console.log(\n            `点击了部门节点: ${params.name}, 成员数: ${params.data.memberCount}, 邮件活跃度: ${params.data.value}`\n          );\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}