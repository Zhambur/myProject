{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        }\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n      serverDBAccessData: [],\n      dailyNetworkTrafficData: []\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.$nextTick(() => {\n      this.initCheckTimeChart();\n      this.initWorkHoursChart();\n      this.initWebCategoryChart();\n      this.initServerAccessChart();\n      this.initNetworkFlowChart();\n      this.initEmailFrequencyChart();\n      this.initLoginSuccessChart();\n      this.initTcpProtocolChart();\n    });\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    }\n  },\n  methods: {\n    showEmptyChart(chartInstance, chartElementId, message = \"暂无数据\") {\n      if (chartInstance) {\n        chartInstance.clear(); // 清除之前的图表内容\n        // 确保 setOption 在有效的实例上调用\n        try {\n          chartInstance.setOption({\n            title: {\n              text: message,\n              left: \"center\",\n              top: \"center\",\n              textStyle: {\n                color: \"#888\",\n                fontSize: 16\n              }\n            },\n            xAxis: {},\n            // Ensure axes are cleared/reset\n            yAxis: {},\n            series: [] // Ensure series are cleared\n          });\n        } catch (e) {\n          console.error(\"Error setting empty chart option:\", e, chartInstance);\n          // Fallback for DOM if ECharts instance is problematic\n          const chartDom = document.getElementById(chartElementId);\n          if (chartDom) {\n            chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n          }\n        }\n      } else {\n        const chartDom = document.getElementById(chartElementId);\n        if (chartDom) {\n          chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n        }\n      }\n    },\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [deptCheckRes, workDurationRes, webCatRes, deptEmailRes, loginSucFailRes, tcpProtoRes, serverAccessRes, dailyNetworkTrafficRes] = await Promise.all([fetch(\"/department_check_time_approx.json\"), fetch(\"/work_duration_distribution.json\"), fetch(\"/web_category_distribution.json\"), fetch(\"/department_email_activity.json\"), fetch(\"/login_success_fail.json\"), fetch(\"/tcp_protocol_distribution.json\"), fetch(\"/server_database_access_frequency.json\"), fetch(\"/daily_network_traffic.json\")]);\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (this.departmentCheckTimeData && this.departmentCheckTimeData.length > 0 && this.allDepartments.length === 0 // 防止重复填充或覆盖\n        ) {\n          this.allDepartments = this.departmentCheckTimeData.map(d => d.department);\n          if (this.allDepartments.length > 0 && !this.selectedDepartment) {\n            // this.selectedDepartment = this.allDepartments[0]; //默认选中第一个（如果之前没有选择）\n          }\n        }\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件活动数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n\n        // 处理新增数据\n        if (!serverAccessRes.ok) throw new Error(\"加载服务器访问频率数据失败\");\n        this.serverDBAccessData = await serverAccessRes.json();\n        if (!dailyNetworkTrafficRes.ok) throw new Error(\"加载每日网络流量数据失败\");\n        this.dailyNetworkTrafficData = await dailyNetworkTrafficRes.json();\n        this.$message.success(\"行为分析数据加载完成!\");\n        // 数据加载完成后，需要确保所有图表都用新数据更新\n        this.updateAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n        // 即使部分失败，也尝试更新图表，它们有自己的空状态处理\n        this.updateAllCharts();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    updateAllCharts() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n      if (this.workDurationDistributionData) this.initWorkHoursChart();\n      if (this.webCategoryData) this.initWebCategoryChart();\n      if (this.serverDBAccessData) this.initServerAccessChart(); // 更新调用\n      if (this.dailyNetworkTrafficData) this.initNetworkFlowChart(); // 更新调用\n      if (this.departmentEmailActivityData) this.initEmailFrequencyChart();\n      if (this.loginSuccessFailData) this.initLoginSuccessChart();\n      if (this.tcpProtocolData) this.initTcpProtocolChart();\n    },\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(document.getElementById(\"checkTimeChart\"));\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (!this.departmentCheckTimeData || this.departmentCheckTimeData.length === 0) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", \"部门打卡整体数据加载中或为空\");\n        return;\n      }\n      if (!this.selectedDepartment || this.selectedDepartment === \"暂无部门数据\") {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", \"请先选择一个部门\");\n        return;\n      }\n      const departmentData = this.departmentCheckTimeData.find(d => d.department === this.selectedDepartment);\n      if (!departmentData) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", `部门 [${this.selectedDepartment}] 的打卡数据未找到`);\n        return;\n      }\n      const checkInDistribution = Array.isArray(departmentData.checkInDistribution) ? departmentData.checkInDistribution : [];\n      const checkOutDistribution = Array.isArray(departmentData.checkOutDistribution) ? departmentData.checkOutDistribution : [];\n      if (checkInDistribution.length === 0 && checkOutDistribution.length === 0) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", `部门 [${this.selectedDepartment}] 无任何打卡记录`);\n        return;\n      }\n      const checkInTimes = checkInDistribution.map(item => item.timeBin);\n      const checkInCounts = checkInDistribution.map(item => item.count);\n      const checkOutTimes = checkOutDistribution.map(item => item.timeBin);\n      const checkOutCounts = checkOutDistribution.map(item => item.count);\n      const allTimeBins = [...new Set([...checkInTimes, ...checkOutTimes])].sort((a, b) => {\n        // 自定义排序，确保 'HH:MM' 格式正确排序\n        const [aHour, aMinute] = a.split(\":\").map(Number);\n        const [bHour, bMinute] = b.split(\":\").map(Number);\n        if (aHour !== bHour) return aHour - bHour;\n        return aMinute - bMinute;\n      });\n      if (allTimeBins.length === 0) {\n        this.showEmptyChart(this.checkTimeChart, \"checkTimeChart\", `部门 [${this.selectedDepartment}] 无有效打卡时间点`);\n        return;\n      }\n      const formattedCheckInData = allTimeBins.map(bin => {\n        const found = checkInDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map(bin => {\n        const found = checkOutDistribution.find(d => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          subtitle: `部门: ${this.selectedDepartment}`,\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          },\n          formatter: function (params) {\n            let res = params[0].name; // X轴的时间点 (timeBin)\n            params.forEach(item => {\n              if (item.value > 0) {\n                // 只显示有数据的系列\n                res += \"<br/>\" + item.seriesName + \" : \" + item.value + \"人\";\n              }\n            });\n            return res;\n          }\n        },\n        legend: {\n          data: [\"上班打卡\", \"下班打卡\"],\n          top: 50 // 调整图例位置，给副标题留空间\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 90,\n          // 调整grid位置\n          containLabel: true\n        },\n        xAxis: [{\n          type: \"category\",\n          data: allTimeBins,\n          axisTick: {\n            alignWithLabel: true\n          },\n          axisLabel: {\n            interval: \"auto\",\n            rotate: allTimeBins.length > 12 ? 30 : 0 // 时间点多的时候旋转标签\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          name: \"人数\"\n        }],\n        series: [{\n          name: \"上班打卡\",\n          type: \"bar\",\n          barGap: 0,\n          emphasis: {\n            focus: \"series\"\n          },\n          data: formattedCheckInData,\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }, {\n          name: \"下班打卡\",\n          type: \"bar\",\n          emphasis: {\n            focus: \"series\"\n          },\n          data: formattedCheckOutData,\n          itemStyle: {\n            color: \"#91CC75\"\n          }\n        }]\n      };\n      this.checkTimeChart.setOption(option, true); // 使用 true 确保清除旧配置\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(document.getElementById(\"workHoursChart\"));\n      this.updateWorkHoursChart();\n    },\n    updateWorkHoursChart() {\n      if (!this.workDurationDistributionData || this.workDurationDistributionData.length === 0) {\n        this.showEmptyChart(this.workHoursChart, \"workHoursChart\", \"员工工时分布数据加载中或为空\");\n        return;\n      }\n      const durationRanges = this.workDurationDistributionData.map(item => item.durationRange);\n      const counts = this.workDurationDistributionData.map(item => item.count);\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\"\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\"\n        },\n        series: [{\n          name: \"工作时长分布\",\n          type: \"bar\",\n          data: counts,\n          itemStyle: {\n            color: \"#FAC858\"\n          }\n        }]\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      const chartDom = document.getElementById(\"webCategoryChart\");\n      if (chartDom) {\n        this.webCategoryChart = this.$echarts.init(chartDom);\n        this.updateWebCategoryChart();\n      } else {\n        console.error(\"Web category chart DOM not found.\");\n      }\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", \"网页分类数据加载中或为空\");\n        return;\n      }\n      const dataForRange = this.webCategoryData[this.webVisitTimeRange];\n      if (!dataForRange || Object.keys(dataForRange).length === 0) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", `时段 [${this.webVisitTimeRange}] 暂无网页访问数据`);\n        return;\n      }\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n      if (this.webVisitTimeRange === \"workHours\" && this.webCategoryData.workHours) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"afterHours\" && this.webCategoryData.afterHours) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (this.webVisitTimeRange === \"allDay\" && this.webCategoryData.allDay) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n      if (categoryData.length === 0) {\n        this.showEmptyChart(this.webCategoryChart, \"webCategoryChart\", `暂无${titleText}数据`);\n        return;\n      }\n      const dataForPie = categoryData.map(item => ({\n        name: item.category,\n        value: item.count\n      }));\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map(item => item.name)\n        },\n        series: [{\n          name: \"访问类别\",\n          type: \"pie\",\n          radius: [\"50%\", \"70%\"],\n          avoidLabelOverlap: false,\n          label: {\n            show: false,\n            position: \"center\"\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: \"18\",\n              fontWeight: \"bold\"\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: dataForPie\n        }]\n      };\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      const chartDom = document.getElementById(\"serverAccessChart\");\n      if (chartDom) {\n        this.serverAccessChart = this.$echarts.init(chartDom);\n        this.updateServerAccessChart();\n      } else {\n        console.error(\"Server access chart DOM not found.\");\n      }\n    },\n    updateServerAccessChart() {\n      if (!this.serverAccessChart) return;\n      if (!this.serverDBAccessData || this.serverDBAccessData.length === 0) {\n        this.showEmptyChart(this.serverAccessChart, \"serverAccessChart\", \"无服务器/数据库访问数据\");\n        return;\n      }\n      const sortedData = [...this.serverDBAccessData].sort((a, b) => b.count - a.count);\n      const topN = 15; // 只显示Top N\n      const displayData = sortedData.slice(0, topN);\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"value\",\n          boundaryGap: [0, 0.01]\n        },\n        yAxis: {\n          type: \"category\",\n          data: displayData.map(item => item.name).reverse(),\n          // Reverse for horizontal bar\n          axisLabel: {\n            interval: 0,\n            rotate: 0,\n            // No rotation needed for horizontal bars if names are short\n            formatter: function (value) {\n              return value.length > 15 ? value.substring(0, 15) + \"...\" : value;\n            }\n          }\n        },\n        series: [{\n          name: \"访问次数\",\n          type: \"bar\",\n          data: displayData.map(item => item.count).reverse(),\n          // Reverse for horizontal bar\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }]\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      const chartDom = document.getElementById(\"networkFlowChart\");\n      if (chartDom) {\n        this.networkFlowChart = this.$echarts.init(chartDom);\n        this.updateNetworkFlowChart();\n      } else {\n        console.error(\"Network flow chart DOM not found.\");\n      }\n    },\n    updateNetworkFlowChart() {\n      if (!this.networkFlowChart) return;\n      if (!this.dailyNetworkTrafficData || this.dailyNetworkTrafficData.length === 0) {\n        this.showEmptyChart(this.networkFlowChart, \"networkFlowChart\", \"无每日网络流量数据\");\n        return;\n      }\n\n      // Sort data by date just in case it's not already sorted\n      const sortedTrafficData = [...this.dailyNetworkTrafficData].sort((a, b) => new Date(a.date) - new Date(b.date));\n      const dates = sortedTrafficData.map(item => item.date);\n      const bytesIn = sortedTrafficData.map(item => (item.bytes_in / (1024 * 1024)).toFixed(2)); // Convert to MB\n      const bytesOut = sortedTrafficData.map(item => (item.bytes_out / (1024 * 1024)).toFixed(2)); // Convert to MB\n\n      const option = {\n        title: {\n          text: \"每日网络流量分析 (MB)\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          formatter: function (params) {\n            let res = params[0].name + \"<br/>\";\n            params.forEach(item => {\n              res += item.marker + item.seriesName + \": \" + item.value + \" MB<br/>\";\n            });\n            return res;\n          }\n        },\n        legend: {\n          data: [\"入口流量 (Bytes In)\", \"出口流量 (Bytes Out)\"],\n          bottom: 10\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"10%\",\n          // Adjusted for legend\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量 (MB)\",\n          axisLabel: {\n            formatter: \"{value} MB\"\n          }\n        },\n        dataZoom: [{\n          type: \"slider\",\n          start: 0,\n          end: 100,\n          height: 20,\n          bottom: 40\n        }, {\n          type: \"inside\",\n          start: 0,\n          end: 100\n        }],\n        series: [{\n          name: \"入口流量 (Bytes In)\",\n          type: \"line\",\n          smooth: true,\n          data: bytesIn,\n          itemStyle: {\n            color: \"#91CC75\"\n          },\n          areaStyle: {\n            opacity: 0.3\n          }\n        }, {\n          name: \"出口流量 (Bytes Out)\",\n          type: \"line\",\n          smooth: true,\n          data: bytesOut,\n          itemStyle: {\n            color: \"#FAC858\"\n          },\n          areaStyle: {\n            opacity: 0.3\n          }\n        }]\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(document.getElementById(\"emailFrequencyChart\"));\n      this.updateEmailFrequencyChart();\n    },\n    updateEmailFrequencyChart() {\n      if (!this.departmentEmailActivityData || this.departmentEmailActivityData.length === 0) {\n        this.showEmptyChart(this.emailFrequencyChart, \"emailFrequencyChart\", \"部门邮件活动数据加载中或为空\");\n        return;\n      }\n      const departments = this.departmentEmailActivityData.map(item => item.department);\n      // Python脚本输出的是 emailCount，代表该部门的总邮件活动数\n      const emailCounts = this.departmentEmailActivityData.map(item => item.emailCount || 0);\n      const option = {\n        title: {\n          text: \"部门邮件活动量\",\n          // 修改标题\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        legend: {\n          data: [\"邮件总数\"],\n          // 修改图例\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: departments\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"邮件数量\" // 修改Y轴名称\n        },\n        series: [{\n          name: \"邮件总数\",\n          // 修改系列名称\n          type: \"bar\",\n          data: emailCounts,\n          itemStyle: {\n            color: \"#5470C6\"\n          }\n        }\n        // { // 移除第二个系列，因为我们现在只显示总数\n        //   name: \"接收邮件\",\n        //   type: \"bar\",\n        //   data: receivedData,\n        //   itemStyle: { color: \"#91CC75\" },\n        // },\n        ]\n      };\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(document.getElementById(\"loginSuccessChart\"));\n      this.updateLoginSuccessChart();\n    },\n    updateLoginSuccessChart() {\n      if (!this.loginSuccessFailData || Object.keys(this.loginSuccessFailData).length === 0) {\n        this.showEmptyChart(this.loginSuccessChart, \"loginSuccessChart\", \"登录成功/失败数据加载中或为空\");\n        return;\n      }\n\n      // 从 this.loginSuccessFailData 提取并计算数据\n      const departments = Object.keys(this.loginSuccessFailData);\n      const successRates = departments.map(dept => {\n        const success = this.loginSuccessFailData[dept].success_count || this.loginSuccessFailData[dept].success || 0;\n        const fail = this.loginSuccessFailData[dept].fail_count || this.loginSuccessFailData[dept].fail || 0;\n        const total = success + fail;\n        return total > 0 ? parseFloat((success / total * 100).toFixed(1)) : 0;\n      });\n      if (departments.length === 0) {\n        this.showEmptyChart(this.loginSuccessChart, \"loginSuccessChart\", \"无部门登录数据可供显示\");\n        return;\n      }\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\"\n        },\n        legend: {\n          // 图例会根据 series 的 name 生成，一般是 \"登录成功率\"\n          data: [\"登录成功率\"],\n          top: 30\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          // 调整以适应图例和标题\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: departments // 使用动态部门数据\n        },\n        yAxis: {\n          type: \"value\",\n          min: 0,\n          // 可以从0开始，或者动态设置min/max\n          max: 100,\n          name: \"成功率(%)\"\n        },\n        series: [{\n          name: \"登录成功率\",\n          type: \"bar\",\n          barWidth: \"60%\",\n          data: successRates,\n          // 使用动态成功率数据\n          itemStyle: {\n            color: function (params) {\n              if (params.value >= 99) {\n                return \"#67C23A\";\n              } else if (params.value >= 97) {\n                return \"#E6A23C\";\n              } else if (params.value > 0) {\n                return \"#F56C6C\";\n              } else {\n                return \"#909399\"; // 0或无数据的情况\n              }\n            }\n          }\n        }]\n      };\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(document.getElementById(\"tcpProtocolChart\"));\n      this.updateTcpProtocolChart();\n    },\n    updateTcpProtocolChart() {\n      if (!this.tcpProtocolData || Array.isArray(this.tcpProtocolData) && this.tcpProtocolData.length === 0 || typeof this.tcpProtocolData === \"object\" && Object.keys(this.tcpProtocolData).length === 0) {\n        this.showEmptyChart(this.tcpProtocolChart, \"tcpProtocolChart\", \"TCP协议数据加载中或为空\");\n        return;\n      }\n      let formattedProtocolData = [];\n      // 根据 this.tcpProtocolData 的实际结构进行转换\n      // 假设 python 生成的是一个对象: { \"HTTP/HTTPS\": 120, \"FTP\": 50 }\n      if (typeof this.tcpProtocolData === \"object\" && !Array.isArray(this.tcpProtocolData) && this.tcpProtocolData !== null) {\n        for (const protocol in this.tcpProtocolData) {\n          if (Object.prototype.hasOwnProperty.call(this.tcpProtocolData, protocol)) {\n            formattedProtocolData.push({\n              name: protocol,\n              value: this.tcpProtocolData[protocol] || 0\n            });\n          }\n        }\n      } else if (Array.isArray(this.tcpProtocolData)) {\n        // 假设 python 生成的是数组: [{protocol: \"HTTP/HTTPS\", count: 120}, ...]\n        // 或者已经是 {name: \"...\", value: ...} 格式\n        if (this.tcpProtocolData.length > 0 && this.tcpProtocolData[0].protocol && this.tcpProtocolData[0].count !== undefined) {\n          formattedProtocolData = this.tcpProtocolData.map(p => ({\n            name: p.protocol,\n            value: p.count\n          }));\n        } else {\n          formattedProtocolData = this.tcpProtocolData; // 假设已经是 {name: ..., value: ...}\n        }\n      }\n      if (formattedProtocolData.length === 0) {\n        this.showEmptyChart(this.tcpProtocolChart, \"tcpProtocolChart\", \"TCP协议数据处理后为空\");\n        return;\n      }\n      const legendData = formattedProtocolData.map(item => item.name);\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\"\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: legendData // 使用动态生成的图例数据\n        },\n        series: [{\n          name: \"协议使用\",\n          type: \"pie\",\n          radius: \"55%\",\n          center: [\"50%\", \"60%\"],\n          data: formattedProtocolData,\n          // 使用动态生成的系列数据\n          emphasis: {\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }]\n      };\n      this.tcpProtocolChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkTimeChart","workHoursChart","webCategoryChart","serverAccessChart","networkFlowChart","emailFrequencyChart","loginSuccessChart","tcpProtocolChart","selectedDepartment","webVisitTimeRange","selectedDate","pickerOptions","disabledDate","time","start","Date","end","getTime","isLoading","allDepartments","departmentCheckTimeData","workDurationDistributionData","webCategoryData","departmentEmailActivityData","loginSuccessFailData","tcpProtocolData","serverDBAccessData","dailyNetworkTrafficData","mounted","loadBehaviorData","$nextTick","initCheckTimeChart","initWorkHoursChart","initWebCategoryChart","initServerAccessChart","initNetworkFlowChart","initEmailFrequencyChart","initLoginSuccessChart","initTcpProtocolChart","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","methods","showEmptyChart","chartInstance","chartElementId","message","clear","setOption","title","text","left","top","textStyle","color","fontSize","xAxis","yAxis","series","e","console","error","chartDom","document","getElementById","innerHTML","$message","info","deptCheckRes","workDurationRes","webCatRes","deptEmailRes","loginSucFailRes","tcpProtoRes","serverAccessRes","dailyNetworkTrafficRes","Promise","all","fetch","ok","Error","json","length","map","d","department","success","updateAllCharts","resize","dispose","$echarts","init","updateCheckTimeChart","departmentData","find","checkInDistribution","Array","isArray","checkOutDistribution","checkInTimes","item","timeBin","checkInCounts","count","checkOutTimes","checkOutCounts","allTimeBins","Set","sort","a","b","aHour","aMinute","split","Number","bHour","bMinute","formattedCheckInData","bin","found","formattedCheckOutData","option","subtitle","tooltip","trigger","axisPointer","type","formatter","params","res","forEach","value","seriesName","legend","grid","right","bottom","containLabel","axisTick","alignWithLabel","axisLabel","interval","rotate","barGap","emphasis","focus","itemStyle","updateWorkHoursChart","durationRanges","durationRange","counts","updateWebCategoryChart","dataForRange","Object","keys","categoryData","titleText","workHours","afterHours","allDay","dataForPie","category","orient","radius","avoidLabelOverlap","label","show","position","fontWeight","labelLine","updateServerAccessChart","sortedData","topN","displayData","slice","boundaryGap","reverse","substring","updateNetworkFlowChart","sortedTrafficData","date","dates","bytesIn","bytes_in","toFixed","bytesOut","bytes_out","marker","dataZoom","height","smooth","areaStyle","opacity","updateEmailFrequencyChart","departments","emailCounts","emailCount","updateLoginSuccessChart","successRates","dept","success_count","fail","fail_count","total","parseFloat","min","max","barWidth","updateTcpProtocolChart","formattedProtocolData","protocol","prototype","hasOwnProperty","call","push","undefined","p","legendData","center","shadowBlur","shadowOffsetX","shadowColor"],"sources":["src/views/Behavior.vue"],"sourcesContent":["<template>\n  <div class=\"behavior\">\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工日常工作行为分析</span>\n            <el-tooltip\n              class=\"item\"\n              effect=\"dark\"\n              content=\"分析各部门员工的正常工作模式和行为特征\"\n              placement=\"top\"\n            >\n              <i class=\"el-icon-question\" style=\"margin-left: 10px\"></i>\n            </el-tooltip>\n          </div>\n          <p>\n            通过对监控数据的分析，我们总结了公司不同部门员工的工作行为模式，包括工作时间、网络活动、邮件沟通等。\n          </p>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工打卡时间分析</span>\n            <el-select\n              v-model=\"selectedDepartment\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n              placeholder=\"选择部门\"\n            >\n              <el-option\n                v-for=\"dept in allDepartments\"\n                :key=\"dept\"\n                :label=\"dept\"\n                :value=\"dept\"\n              ></el-option>\n            </el-select>\n          </div>\n          <div id=\"checkTimeChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工工作时长分布</span>\n          </div>\n          <div id=\"workHoursChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>员工网页访问类别分析</span>\n            <el-radio-group\n              v-model=\"webVisitTimeRange\"\n              size=\"mini\"\n              style=\"float: right; margin-right: 10px\"\n            >\n              <el-radio-button label=\"workHours\">工作时间</el-radio-button>\n              <el-radio-button label=\"afterHours\">非工作时间</el-radio-button>\n              <el-radio-button label=\"allDay\">全天</el-radio-button>\n            </el-radio-group>\n          </div>\n          <div id=\"webCategoryChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"12\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>服务器/数据库访问频率</span>\n          </div>\n          <div id=\"serverAccessChart\" style=\"width: 100%; height: 350px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row style=\"margin-top: 20px\">\n      <el-col :span=\"24\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>网络流量时序分析</span>\n            <el-date-picker\n              v-model=\"selectedDate\"\n              type=\"date\"\n              format=\"yyyy-MM-dd\"\n              value-format=\"yyyy-MM-dd\"\n              placeholder=\"选择日期\"\n              :picker-options=\"pickerOptions\"\n              style=\"float: right; margin-right: 10px; width: 150px\"\n              size=\"mini\"\n            >\n            </el-date-picker>\n          </div>\n          <div id=\"networkFlowChart\" style=\"width: 100%; height: 400px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>邮件通信频率（按部门）</span>\n          </div>\n          <div\n            id=\"emailFrequencyChart\"\n            style=\"width: 100%; height: 300px\"\n          ></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>登录成功率</span>\n          </div>\n          <div id=\"loginSuccessChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\" class=\"clearfix\">\n            <span>TCP协议使用分布</span>\n          </div>\n          <div id=\"tcpProtocolChart\" style=\"width: 100%; height: 300px\"></div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Behavior\",\n  data() {\n    return {\n      checkTimeChart: null,\n      workHoursChart: null,\n      webCategoryChart: null,\n      serverAccessChart: null,\n      networkFlowChart: null,\n      emailFrequencyChart: null,\n      loginSuccessChart: null,\n      tcpProtocolChart: null,\n      selectedDepartment: \"\",\n      webVisitTimeRange: \"workHours\",\n      selectedDate: \"2017-11-01\",\n      pickerOptions: {\n        disabledDate(time) {\n          // 只允许选择2017年11月的日期\n          const start = new Date(\"2017-11-01\");\n          const end = new Date(\"2017-11-30\");\n          return time.getTime() < start || time.getTime() > end;\n        },\n      },\n      isLoading: true,\n      allDepartments: [],\n      departmentCheckTimeData: null,\n      workDurationDistributionData: null,\n      webCategoryData: null,\n      departmentEmailActivityData: null,\n      loginSuccessFailData: null,\n      tcpProtocolData: null,\n      serverDBAccessData: [],\n      dailyNetworkTrafficData: [],\n    };\n  },\n  async mounted() {\n    await this.loadBehaviorData();\n    this.$nextTick(() => {\n      this.initCheckTimeChart();\n      this.initWorkHoursChart();\n      this.initWebCategoryChart();\n      this.initServerAccessChart();\n      this.initNetworkFlowChart();\n      this.initEmailFrequencyChart();\n      this.initLoginSuccessChart();\n      this.initTcpProtocolChart();\n    });\n\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    selectedDepartment() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n    },\n    webVisitTimeRange() {\n      if (this.webCategoryData) this.initWebCategoryChart();\n    },\n    selectedDate() {\n      if (this.networkFlowChart) this.initNetworkFlowChart();\n    },\n  },\n  methods: {\n    showEmptyChart(chartInstance, chartElementId, message = \"暂无数据\") {\n      if (chartInstance) {\n        chartInstance.clear(); // 清除之前的图表内容\n        // 确保 setOption 在有效的实例上调用\n        try {\n          chartInstance.setOption({\n            title: {\n              text: message,\n              left: \"center\",\n              top: \"center\",\n              textStyle: {\n                color: \"#888\",\n                fontSize: 16,\n              },\n            },\n            xAxis: {}, // Ensure axes are cleared/reset\n            yAxis: {},\n            series: [], // Ensure series are cleared\n          });\n        } catch (e) {\n          console.error(\"Error setting empty chart option:\", e, chartInstance);\n          // Fallback for DOM if ECharts instance is problematic\n          const chartDom = document.getElementById(chartElementId);\n          if (chartDom) {\n            chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n          }\n        }\n      } else {\n        const chartDom = document.getElementById(chartElementId);\n        if (chartDom) {\n          chartDom.innerHTML = `<div style=\\\"text-align: center; padding-top: 50px; color: #888;\\\">${message}</div>`;\n        }\n      }\n    },\n\n    async loadBehaviorData() {\n      this.isLoading = true;\n      this.$message.info(\"正在加载行为分析数据...\");\n      try {\n        const [\n          deptCheckRes,\n          workDurationRes,\n          webCatRes,\n          deptEmailRes,\n          loginSucFailRes,\n          tcpProtoRes,\n          serverAccessRes,\n          dailyNetworkTrafficRes,\n        ] = await Promise.all([\n          fetch(\"/department_check_time_approx.json\"),\n          fetch(\"/work_duration_distribution.json\"),\n          fetch(\"/web_category_distribution.json\"),\n          fetch(\"/department_email_activity.json\"),\n          fetch(\"/login_success_fail.json\"),\n          fetch(\"/tcp_protocol_distribution.json\"),\n          fetch(\"/server_database_access_frequency.json\"),\n          fetch(\"/daily_network_traffic.json\"),\n        ]);\n\n        if (!deptCheckRes.ok) throw new Error(\"加载部门打卡数据失败\");\n        this.departmentCheckTimeData = await deptCheckRes.json();\n        if (\n          this.departmentCheckTimeData &&\n          this.departmentCheckTimeData.length > 0 &&\n          this.allDepartments.length === 0 // 防止重复填充或覆盖\n        ) {\n          this.allDepartments = this.departmentCheckTimeData.map(\n            (d) => d.department\n          );\n          if (this.allDepartments.length > 0 && !this.selectedDepartment) {\n            // this.selectedDepartment = this.allDepartments[0]; //默认选中第一个（如果之前没有选择）\n          }\n        }\n\n        if (!workDurationRes.ok) throw new Error(\"加载工时分布数据失败\");\n        this.workDurationDistributionData = await workDurationRes.json();\n\n        if (!webCatRes.ok) throw new Error(\"加载网页分类数据失败\");\n        this.webCategoryData = await webCatRes.json();\n\n        if (!deptEmailRes.ok) throw new Error(\"加载部门邮件活动数据失败\");\n        this.departmentEmailActivityData = await deptEmailRes.json();\n\n        if (!loginSucFailRes.ok) throw new Error(\"加载登录成功失败数据失败\");\n        this.loginSuccessFailData = await loginSucFailRes.json();\n\n        if (!tcpProtoRes.ok) throw new Error(\"加载TCP协议数据失败\");\n        this.tcpProtocolData = await tcpProtoRes.json();\n\n        // 处理新增数据\n        if (!serverAccessRes.ok) throw new Error(\"加载服务器访问频率数据失败\");\n        this.serverDBAccessData = await serverAccessRes.json();\n\n        if (!dailyNetworkTrafficRes.ok)\n          throw new Error(\"加载每日网络流量数据失败\");\n        this.dailyNetworkTrafficData = await dailyNetworkTrafficRes.json();\n\n        this.$message.success(\"行为分析数据加载完成!\");\n        // 数据加载完成后，需要确保所有图表都用新数据更新\n        this.updateAllCharts();\n      } catch (error) {\n        console.error(\"加载行为数据失败:\", error);\n        this.$message.error(`加载行为数据失败: ${error.message}`);\n        // 即使部分失败，也尝试更新图表，它们有自己的空状态处理\n        this.updateAllCharts();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    updateAllCharts() {\n      if (this.departmentCheckTimeData) this.initCheckTimeChart();\n      if (this.workDurationDistributionData) this.initWorkHoursChart();\n      if (this.webCategoryData) this.initWebCategoryChart();\n      if (this.serverDBAccessData) this.initServerAccessChart(); // 更新调用\n      if (this.dailyNetworkTrafficData) this.initNetworkFlowChart(); // 更新调用\n      if (this.departmentEmailActivityData) this.initEmailFrequencyChart();\n      if (this.loginSuccessFailData) this.initLoginSuccessChart();\n      if (this.tcpProtocolData) this.initTcpProtocolChart();\n    },\n    handleResize() {\n      this.checkTimeChart && this.checkTimeChart.resize();\n      this.workHoursChart && this.workHoursChart.resize();\n      this.webCategoryChart && this.webCategoryChart.resize();\n      this.serverAccessChart && this.serverAccessChart.resize();\n      this.networkFlowChart && this.networkFlowChart.resize();\n      this.emailFrequencyChart && this.emailFrequencyChart.resize();\n      this.loginSuccessChart && this.loginSuccessChart.resize();\n      this.tcpProtocolChart && this.tcpProtocolChart.resize();\n    },\n    initCheckTimeChart() {\n      if (this.checkTimeChart) {\n        this.checkTimeChart.dispose();\n      }\n      this.checkTimeChart = this.$echarts.init(\n        document.getElementById(\"checkTimeChart\")\n      );\n      this.updateCheckTimeChart();\n    },\n    updateCheckTimeChart() {\n      if (\n        !this.departmentCheckTimeData ||\n        this.departmentCheckTimeData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          \"部门打卡整体数据加载中或为空\"\n        );\n        return;\n      }\n      if (\n        !this.selectedDepartment ||\n        this.selectedDepartment === \"暂无部门数据\"\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          \"请先选择一个部门\"\n        );\n        return;\n      }\n\n      const departmentData = this.departmentCheckTimeData.find(\n        (d) => d.department === this.selectedDepartment\n      );\n\n      if (!departmentData) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          `部门 [${this.selectedDepartment}] 的打卡数据未找到`\n        );\n        return;\n      }\n\n      const checkInDistribution = Array.isArray(\n        departmentData.checkInDistribution\n      )\n        ? departmentData.checkInDistribution\n        : [];\n      const checkOutDistribution = Array.isArray(\n        departmentData.checkOutDistribution\n      )\n        ? departmentData.checkOutDistribution\n        : [];\n\n      if (\n        checkInDistribution.length === 0 &&\n        checkOutDistribution.length === 0\n      ) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          `部门 [${this.selectedDepartment}] 无任何打卡记录`\n        );\n        return;\n      }\n\n      const checkInTimes = checkInDistribution.map((item) => item.timeBin);\n      const checkInCounts = checkInDistribution.map((item) => item.count);\n      const checkOutTimes = checkOutDistribution.map((item) => item.timeBin);\n      const checkOutCounts = checkOutDistribution.map((item) => item.count);\n\n      const allTimeBins = [\n        ...new Set([...checkInTimes, ...checkOutTimes]),\n      ].sort((a, b) => {\n        // 自定义排序，确保 'HH:MM' 格式正确排序\n        const [aHour, aMinute] = a.split(\":\").map(Number);\n        const [bHour, bMinute] = b.split(\":\").map(Number);\n        if (aHour !== bHour) return aHour - bHour;\n        return aMinute - bMinute;\n      });\n\n      if (allTimeBins.length === 0) {\n        this.showEmptyChart(\n          this.checkTimeChart,\n          \"checkTimeChart\",\n          `部门 [${this.selectedDepartment}] 无有效打卡时间点`\n        );\n        return;\n      }\n\n      const formattedCheckInData = allTimeBins.map((bin) => {\n        const found = checkInDistribution.find((d) => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n      const formattedCheckOutData = allTimeBins.map((bin) => {\n        const found = checkOutDistribution.find((d) => d.timeBin === bin);\n        return found ? found.count : 0;\n      });\n\n      const option = {\n        title: {\n          text: \"员工上下班时间分布\",\n          subtitle: `部门: ${this.selectedDepartment}`,\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n          formatter: function (params) {\n            let res = params[0].name; // X轴的时间点 (timeBin)\n            params.forEach((item) => {\n              if (item.value > 0) {\n                // 只显示有数据的系列\n                res += \"<br/>\" + item.seriesName + \" : \" + item.value + \"人\";\n              }\n            });\n            return res;\n          },\n        },\n        legend: {\n          data: [\"上班打卡\", \"下班打卡\"],\n          top: 50, // 调整图例位置，给副标题留空间\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 90, // 调整grid位置\n          containLabel: true,\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: allTimeBins,\n            axisTick: {\n              alignWithLabel: true,\n            },\n            axisLabel: {\n              interval: \"auto\",\n              rotate: allTimeBins.length > 12 ? 30 : 0, // 时间点多的时候旋转标签\n            },\n          },\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"人数\",\n          },\n        ],\n        series: [\n          {\n            name: \"上班打卡\",\n            type: \"bar\",\n            barGap: 0,\n            emphasis: {\n              focus: \"series\",\n            },\n            data: formattedCheckInData,\n            itemStyle: { color: \"#5470C6\" },\n          },\n          {\n            name: \"下班打卡\",\n            type: \"bar\",\n            emphasis: {\n              focus: \"series\",\n            },\n            data: formattedCheckOutData,\n            itemStyle: { color: \"#91CC75\" },\n          },\n        ],\n      };\n\n      this.checkTimeChart.setOption(option, true); // 使用 true 确保清除旧配置\n    },\n    initWorkHoursChart() {\n      if (this.workHoursChart) {\n        this.workHoursChart.dispose();\n      }\n      this.workHoursChart = this.$echarts.init(\n        document.getElementById(\"workHoursChart\")\n      );\n      this.updateWorkHoursChart();\n    },\n    updateWorkHoursChart() {\n      if (\n        !this.workDurationDistributionData ||\n        this.workDurationDistributionData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.workHoursChart,\n          \"workHoursChart\",\n          \"员工工时分布数据加载中或为空\"\n        );\n        return;\n      }\n\n      const durationRanges = this.workDurationDistributionData.map(\n        (item) => item.durationRange\n      );\n      const counts = this.workDurationDistributionData.map(\n        (item) => item.count\n      );\n\n      const option = {\n        title: {\n          text: \"员工工作时长分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: durationRanges,\n          name: \"工作时长范围\",\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"记录次数\",\n        },\n        series: [\n          {\n            name: \"工作时长分布\",\n            type: \"bar\",\n            data: counts,\n            itemStyle: { color: \"#FAC858\" },\n          },\n        ],\n      };\n      this.workHoursChart.setOption(option);\n    },\n    initWebCategoryChart() {\n      if (this.webCategoryChart) {\n        this.webCategoryChart.dispose();\n      }\n      const chartDom = document.getElementById(\"webCategoryChart\");\n      if (chartDom) {\n        this.webCategoryChart = this.$echarts.init(chartDom);\n        this.updateWebCategoryChart();\n      } else {\n        console.error(\"Web category chart DOM not found.\");\n      }\n    },\n    updateWebCategoryChart() {\n      if (!this.webCategoryData) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          \"网页分类数据加载中或为空\"\n        );\n        return;\n      }\n\n      const dataForRange = this.webCategoryData[this.webVisitTimeRange];\n\n      if (!dataForRange || Object.keys(dataForRange).length === 0) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          `时段 [${this.webVisitTimeRange}] 暂无网页访问数据`\n        );\n        return;\n      }\n\n      let categoryData = [];\n      let titleText = \"网页访问类别\";\n\n      if (\n        this.webVisitTimeRange === \"workHours\" &&\n        this.webCategoryData.workHours\n      ) {\n        categoryData = this.webCategoryData.workHours;\n        titleText = \"工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"afterHours\" &&\n        this.webCategoryData.afterHours\n      ) {\n        categoryData = this.webCategoryData.afterHours;\n        titleText = \"非工作时间网页访问类别\";\n      } else if (\n        this.webVisitTimeRange === \"allDay\" &&\n        this.webCategoryData.allDay\n      ) {\n        categoryData = this.webCategoryData.allDay;\n        titleText = \"全天网页访问类别\";\n      }\n\n      if (categoryData.length === 0) {\n        this.showEmptyChart(\n          this.webCategoryChart,\n          \"webCategoryChart\",\n          `暂无${titleText}数据`\n        );\n        return;\n      }\n\n      const dataForPie = categoryData.map((item) => ({\n        name: item.category,\n        value: item.count,\n      }));\n\n      const option = {\n        title: {\n          text: titleText,\n          left: \"center\",\n          top: 10,\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: dataForPie.map((item) => item.name),\n        },\n        series: [\n          {\n            name: \"访问类别\",\n            type: \"pie\",\n            radius: [\"50%\", \"70%\"],\n            avoidLabelOverlap: false,\n            label: {\n              show: false,\n              position: \"center\",\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: \"18\",\n                fontWeight: \"bold\",\n              },\n            },\n            labelLine: {\n              show: false,\n            },\n            data: dataForPie,\n          },\n        ],\n      };\n\n      this.webCategoryChart.setOption(option);\n    },\n    initServerAccessChart() {\n      if (this.serverAccessChart) {\n        this.serverAccessChart.dispose();\n      }\n      const chartDom = document.getElementById(\"serverAccessChart\");\n      if (chartDom) {\n        this.serverAccessChart = this.$echarts.init(chartDom);\n        this.updateServerAccessChart();\n      } else {\n        console.error(\"Server access chart DOM not found.\");\n      }\n    },\n    updateServerAccessChart() {\n      if (!this.serverAccessChart) return;\n\n      if (!this.serverDBAccessData || this.serverDBAccessData.length === 0) {\n        this.showEmptyChart(\n          this.serverAccessChart,\n          \"serverAccessChart\",\n          \"无服务器/数据库访问数据\"\n        );\n        return;\n      }\n\n      const sortedData = [...this.serverDBAccessData].sort(\n        (a, b) => b.count - a.count\n      );\n      const topN = 15; // 只显示Top N\n      const displayData = sortedData.slice(0, topN);\n\n      const option = {\n        title: {\n          text: \"服务器/数据库访问频率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"value\",\n          boundaryGap: [0, 0.01],\n        },\n        yAxis: {\n          type: \"category\",\n          data: displayData.map((item) => item.name).reverse(), // Reverse for horizontal bar\n          axisLabel: {\n            interval: 0,\n            rotate: 0, // No rotation needed for horizontal bars if names are short\n            formatter: function (value) {\n              return value.length > 15 ? value.substring(0, 15) + \"...\" : value;\n            },\n          },\n        },\n        series: [\n          {\n            name: \"访问次数\",\n            type: \"bar\",\n            data: displayData.map((item) => item.count).reverse(), // Reverse for horizontal bar\n            itemStyle: {\n              color: \"#5470C6\",\n            },\n          },\n        ],\n      };\n      this.serverAccessChart.setOption(option);\n    },\n    initNetworkFlowChart() {\n      if (this.networkFlowChart) {\n        this.networkFlowChart.dispose();\n      }\n      const chartDom = document.getElementById(\"networkFlowChart\");\n      if (chartDom) {\n        this.networkFlowChart = this.$echarts.init(chartDom);\n        this.updateNetworkFlowChart();\n      } else {\n        console.error(\"Network flow chart DOM not found.\");\n      }\n    },\n    updateNetworkFlowChart() {\n      if (!this.networkFlowChart) return;\n\n      if (\n        !this.dailyNetworkTrafficData ||\n        this.dailyNetworkTrafficData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.networkFlowChart,\n          \"networkFlowChart\",\n          \"无每日网络流量数据\"\n        );\n        return;\n      }\n\n      // Sort data by date just in case it's not already sorted\n      const sortedTrafficData = [...this.dailyNetworkTrafficData].sort(\n        (a, b) => new Date(a.date) - new Date(b.date)\n      );\n\n      const dates = sortedTrafficData.map((item) => item.date);\n      const bytesIn = sortedTrafficData.map((item) =>\n        (item.bytes_in / (1024 * 1024)).toFixed(2)\n      ); // Convert to MB\n      const bytesOut = sortedTrafficData.map((item) =>\n        (item.bytes_out / (1024 * 1024)).toFixed(2)\n      ); // Convert to MB\n\n      const option = {\n        title: {\n          text: \"每日网络流量分析 (MB)\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          formatter: function (params) {\n            let res = params[0].name + \"<br/>\";\n            params.forEach((item) => {\n              res +=\n                item.marker + item.seriesName + \": \" + item.value + \" MB<br/>\";\n            });\n            return res;\n          },\n        },\n        legend: {\n          data: [\"入口流量 (Bytes In)\", \"出口流量 (Bytes Out)\"],\n          bottom: 10,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"10%\", // Adjusted for legend\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: dates,\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"流量 (MB)\",\n          axisLabel: {\n            formatter: \"{value} MB\",\n          },\n        },\n        dataZoom: [\n          {\n            type: \"slider\",\n            start: 0,\n            end: 100,\n            height: 20,\n            bottom: 40,\n          },\n          {\n            type: \"inside\",\n            start: 0,\n            end: 100,\n          },\n        ],\n        series: [\n          {\n            name: \"入口流量 (Bytes In)\",\n            type: \"line\",\n            smooth: true,\n            data: bytesIn,\n            itemStyle: { color: \"#91CC75\" },\n            areaStyle: { opacity: 0.3 },\n          },\n          {\n            name: \"出口流量 (Bytes Out)\",\n            type: \"line\",\n            smooth: true,\n            data: bytesOut,\n            itemStyle: { color: \"#FAC858\" },\n            areaStyle: { opacity: 0.3 },\n          },\n        ],\n      };\n      this.networkFlowChart.setOption(option);\n    },\n    initEmailFrequencyChart() {\n      if (this.emailFrequencyChart) {\n        this.emailFrequencyChart.dispose();\n      }\n      this.emailFrequencyChart = this.$echarts.init(\n        document.getElementById(\"emailFrequencyChart\")\n      );\n      this.updateEmailFrequencyChart();\n    },\n    updateEmailFrequencyChart() {\n      if (\n        !this.departmentEmailActivityData ||\n        this.departmentEmailActivityData.length === 0\n      ) {\n        this.showEmptyChart(\n          this.emailFrequencyChart,\n          \"emailFrequencyChart\",\n          \"部门邮件活动数据加载中或为空\"\n        );\n        return;\n      }\n\n      const departments = this.departmentEmailActivityData.map(\n        (item) => item.department\n      );\n      // Python脚本输出的是 emailCount，代表该部门的总邮件活动数\n      const emailCounts = this.departmentEmailActivityData.map(\n        (item) => item.emailCount || 0\n      );\n\n      const option = {\n        title: {\n          text: \"部门邮件活动量\", // 修改标题\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\",\n          },\n        },\n        legend: {\n          data: [\"邮件总数\"], // 修改图例\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80,\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: departments,\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"邮件数量\", // 修改Y轴名称\n        },\n        series: [\n          {\n            name: \"邮件总数\", // 修改系列名称\n            type: \"bar\",\n            data: emailCounts,\n            itemStyle: { color: \"#5470C6\" },\n          },\n          // { // 移除第二个系列，因为我们现在只显示总数\n          //   name: \"接收邮件\",\n          //   type: \"bar\",\n          //   data: receivedData,\n          //   itemStyle: { color: \"#91CC75\" },\n          // },\n        ],\n      };\n\n      this.emailFrequencyChart.setOption(option);\n    },\n    initLoginSuccessChart() {\n      if (this.loginSuccessChart) {\n        this.loginSuccessChart.dispose();\n      }\n      this.loginSuccessChart = this.$echarts.init(\n        document.getElementById(\"loginSuccessChart\")\n      );\n      this.updateLoginSuccessChart();\n    },\n    updateLoginSuccessChart() {\n      if (\n        !this.loginSuccessFailData ||\n        Object.keys(this.loginSuccessFailData).length === 0\n      ) {\n        this.showEmptyChart(\n          this.loginSuccessChart,\n          \"loginSuccessChart\",\n          \"登录成功/失败数据加载中或为空\"\n        );\n        return;\n      }\n\n      // 从 this.loginSuccessFailData 提取并计算数据\n      const departments = Object.keys(this.loginSuccessFailData);\n      const successRates = departments.map((dept) => {\n        const success =\n          this.loginSuccessFailData[dept].success_count ||\n          this.loginSuccessFailData[dept].success ||\n          0;\n        const fail =\n          this.loginSuccessFailData[dept].fail_count ||\n          this.loginSuccessFailData[dept].fail ||\n          0;\n        const total = success + fail;\n        return total > 0 ? parseFloat(((success / total) * 100).toFixed(1)) : 0;\n      });\n\n      if (departments.length === 0) {\n        this.showEmptyChart(\n          this.loginSuccessChart,\n          \"loginSuccessChart\",\n          \"无部门登录数据可供显示\"\n        );\n        return;\n      }\n\n      const option = {\n        title: {\n          text: \"各部门登录成功率\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c}%\",\n        },\n        legend: {\n          // 图例会根据 series 的 name 生成，一般是 \"登录成功率\"\n          data: [\"登录成功率\"],\n          top: 30,\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          top: 80, // 调整以适应图例和标题\n          containLabel: true,\n        },\n        xAxis: {\n          type: \"category\",\n          data: departments, // 使用动态部门数据\n        },\n        yAxis: {\n          type: \"value\",\n          min: 0, // 可以从0开始，或者动态设置min/max\n          max: 100,\n          name: \"成功率(%)\",\n        },\n        series: [\n          {\n            name: \"登录成功率\",\n            type: \"bar\",\n            barWidth: \"60%\",\n            data: successRates, // 使用动态成功率数据\n            itemStyle: {\n              color: function (params) {\n                if (params.value >= 99) {\n                  return \"#67C23A\";\n                } else if (params.value >= 97) {\n                  return \"#E6A23C\";\n                } else if (params.value > 0) {\n                  return \"#F56C6C\";\n                } else {\n                  return \"#909399\"; // 0或无数据的情况\n                }\n              },\n            },\n          },\n        ],\n      };\n\n      this.loginSuccessChart.setOption(option);\n    },\n    initTcpProtocolChart() {\n      if (this.tcpProtocolChart) {\n        this.tcpProtocolChart.dispose();\n      }\n      this.tcpProtocolChart = this.$echarts.init(\n        document.getElementById(\"tcpProtocolChart\")\n      );\n      this.updateTcpProtocolChart();\n    },\n    updateTcpProtocolChart() {\n      if (\n        !this.tcpProtocolData ||\n        (Array.isArray(this.tcpProtocolData) &&\n          this.tcpProtocolData.length === 0) ||\n        (typeof this.tcpProtocolData === \"object\" &&\n          Object.keys(this.tcpProtocolData).length === 0)\n      ) {\n        this.showEmptyChart(\n          this.tcpProtocolChart,\n          \"tcpProtocolChart\",\n          \"TCP协议数据加载中或为空\"\n        );\n        return;\n      }\n\n      let formattedProtocolData = [];\n      // 根据 this.tcpProtocolData 的实际结构进行转换\n      // 假设 python 生成的是一个对象: { \"HTTP/HTTPS\": 120, \"FTP\": 50 }\n      if (\n        typeof this.tcpProtocolData === \"object\" &&\n        !Array.isArray(this.tcpProtocolData) &&\n        this.tcpProtocolData !== null\n      ) {\n        for (const protocol in this.tcpProtocolData) {\n          if (\n            Object.prototype.hasOwnProperty.call(this.tcpProtocolData, protocol)\n          ) {\n            formattedProtocolData.push({\n              name: protocol,\n              value: this.tcpProtocolData[protocol] || 0,\n            });\n          }\n        }\n      } else if (Array.isArray(this.tcpProtocolData)) {\n        // 假设 python 生成的是数组: [{protocol: \"HTTP/HTTPS\", count: 120}, ...]\n        // 或者已经是 {name: \"...\", value: ...} 格式\n        if (\n          this.tcpProtocolData.length > 0 &&\n          this.tcpProtocolData[0].protocol &&\n          this.tcpProtocolData[0].count !== undefined\n        ) {\n          formattedProtocolData = this.tcpProtocolData.map((p) => ({\n            name: p.protocol,\n            value: p.count,\n          }));\n        } else {\n          formattedProtocolData = this.tcpProtocolData; // 假设已经是 {name: ..., value: ...}\n        }\n      }\n\n      if (formattedProtocolData.length === 0) {\n        this.showEmptyChart(\n          this.tcpProtocolChart,\n          \"tcpProtocolChart\",\n          \"TCP协议数据处理后为空\"\n        );\n        return;\n      }\n\n      const legendData = formattedProtocolData.map((item) => item.name);\n\n      const option = {\n        title: {\n          text: \"TCP协议使用分布\",\n          left: \"center\",\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{a} <br/>{b}: {c} ({d}%)\",\n        },\n        legend: {\n          orient: \"vertical\",\n          left: 10,\n          top: 30,\n          data: legendData, // 使用动态生成的图例数据\n        },\n        series: [\n          {\n            name: \"协议使用\",\n            type: \"pie\",\n            radius: \"55%\",\n            center: [\"50%\", \"60%\"],\n            data: formattedProtocolData, // 使用动态生成的系列数据\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: \"rgba(0, 0, 0, 0.5)\",\n              },\n            },\n          },\n        ],\n      };\n\n      this.tcpProtocolChart.setOption(option);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box-card {\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}